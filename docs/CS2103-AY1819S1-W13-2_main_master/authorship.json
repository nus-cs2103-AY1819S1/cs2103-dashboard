[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d EventsPlus+"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S1-W13-2/main[image:https://travis-ci.org/CS2103-AY1819S1-W13-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/kaitingpeck/main[image:https://ci.appveyor.com/api/projects/status/5mecq596nyw31vnu?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S1-W13-2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S1-W13-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\"\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "A [blue]*convenient* and [green]*time-saving* command-line interface event manager for university students. With this"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "one-stop shop"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "for managing contacts and events, a few lines and you’re all set!"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\"\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* This is a desktop Address Book application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* It is a Java application catered for busy university students to manage their contacts, events and project meetings"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " efficiently."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* This application includes the following features:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** A sophisticated GUI that includes a list panel and an in-built Browser."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "** Support for _Build Automation_ using Gradle and for _Continuous Integration_ using Travis CI."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* With this application, you can"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Manage groups of contacts easily"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Work in multiple groups conveniently and contact multiple persons with one command via a third-party application."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Obtain suggested locations and timings for events or meetings based on participants’ locations and timetable."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Send automated RSVP requests, for event or meeting participants using the app."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* This project is built on the AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 19,
      "-": 31
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u0027site-name\u0027: \u0027EventsPlus+\u0027,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S1-W13-2/main\u0027"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 1,
      "-": 245
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "EventsPlus+ was developed by team W13-2 of CS2103 AY18/19 Semester 1. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Jack Chai Jie Feng"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::cjiefeng.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "{empty}[https://github.com/cjiefeng[github]][\u003c\u003ccjiefeng#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibility: Overall project coordination, Code quality +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Component: Model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Peck Kai Ting"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::kaitingpeck.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "{empty}[http://github.com/kaitingpeck[github]][\u003c\u003ckaitingpeck#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Scheduling and Tracking, Documentation, Set up Travis, Coveralls \u0026 Appveyor +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Component: Logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Pratyay Jaidev"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::pratyayj.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "{empty}[http://github.com/pratyayj[github]][\u003c\u003cpratyayj#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Intellij expert +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Component: UI"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Yap Yu Wei"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::yap666y.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "{empty}[http://github.com/yap666y[github]][\u003c\u003cyap666y#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Deliverables and Deadlines +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Component: Storage"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Ryan Tan Wei Keat"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::ryantanwk.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "{empty}[http://github.com/ryantanwk[github]][\u003c\u003cryantanwk#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Integration, Testing, Set up team org and repo +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Component: Logic"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 12,
      "-": 50
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2103-AY1819S1-W13-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 1,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿\u003d EventsPlus+ - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-W13-2/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "By: `Team W13-2`      Since: `Sept 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/System-level4` repo."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/System-level4`), you should do the following:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Note how the `Model` simply raises a `SystemChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".  `Logic` uses the `SystemParser` class to parse the user command."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in xml format and read it back."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Classes used by multiple components are in the `seedu.System.commons` package."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "//tag::notification[]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Enable/Disable Notification feature"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "Notification preference is stored in the preferences.json file."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "The notification mechanism is facilitated by Javafx."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "Upon startup, notification preference is loaded from preferences.json and saved to the model."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Upon exit, the model\u0027s notification preference is saved to preferences.json to ensure statefulness."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "When enabled, it creates a child stage and scene from the main window and displays with a countdown timer to automatically close the stage."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "* `ui#NotificationWindow()` -- creates the stage and scene for the notification using 2 String inputs: `title` and `message`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "* `logic#parser#NotificationCommandParser()` -- creates a the relevant NotificationCommand object based on user\u0027s input"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* `logic#commands#NotificationCommand()` -- updates the model\u0027s notification preference"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the enable/disable notification mechanism behaves at each step."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The model\u0027s notification preference is initally enabled, the notification window appears."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `notification disable`. The `notification` command calls NotificationCommandParser which converts `disable` into the boolean `false` and creates a new Notification Command which updates the Model\u0027s notification preference to false."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "The notification command will update the notification preference regardless of whether the new preference is same as the previous preference."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How notification preferences updated"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Re-assign Model\u0027s notification preference regardless of previous preference"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Wasteful in the case of same notification preference."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Check current notification preference and only assign new value if it is different from the previous value."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Do not waste computing cycles on unecessary re-assingment of notification preference."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Code becomes more complicated because additional check required."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Writing to preferences.json"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Write all Model preferences to preferences.json"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Unecessary computing cycles wasted on writing when possibly no change"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Check for difference between Model preferences and preferences.json, only write to preferences.json if there is difference."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Efficient."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Code becomes more complicated because additional check required"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "// end::notification[]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedSystem`."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "It extends `System` with an undo/redo history, stored internally as an `SystemStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* `VersionedSystem#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* `VersionedSystem#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* `VersionedSystem#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitSystem()`, `Model#undoSystem()` and `Model#redoSystem()` respectively."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedSystem` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitSystem()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `SystemStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitSystem()`, causing another modified address book state to be saved into the `SystemStateList`."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "If a command fails its execution, it will not call `Model#commitSystem()`, so the address book state will not be saved into the `SystemStateList`."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoSystem()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoSystem()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoSystem()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "If the `currentStatePointer` is at index `SystemStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoSystem()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitSystem()`, `Model#undoSystem()` or `Model#redoSystem()`. Thus, the `SystemStateList` remains unchanged."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitSystem()`. Since the `currentStatePointer` is not pointing at the end of the `SystemStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedSystem`."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "// tag::addEvents[]"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Add Events feature"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "The adding of events is mainly carried out from `Model`. In the `Model` component, an `Event` class, as well as classes for `Event` attributes were created."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Namely, the classes `EventName`, `EventDescription`, `EventDate`, `EventTime`, `EventAddress` were created to represent their respective information in an `Event`,"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "as shown in the Class diagram below. Note that `EventDay` is generated from `EventDate` values. +"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "By doing so, we achieve more abstraction and cohesion, and this abides by the Separation of Concerns (SoC) principle at the class level."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "On top of facilitating checking of bugs within the individual attributes,"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "doing so will also allow the developer to alter the definition of the different attribute classes, as well as to add more attributes into the"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`Event` class easily."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::Event.png[Event class]"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Methods have been added to `ModelManager`, `AddressBook` and the newly-added class `UniqueEventList` to facilitate adding of persons."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "In order to limit modification of the internal list of `Event` objects, changes to this list is only carried out at the most fundamental level,"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "which is `UniqueEventList`. `ModelManager` stores an unmodifiable copy of the list, and `AddressBook` the reference to the internal list."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "An example usage scenario of the adding of events is as shown in the sequence diagram below."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::add-event-component.png[Interactions between components]"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "When the events are triggered from the `Model` component, they are handled by the UI, which updates the displayed information, and the"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`Storage` component, which saves the information to XML format. The event triggers are handled as follows."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::add-event-event-trigger.png[Handling of events triggered]"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "To display the event information according to their date, a list of lists of events grouped by `EventDate` is set in the `ListView` object in the `EventPanelList`."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Each cell represents the `EventListCard` for a particular date, which contains all the events, each displayed in a `EventCard`. For this implementation,"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "we require `ModelManager` to be able to return such an `ObservableList\u003cList\u003cEvent\u003e\u003e` object to the UI class `MainWindow`, and this is achieved via the method"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`ModelManager#getFilteredEventListByDate`."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data Structure to Support the UI Events Display"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* **Alternative 1 (current choice):** Store a list of type `ObservableList\u003cList\u003cEvent\u003e\u003e` in the `ListView` object in the `EventPanelList`."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "This list is re-computed in `ModelManager` each time a change in the internal list of events is detected, and passed to the UI class `MainWindow`."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "This facilitates a regeneration of the `TabPanel` stored in `MainWindow`, updating the display of events to the user."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "+"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Here, we only need to maintain one list of `Event` objects."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Since this is the case, there is no change to the `ObservableList\u003cList\u003cEvent\u003e\u003e` object passed into the `UI` classes. For the UI"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "to be updated with new information whenever events are added into the underlying `Event` list, we make use of a listener on the list `filteredEvents`."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Whenever there is a change detected by `filteredEvents`, an `AddressBookEventChangedEvent` is posted"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** `MainWindow` resets its `TabPanel` and passes the re-computed list (events grouped by date) into it."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "+"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "While this means that there is a regeneration of the `TabPanel` object in `MainWindow` each time such an event occurs,"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "this overhead is still acceptable given the current scale of the `AddressBook`."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* **Alternative 2:** Store a list of type `ObservableList\u003cObservableList\u003cEvent\u003e\u003e` in the `ListView` object,"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "as well as in `ModelManager`, and update this alongside the `filteredEvent` list in `ModelManager`."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "By doing so, we will not have to regenerate the `TabPanel` in `MainWindow` each time there is a change in the internal event list."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "+"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "To do so, we can add a listener to `filteredEvents` such that each time the internal list of events changes, the corresponding change is done to a list of type `ObservableList\u003cList\u003cEvent\u003e\u003e`."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "+"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "However, this will mean that if more actions are carried out on the internal event list, more updates will have be made to the way the listener is set up,"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "as it will have to listen to more types of changes and perform more actions accordingly. Though reducing overhead incurred"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "(as there is no need to regenerate the list each time a change occurs),"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "this could potentially create more bugs in the code, which is not desirable in the long run."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* **Alternative 3:** Store a list of type `ObservableList\u003cObservableList\u003cEvent\u003e\u003e` in the `ListView` object,"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "as well as in `Model`, and create another internal list `UniqueEventListByDate` for this list of lists. Update this alongside `UniqueEventList`."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "By doing so, we also will not have to regenerate the `TabPanel` in `MainWindow` each time there is a change in the internal event list, and no such listener"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "as in Alternative 2 is required."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "However, this means that we have to maintain two lists, both storing `Event` objects."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "The task of maintaining two lists may lead to inconsistencies between the two lists and more complex code in future,"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "should future developers decide to include more actions to mutate the underlying list of `Event` objects."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Hence, this is not preferred in our implementation."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "// end::addEvents[]"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::importcontacts[]"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Import Contacts"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "`ModelManager` now implements `readImportContactsFile` and it calls on `VersionedAddressBook`. +"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "`VersionAddressBook` is being called so that undo redo can work on import contacts command. +"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "`VersionAddressBook` extends `AddressBook` and it implements `readImportContactsFile`. +"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "`AddressBook` will call `readImportContactsFile` on `FileReader`. +"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "`FileReader` will read the provided CSV file, breaking the first line into Arrays of Strings. +"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "`FileReader` then take note of the index of mandatory fields:"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "* Name"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "* Email"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "* Phone Number"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "For each of the following lines until end of file, `Person` is created using index saved for each mandatory fields. +"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "Returned `Person` objects are then inserted into `UniquePersonsList` with validation. +"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "The number of successful inserts and duplicated will be returned to display after reading EOF. +"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the readImportContactsFile operatoin works:"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::ImportContactsSequenceDiagram.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "// end::importcontacts[]"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "//tag::meetinglocation[]"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Meeting Location"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "The meeting location mechanism is facilitated by the presence of a Faculty field in the Person class."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "The Faculty field stores the information about the person\u0027s location using conventional NUS naming (e.g. SDE, COM)."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "The information from this field will be used to perform Google Maps URL API calls so as to display a common meeting location for two people."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "// end::meetinglocation[]"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/SystemParser.java[`SystemParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/SystemParser.java[`SystemParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** See this https://github.com/se-edu/System-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/System.java[`System`] API need to be updated."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/System.java[`System`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/System.java[`System`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/System.java[`System`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `System#removeTag(Tag)`."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** See this https://github.com/se-edu/System-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** See this https://github.com/se-edu/System-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/SystemSystemTest.java[`SystemSystemTest#assertCommandBoxShowsDefaultStyle() and SystemSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** See this https://github.com/se-edu/System-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleSystemChangedEvent(SystemChangedEvent)`] to update the number of persons whenever there are new changes to the System."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/SystemSystemTest.java[`SystemSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** See this https://github.com/se-edu/System-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". Add a new method `backupSystem(ReadOnlySystem)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/SystemStorage.java[`SystemStorage`] interface."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlSystemStorage.java[`XmlSystemStorage`] class."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** See this https://github.com/se-edu/System-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*Scenario:* You are a software maintainer for `System`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/SystemParser.java[`SystemParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/SystemParserTest.java[`SystemParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/SystemParser.java[`SystemParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/SystemParserTest.java[`SystemParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `System.xml` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new Xml field for `Remark`."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". Fix `invalidAndValidPersonSystem.xml`, `typicalPersonsSystem.xml`, `validSystem.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "See this https://github.com/se-edu/System-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* * *` |user |add a new person |store more contacts in the app"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`*` |university student on multiple platforms (including social media) |import contacts from other sources (Facebook, Linkedin, etc.) |synchronize my contacts with other applications"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* *` |forgetful user |attach a picture to every contact [Coming in V2.0] |remember how the person looks like [Coming in V2.0]"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`*` |forgetful user |save some interesting notes about the contact [Coming in V2.0] |remember characteristics or traits of the contact"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |delete a person |remove entries that I no longer need"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* * *` |user |delete multiple contacts at one go [Coming in V2.0] |clean up my address book easily"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* *` |user |hide \u003c\u003cprivate-contact-detail, private contact details\u003e\u003e by default [Coming in V2.0] |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`*` |user with many persons in the address book |sort persons by name [Coming in V2.0] |locate a person easily"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* * *` |user |undo and redo changes |easily correct a wrongly taken action"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* * *` |user |edit contact information (contact numbers, addresses, tags, faculty, etc.) of existing contacts |be assured my contacts are up-to-date"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* *` |user |edit the information of multiple contacts at one go [Coming in V2.0] |maintain up-to-date records more efficiently"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* *` |user |add more than one number to a contact [Coming in V2.0] |retrieve all the contact numbers of the contact at one go"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* * *` |user |view contacts by tags [Coming in V2.0] |locate contacts in my different social circles easily"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* * *` |user |receive a toast for every action |be assured of the changes made"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* *` |user |choose what notifications I would like to receive |minimize distractions from the app"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* * *` |user |create new \u003c\u003cgroups, group\u003e\u003e from already existing contacts |collaborate with existing contacts"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* * *` |user |create new \u003c\u003cgroups, group\u003e\u003e from new contacts [Coming in V2.0] |have new group members automatically added in my address book"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* *` |user |add contacts to an existing \u003c\u003cgroup, group\u003e\u003e [Coming in V2.0] |include later-joining members"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`*` |user |be prompted to add new contacts to a suggested \u003c\u003cgroup, group\u003e\u003e based on the tags [Coming in V2.0] |be reminded to update groups with possible new users"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* * *` |user |rename groups [Coming in V2.0] |change the name of \u003c\u003cgroups, group\u003e\u003e over time"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`*` |user |merge \u003c\u003cgroups, group\u003e\u003e [Coming in V2.0] |organize my groups"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`*` |user |split \u003c\u003cgroups, group\u003e\u003e [Coming in V2.0] |organize my groups"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* * *` |user |view team members belonging to a \u003c\u003cgroup, group\u003e\u003e |view my contacts related to a specific group"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`*` |user |view other contacts in the same \u003c\u003cgroup, group\u003e\u003e as a specific contact [Coming in V2.0] |view group-related contacts using the information of only one member"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* * *` |user |remove a contact from a \u003c\u003cgroup, group\u003e\u003e [Coming in V2.0] |ensure that the group member list is up-to-date"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* * *` |user |delete an entire \u003c\u003cgroup, group\u003e\u003e [Coming in V2.0] |remove inactive groups without affecting my contact list"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* * *` |university student |add events to the app |keep track of my schedule and upcoming events"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* *` |busy university student |save my timetable in the app [Coming in V2.0] |tell easily when any events clash with my timetable"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* * *` |university student |check if an event clashes with my schedule |better decide if I can set up an appointment at that time slot"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* * *` |considerate  university student |obtain a meeting time that is convenient for all contacts in a group [Coming in V2.0]"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|find a convenient time for meetups"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* * *` |considerate university student |obtain a meeting location that is convenient for all contacts in a group"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "(based on faculty) |find a convenient location for meetups"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* * *` |university student |view my events for a particular week [Coming in V2.0] |gauge my availability for that week"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`*` |user |share multiple contacts with my peers [Coming in V2.0] |exchange contacts quickly"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`*` |user |archive inactive \u003c\u003cgroup, group\u003e\u003e without deletion [Coming in V2.0] |avoid clutter in the list of visible groups without losing the information permanently"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`*` |user |un-archive \u003c\u003cgroup, group\u003e\u003e [Coming in V2.0] |continue working with groups that have been re-activated if needed"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "| `* *` |user |detect similar contacts when importing contacts from an external source e.g. .csv file and merge them [Coming in V2.0] |avoid having duplicate contacts"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* * *` |user |I cannot add duplicate contacts (manually) [Coming in V2.0] |avoid having duplicate contacts"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "(For all use cases below, the *System* is `EventsPlus+` and the *Actor* is the `user`, unless specified otherwise)."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d UC1: Add person"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".  User requests to add a new contact"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".  System adds the contact and displays the new contact added"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "+"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* 1a. The input information is invalid."
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "+"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** 1a1. System shows an error message."
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "+"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d UC2: Delete person"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".  User requests to list persons"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".  System shows a list of persons"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".  System deletes the person"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** 3a1. System shows an error message."
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d UC3: Create new group"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". User requests to add new group of persons"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". System creates a new group with that name and displays the newly created group"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "+"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* 1a. The input information is invalid."
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "+"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** 1a1. System shows an error message."
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "+"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d UC4: View contacts for a group"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". User requests to view contacts for a particular group"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". System displays all contacts in that group"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "+"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* 1a. The group name is invalid."
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "+"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** 1a1. System shows an error message."
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "+"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d UC5: Add personal events"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". User requests to add event."
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". System records and displays event."
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* 1a. System detects a clash with the user\u0027s schedule."
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "+"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** 1a1. System shows a message informing the user of the clash."
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d UC6: Upcoming event notification"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". Notification appears 24h before the event."
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". User taps on notification."
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". User is redirected to app homepage."
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d UC7: Find common event location"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". User selects the event that he/she wants to find the common event location for."
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". System performs API calls with Google Maps API to generate the most central location for all members."
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". User accepts or rejects the generated location."
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". System sets event location."
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* 3a. User rejects the generated location."
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** 3a1. System gives user the option to state his/her preferred location and use case resumes from step 4."
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** 3a2. If user does not state location, no common event location is set and use case ends."
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "////"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Coming in V2.0"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d UC7: View all personal events"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". User requests to view all events."
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". System displays all events."
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* 1a. User enters invalid command."
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** 1a1. System displays error message."
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d UC8: Delete personal events"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Guarantees: Only the selected event will be deleted from the existing list."
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".\tUser requests to delete a personal event."
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".\tSystem removes the event from the user’s personal list of events."
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".\tSystem displays message showing that the event is deleted."
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* 1a. User enters invalid personal event or invalid command."
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** 1a1. System displays error message."
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "+"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "+"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* a. At any time, user chooses to end the command."
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "+"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** a1. System abandons the meeting being set up, and returns to original screen."
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d UC9: Find groups by keyword"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". User requests to get groups with a certain keyword."
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". System displays all the groups containing that keyword."
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": "User case ends."
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d UC10: View contacts by tag"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". User requests to view contacts for a given tag."
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". System displays contacts under that tag."
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": "User case ends."
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* 1a. User enters invalid tag."
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "+"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** 1a1. System displays invalid tag message and returns to original screen."
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "+"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UC11: Import timetable"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": ". User is redirected to IVLE login for app to access IVLE data."
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": ". Toast indicating successful import."
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": ". User is redirected to timetable page on the app."
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": "User case ends."
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. Incorrect login procedure is handled by IVLE."
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* 2b. System detects a clash with the user\u0027s schedule."
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** 2b1. System displays error message showing a clash."
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** 2b2. System asks if user wants to add the event anyway."
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** 2b3. System adds the event (or not)."
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": "** If user does not want to add the event, use case ends."
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": "** Else, use case resumes from step 3."
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d UC12: Message multiple users"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". User requests to send emails to a particular project group."
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". System goes to email page and puts all contacts in the email recipient list."
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". User sends email."
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". System returns to original screen."
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "User case ends."
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* 3a. User exits email screen without sending email."
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "+"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** 3a1. System returns to original screen."
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "+"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UC13: Import contacts"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": ". User request to import contacts."
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": ". System records and displays how many successfully added and duplicates."
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": "* 1a. User enters invalid file path (not a file or not an absolute path)."
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": "** 1a1. System displays invalid file path."
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. System detects empty file."
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": "** 2a1. System displays empty file."
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": "* 2b. System detects invalid csv format (cannot find compulsory header in csv)."
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": "** 2b1. System displays invalid csv file."
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "////"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os, mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": ".  The system should be able to work on 32-bit and 64-bit environments."
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": ".  The system should respond to the user’s input command within 5 seconds."
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": ".  The system is not required to handle conflicts between group members’ schedules which are not stored in any online platform (recorded only in a paper diary, etc.)"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".  The UI should display the information such that the user can see them clearly i.e. colour, font, layout, pictorial-wise."
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": ".  The basic usage of the application should be easy for a new user to pick up so as to ensure that the application continues to be used in the long term."
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": ".  Privacy of user groups should be ensured - developers should not be able to view the contacts or groups or events of the user."
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".  Each user should be able to have up to 50 \u003c\u003cgroup, groups\u003e\u003e that the user can be in at any one point in time."
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": ".  User activities should be logged in a separate file."
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "[[group]] Group::"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "A collection of contacts who come together for ad-hoc, short-term events such as projects."
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "[[tag]] Tag::"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "The item used to organize contacts based on personal or work relationships in the address book. For example, tags can exist for family, friends, work colleagues, etc."
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "[[faculty]] Faculty::"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "The faculty of study that the student belongs to."
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 349,
      "-": 1081
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿\u003d EventsPlus+ - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-W13-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "By: `Team W13-2`      Since: `Sept 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "EventsPlus+ is for the busy university student who *prefer to use a desktop app for managing contacts and planning ad-hoc events*. EventsPlus+ aims to simplify some of the more time-consuming administrative tasks such as coordinating location and date of ad-hoc events using a *Command Line Interface* (CLI)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`p/PHONE_NUMBER...` can be used as `p/98765432`, `p/98765432 p/88888888` etc. (i.e. 1 or many times)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* Items in curly brackets are considered to be an entity. The rules outside the curly brackets apply to the entity as a whole."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "e.g. `{group/GROUP_NAME i/1 INDEX}...` can be used as `group/CS2103_Group1 i/1 group/CS2013_Group2 i/3`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`, alias `h`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Enable/Disable notifications: `notification`, `n`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `notification disable`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Notifications are initially enabled"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Adding a person: `add`, `a`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Adding a person: `add`, alias `a`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a person to the address book +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Format: `add n/NAME p/PHONE_NUMBER... e/EMAIL a/ADDRESS [t/TAG]...`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "* A person can have any number of tags (including 0)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "* A person can have 1 or many phone numbers"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* `add n/John Doe p/98765432 p/88888888 e/johnd@example.com a/John street, block 123, #01-01` or `a n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal` or `a n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Listing all persons : `list`, alias `ls`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all persons in the address book. +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Format: `list` or `ls`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Editing a person : `edit`, alias `e`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Edits an existing person in the address book. +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` or `e 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* `edit 2 n/Betsy Crower t/` or `e 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Locating persons by name: `find`, alias `f`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Finds persons whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* `find John` or `f John` +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* `find Betsy Tim John` or `f Betsy Tim John` +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "Returns any person having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Deleting a person : `delete`, alias `d`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the specified person from the address book. +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`delete 2` or `d 2` +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 2nd person in the address book."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`delete 1` or `d 1` +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Selecting a person : `select`, alias `s`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the person identified by the index number used in the displayed person list. +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* Selects the person and loads the Google search page the person at the specified `INDEX`."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`select 2` or `s 2` +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 2nd person in the address book."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`select 1` or `s 1` +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`, alias `hs`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Format: `history` or `h`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`, alias `u`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Restores the address book to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`undo` or `u` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`undo` or `u` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`undo` or `u` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`, alias `r`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`undo` or `u` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`redo` or `r` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`redo` or `r` +"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`undo` or `u` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`undo` or `u` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`redo` or `r` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`redo` or `r` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Add contacts to an existing group : `addToGroup`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a specified list of contacts to a specified group, based on the user\u0027s last-viewed listing. +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "Any number of contacts can be added to the group (including 0)."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "If the INDEX field is empty, no contacts will be added to the group. +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "The group must be an existing group in EventsPlus+. +"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Format: `addToGroup group/GROUP_NAME [i/INDEX]...`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* `addToGroup group/CS2103Group`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "No contacts added to the group."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "`addToGroup group/CS2103Group i/1` +"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "The `addToGroup` command adds the first person returned from `list`."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "`addToGroup group/CS2103Group i/1 i/2 i/3` +"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "The `addToGroup` command adds the first(Betsy), second(Tim) and Third(John) person returned from `list`."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Create group : `createGroup`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "Creates a group."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "If the group already exists, an error message is displayed accordingly to indicate that this command cannot be parsed."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `createGroup group/GROUP_NAME`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "* `createGroup group/CS2103Group`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Suggested Location : `generateLocation`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Creates a suggested location to meet up based on each team member’s faculty."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Format: `generateLocation event/EVENT_NAME group/GROUP_NAME`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* `generateLocation event/First Meeting group/CS2103Group`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Adding an event: `addEvent`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Adds an event in the system with information specified by the user."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Format: `addEvent n/EVENT_NAME dsc/EVENT_DESCRIPTION d/DATE(YYYY-MM-DD) st/START_TIME(HHMM) et/END_TIME(HHMM) a/ADDRESS`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "The user can input values for the following fields when adding an event: +"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* Event name +"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* Event description +"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* Event date +"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* Event start time +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* Event end time +"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* Address of event +"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Note that each of these fields are mandatory, and has to be supplied by the user"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "before the event can be successfully added into the system."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "In addition, note the following constraints for the input values."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* Event names and descriptions should only contain alphanumeric characters"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "and should not have any special characters e.g. *, \u0026, etc."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* Event dates should be in the format YYYY-MM-DD"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* Event times (start or end time) should be in the 24-hour format HHMM"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//A notification will be sent to the user only 24 hours before the event."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//(refer to \u003c\u003cNotification, notification\u003e\u003e feature)"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* `addEvent n/Doctor Appointment dsc/Consultation d/2018-10-14 st/1030 et/1200 a/123, Clementi Rd, 1234665` +"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "This adds a new event with the provided information."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//* `list` +"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//  `addEvent n/Doctor Appointment dsc/Consultation d/15-09-18 t/1030 a/123, Clementi Rd, 1234665 i/1`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//* `Find Betsy Tim John` +"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//  `addEvent n/Meeting  dsc/Project meeting d/15-09-18 t/1030 a/123, Clementi Rd, 1234665 i/1 i/2 i/3`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "In EventsPlus+, the events can be found in the Events tab,"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "and are displayed according to their date, in decreasing date order."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "After the user executes the command, a message indicating successful execution of the command will be displayed."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "The user will be automatically directed to the Events tab,"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "where the newly added event (as highlighted in green below) will be shown in the tab."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::add-event_new-event.PNG[Adding an event]"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Import Contacts: `importContacts`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Import contacts from a specified csv file. Duplicate contacts will be merged together."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Format: `importContacts file/FILEPATH`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* `importContacts file/~/Downloads/contacts1.csv` +"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "  Imports all contacts from root/Downloads/contacts1.csv into application address book"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Notifications: `notification`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Allow users to disable notifications for upcoming events based on most recently displayed events list. All events initially have notifications enabled by default."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Format: `notification EVENT_INDEX enable/disable`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* `notification 2 disable`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`, alias `cls`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the address book. +"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Format: `clear` or `cls`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`, alias `q`"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Format: `exit` or `q`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Features coming up in V2.0"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d List personal events: `listEvent`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Lists all events in the system."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Format: `listEvent`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* `listEvent`"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Add group event: `addGroupEvent`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Adds an event in the system with the specified information, for the specified group(s)."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "At least one group has to be included in the user input."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "A notification will be sent to the user and contacts in the group 24 hours before the event."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "(refer to \u003c\u003cNotification, notification\u003e\u003e feature)"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Format: `addGroupEvent n/EVENT_NAME dsc/DESCRIPTION d/DATE(DD-MM-YY) t/TIME(HHMM) a/ADDRESS group/GROUP_NAME...`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* `addGroupEvent n/Project Meeting dsc/First Meeting d/12-09-18 t/1200 a/123, Clementi Rd, 1234665 group/CS2103_Group`"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* `addGroupEvent n/Project Meeting dsc/First Meeting d/12-09-18 t/1200 a/123, Clementi Rd, 1234665 group/CS2103_Group group/CS2103_otherGroup`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d List group events: `listGroupEvent`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Lists all group events in the system."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Format: `listGroupEvent`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* `listGroupEvent`"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Rename groups : `renameGroup`"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "Renames a specified group, if it exists."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "If the group does not exist, an error message is displayed accordingly to indicate that this command cannot be parsed."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `renameGroup group/ORIGINAL_NAME n/NEW_GROUP_NAME`"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "* `renameGroup group/CS2103Group n/HelloWorld`"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Merge groups : `mergeGroup`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "Merges a list of groups together. Any number of groups can be merged together. +"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "When groups are merged, a new group will be created containing all the contacts in the listed groups. +"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "At least one group must be listed. If only one group is listed, no changes will take place."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "* Events that were created in the individual groups prior to merging will not affected by this command. +"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "* Future events created from this merged group will be under the merged group."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Format: `mergeGroup n/NEW_GROUP_NAME group/GROUP_NAME...`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "* `mergeGroup n/CS2103_MERGED group/CS2103_Group1 group/CS2103_Group2 group/CS2103_Group3` +"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "A new group called `CS2103_MERGED` is created containing all contacts from `CS2103_Group1`, `CS2103_Group2` and `CS2103_Group3`."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Split groups : `splitGroup`"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "Splits a group through a series of commands."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "Firstly, `splitGroup` command will inform the system that the user wishes to split a group. +"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "The system will then display all contacts in this group and a message to inicate that it is awaiting user input. +"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "To create new group, input the new group names and the indexes of the contacts. Each of the newly created groups must contain at least one contact."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "The original group will not be deleted as a result of any of the above commands. However, the split groups will contain an indicator showing that it was created from splitting the original group."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Format: `splitGroup group/GROUP_NAME {n/NEW_GROUP_NAME i/INDEX...}...`"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "* `splitGroup group/CS2103_MERGE` +"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "`n/CS2103_Group1 i/1 i/2 i/3 i/4 i/5`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d View team members who belong to a group : `viewGroup`"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "Shows the information of each team members in a particular group"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `viewGroup/GROUP_NAME`"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "* `viewGroup/CS2103Group`"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d View other contacts in the same group as a specific contact : `commonGroupContacts`"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "Shows other contacts who may be in the same group with the contact that the user is currently viewing."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `commonGroupContacts n/CONTACT_NAME`"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "* `commonGroupContacts n/James Bond`"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Remove a contact from a group : `remove`"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "Removes a specific contact from a group"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remove n/CONTACT_NAME group/GROUP_NAME`"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "* `remove n/James Bond group/CS2103Group`"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Delete an entire group : `deleteGroup`"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "Delete inactive groups or groups who you are not going to work with in the future without affecting contact list."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `deleteGroup group/GROUP_NAME`"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "* `deleteGroup group/CS2103Group`"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Import user\u0027s timetable : `importCalendar`"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "Allows the user to import timetable from an external source to load into the app. +"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "This allows app to prevent any possible clash with events in groups."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `importCalendar SOURCE`"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "* `importCalendar Google` +"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "App will redirect to the source (For example, Google) to handle majority of the importing process - e.g. logging in, calendar to import, etc.)"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Share multiple contacts with my peers : `share`"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Send selected contacts in EventsPlus+ to one other contact in EventsPlus+."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "At least one contact to be sent must be indicated, and only one recipient can be specified."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Format: `share i/INDEX... t/INDEX`"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "`share i/2 i/3 i/4 t/1` +"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Sends the 2nd, 3rd and 4th person to 1st person in the (same) list."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Archive groups : `archive`"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "Archive groups to unclutter the list of visible group without losing the group\u0027s information"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `archive group/GROUP_NAME`"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "* `archive group/CS2103Group`"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Unarchive old groups : `unarchive`"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Unarchive group to retrieve previously-archived group information and make group visible again."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `unarchive group/GROUP_NAME`"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "* `unarchive group/CS2103Group`"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Add* : `add n/NAME p/PHONE_NUMBER... e/EMAIL a/ADDRESS [t/TAG]...` +"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `find James Jake`"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Add Contacts to Group* : `addToGroup group/GROUP_NAME [i/INDEX]...` +"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `addToGroup group/CS2103Group i/1 i/2 i/3`"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Rename Group* `renameGroup group/ORIGINAL_NAME n/NEW_GROUP_NAME` +"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `renameGroup group/CS2103Group n/HelloWorld`"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Merge Group* : `mergeGroup n/NEW_GROUP_NAME group/GROUP_NAME…​` +"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `mergeGroup n/CS2103_MERGED group/CS2103_Group1 group/CS2103_Group2 group/CS2103_Group3`"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Split Group* : `splitGroup group/GROUP_NAME {n/NEW_GROUP_NAME i/INDEX…​}…​` +"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `splitGroup group/CS2103_MERGE"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "n/CS2103_Group1 i/1 i/2 i/3 i/4 i/5`"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "* *View Group* : `viewGroup/GROUP_NAME` +"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `viewGroup/CS2103Group`"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "* *Common Group Contacts* : `commonGroupContacts n/CONTACT_NAME` +"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `commonGroupContacts n/James Bond`"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "* *Remove Contact from Group* : remove n/CONTACT_NAME group/GROUP_NAME +"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `remove n/James Bond group/CS2103Group`"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete Group* : `deleteGroup group/GROUP_NAME` +"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `deleteGroup group/CS2103Group`"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "* *Import Timetable* : `importCalendar SOURCE` +"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `importCalendar Google`"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Share Contact* : `share i/INDEX…​ t/INDEX` +"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `share i/2 i/3 i/4 t/1`"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "* *Archive Group* : `archive group/GROUP_NAME` +"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `archive group/CS2103Group`"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "* *Unarchive Group* : `unarchive group/GROUP_NAME` +"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `unarchive group/CS2103Group`"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "* *Suggest Location* : `generateLocation event/EVENT_NAME group/GROUP_NAME` +"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `generateLocation event/First Meeting group/CS2103Group`"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Add Event* : `addEvent n/EVENT_NAME dsc/EVENT_DESCRIPTION d/DATE(YYYY-MM-DD) st/START_TIME(HHMM) et/END_TIME(HHMM) a/ADDRESS` +"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "e.g. `addEvent n/Doctor Appointment dsc/Consultation d/2019-10-12 st/1030 et/1200 a/123, Clementi Rd, 1234665`"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "* *List Events* : `listEvent`"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Add Group Event* : `addGroupEvent n/EVENT_NAME dsc/DESCRIPTION d/DATE(DD-MM-YY) t/TIME(HHMM) a/ADDRESS group/GROUP_NAME...` +"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `addGroupEvent n/Project Meeting dsc/First Meeting d/12-09-18 t/1200 a/123, Clementi Rd, 1234665 group/CS2103_Group`"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "* *List Group Events* : `listGroupEvent`"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "* *Import Contacts* : `importContacts file/FILEPATH` +"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `importContacts file/~/Downloads/contacts1.csv`"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Disable and Enable Notification* : `notification EVENT_INDEX enable/disable` +"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `notification 2 disable`"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 186,
      "-": 419,
      "cjiefeng": 1
    }
  },
  {
    "path": "docs/team/cjiefeng.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d PROJECT: EventsPlus+"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 72
    }
  },
  {
    "path": "docs/team/kaitingpeck.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d Peck Kai Ting - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d PROJECT: EventsPlus+"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 72
    }
  },
  {
    "path": "docs/team/pratyayj.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d PROJECT: EventsPlus+"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 72
    }
  },
  {
    "path": "docs/team/ryantanwk.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d PROJECT: EventsPlus+"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 72
    }
  },
  {
    "path": "docs/team/yap666y.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d PROJECT: EventsPlus+"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/AddressBookChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/** Indicates the AddressBook in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ReadOnlyAddressBook data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookChangedEvent(ReadOnlyAddressBook data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return \"number of persons \" + data.getPersonList().size()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                + \"\\n number of events \" + data.getEventList().size();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 2,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/AddressBookEventChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/** Indicates the list of events in the AddressBook in the model has changed*/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class AddressBookEventChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public final ObservableList\u003cEvent\u003e data;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public AddressBookEventChangedEvent(ObservableList\u003cEvent\u003e data) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return \"number of events \" + data.size();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/EventPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Represents a selection change in the Event List Panel under Tab Panel"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final List\u003cEvent\u003e newSelection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public EventPanelSelectionChangedEvent(List\u003cEvent\u003e newSelection) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public List\u003cEvent\u003e getNewSelection() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of events */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    ObservableList\u003cEvent\u003e getFilteredEventList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of events by date */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    ObservableList\u003cList\u003cEvent\u003e\u003e getFilteredEventListByDate();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 9,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return model.getFilteredEventList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ObservableList\u003cList\u003cEvent\u003e\u003e getFilteredEventListByDate() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return model.getFilteredEventListByDate();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 12,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"a\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"(alias: \" + COMMAND_WORD_ALIAS + \")\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \": Adds a person to \" + \"the address book. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 3,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddEventCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Adds an event to the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addEvent\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an event to the address book. Input date and \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \"time values with respect to a single day only. For events occurring over two days, add them into the \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \"address book separately.\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_NAME + \"EVENT NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_EVENT_DESCRIPTION + \"EVENT DESCRIPTION \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_START_TIME + \"START TIME \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_END_TIME + \"END TIME \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            // + \"[\" + PREFIX_CONTACT_INDEX + \"CONTACT INDEX]...\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_NAME + \"Doctor appointment \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_EVENT_DESCRIPTION + \"consultation \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_DATE + \"15-09-18 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_START_TIME + \"1030 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_END_TIME + \"1230 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_ADDRESS + \"123, Clementi Rd, 1234665\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    // + PREFIX_CONTACT_INDEX + \"1\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New event added: %1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists in the address book\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_CLASHING_EVENT \u003d \"This event clashes with another event in the address book\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final Event toAdd;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Creates an AddEventCommand to add the specified Event {@code Event}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public AddEventCommand(Event event) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        toAdd \u003d event;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (model.hasEvent(toAdd)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (model.hasClashingEvent(toAdd)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new CommandException(MESSAGE_CLASHING_EVENT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        model.addEvent(toAdd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                || (other instanceof AddEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddEventCommand) other).toAdd)); // state check"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"cls\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        model.resetData(new AddressBook());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"d\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"(alias: \" + COMMAND_WORD_ALIAS + \")\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 2,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Faculty;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"e\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"(alias: \" + COMMAND_WORD_ALIAS + \")\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Faculty updatedFaculty \u003d editPersonDescriptor.getFaculty().orElse(personToEdit.getFaculty());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, updatedFaculty);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        private Faculty faculty;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            setFaculty(toCopy.faculty);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setFaculty(Faculty faculty) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            this.faculty \u003d faculty;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cFaculty\u003e getFaculty() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(faculty);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getFaculty().equals(e.getFaculty());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 3,
      "-": 240
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"q\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 1,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"f\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"(alias: \" + COMMAND_WORD_ALIAS + \")\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 3,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"h\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"(alias: \" + COMMAND_WORD_ALIAS + \")\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ShowHelpRequestEvent());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 3,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"hs\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e previousCommands \u003d history.getHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 1,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"ls\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EVENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"r\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canRedoAddressBook()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        model.redoAddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        model.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 3,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Selects a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"(alias: \" + COMMAND_WORD_ALIAS + \")\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Selects the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredPersonList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 2,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EVENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"u\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canUndoAddressBook()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        model.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 3,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddEventCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventAddress;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDescription;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Parses input arguments and creates a new AddEventCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class AddEventCommandParser implements Parser\u003cAddEventCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_INVALID_START_END_TIME \u003d \"Invalid start and end time! %1$s %2$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddEventCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * and returns an AddEventCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public AddEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_EVENT_DESCRIPTION, PREFIX_DATE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        PREFIX_START_TIME, PREFIX_END_TIME, PREFIX_ADDRESS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // check for mandatory fields, and that no other data is entered between the command and first argument prefix"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_EVENT_DESCRIPTION, PREFIX_DATE, PREFIX_START_TIME,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                PREFIX_END_TIME, PREFIX_ADDRESS)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventName eventName \u003d ParserUtil.parseEventName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventDescription eventDesc \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                ParserUtil.parseEventDescription(argMultimap.getValue(PREFIX_EVENT_DESCRIPTION).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventDate eventDate \u003d ParserUtil.parseEventDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventTime eventStartTime \u003d ParserUtil.parseEventTime(argMultimap.getValue(PREFIX_START_TIME).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventTime eventEndTime \u003d ParserUtil.parseEventTime(argMultimap.getValue(PREFIX_END_TIME).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventAddress eventAddress \u003d ParserUtil.parseEventAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (eventEndTime.compareTo(eventStartTime) \u003c 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_START_END_TIME, eventStartTime.toString(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    eventEndTime.toString()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event newEvent \u003d new Event(eventName, eventDesc, eventDate, eventStartTime, eventEndTime, eventAddress);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return new AddEventCommand(newEvent);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ImportContactsCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        case AddCommand.COMMAND_WORD_ALIAS: // test case for command alias"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        case EditCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        case SelectCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        case DeleteCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        case ClearCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        case FindCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        case ListCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        case AddEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return new AddEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        case HistoryCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        case ExitCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        case HelpCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        case UndoCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        case RedoCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        case ImportContactsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ImportContactsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 16,
      "-": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_FILE \u003d new Prefix(\"file/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final Prefix PREFIX_EVENT_DESCRIPTION \u003d new Prefix(\"dsc/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final Prefix PREFIX_START_TIME \u003d new Prefix(\"st/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final Prefix PREFIX_END_TIME \u003d new Prefix(\"et/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final Prefix PREFIX_CONTACT_INDEX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_FACULTY \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 5,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.UniqueEventList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final UniqueEventList events;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        events \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Replaces the contents of the event list with {@code events}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * {@code events} must not contain duplicate events."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.events.setEvents(events);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        setEvents(newData.getEventList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    //// event-level operations"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns true if an event with the same identity as {@code event} exists in the address book."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return events.contains(event);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns true if a clashing event with {@code event} exists in the address book."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean hasClashingEvent(Event event) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return events.containsClashingEvent(event);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Adds an event to the address book."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * The event must not already exist in the address book."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assert !hasEvent(event);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assert !hasClashingEvent(event);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                + \"\\n\" + events.asUnmodifiableObservableList().size() + \" events\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ObservableList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return events.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 events.equals(((AddressBook) other).events));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return persons.hashCode() + events.hashCode();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 52,
      "-": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    Predicate\u003cEvent\u003e PREDICATE_SHOW_ALL_EVENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    void updatePerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns true if an event with the same identity as {@code event} exists in the address book."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    boolean hasEvent(Event event);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns true if a clashing event with {@code event} exists in the address book."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    boolean hasClashingEvent(Event event);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Adds the given event into the address book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * {@code event} must not already exist in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    void addEvent(Event event);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /** Returns an unmodifiable view of the filtered event list */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    ObservableList\u003cEvent\u003e getFilteredEventList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Updates the filter of the filtered event list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    void updateFilteredEventList(Predicate\u003cEvent\u003e predicate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of lists of events (grouped by date) */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    ObservableList\u003cList\u003cEvent\u003e\u003e getFilteredEventListByDate();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 33,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.events.model.AddressBookEventChangedEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final FilteredList\u003cEvent\u003e filteredEvents;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        filteredEvents \u003d new FilteredList\u003c\u003e(versionedAddressBook.getEventList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        addListenerToBaseEventList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /** Raises an event to indicate the events list in the model has changed */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private void indicateAddressBookEventChanged() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        raise(new AddressBookEventChangedEvent(filteredEvents));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return versionedAddressBook.hasEvent(event);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean hasClashingEvent(Event event) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return versionedAddressBook.hasClashingEvent(event);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        versionedAddressBook.addEvent(event);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Event List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Event} backed by the internal list of"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredEvents);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        filteredEvents.setPredicate(predicate);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Adds a listener on the base event list {@code filteredEvents} to detect changes in the base list"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * and indicate the change to the address book."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void addListenerToBaseEventList() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        filteredEvents.addListener((ListChangeListener.Change\u003c? extends Event\u003e change) -\u003e {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            if (change.next()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                indicateAddressBookEventChanged();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        });"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns an unmodifiable view of the list of lists of {@code Event} (grouped by date)  backed by the internal"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * list of"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ObservableList\u003cList\u003cEvent\u003e\u003e getFilteredEventListByDate() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Map\u003cEventDate, List\u003cEvent\u003e\u003e filteredEventsByDateMap \u003d filteredEvents.stream()"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .collect(Collectors.groupingBy(Event::getEventDate));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // convert the map to a FilteredList"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ObservableList\u003cList\u003cEvent\u003e\u003e filteredEventsByDateList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        filteredEventsByDateList.addAll(filteredEventsByDateMap.values());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Comparator\u003cList\u003cEvent\u003e\u003e eventListComparator \u003d"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                Comparator.comparing(eventList -\u003e eventList.get(0).getEventDate());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        filteredEventsByDateList.sort(eventListComparator.reversed());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        FilteredList\u003cList\u003cEvent\u003e\u003e filteredEventsByDate \u003d new FilteredList\u003c\u003e(filteredEventsByDateList);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredEventsByDate);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 filteredEvents.equals(other.filteredEvents);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 89,
      "-": 149
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns an unmodifiable view of the events list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * This list will not contain any duplicate events."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    ObservableList\u003cEvent\u003e getEventList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 7,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Event.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Represents an Event in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    // identity fields"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final EventName eventName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final EventDescription eventDescription;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final EventDate eventDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final EventDay eventDay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final EventTime eventStartTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final EventTime eventEndTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    // data fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final EventAddress eventAddress;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Every field must be present and not null. End time must be later than start time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public Event(EventName eventName, EventDescription eventDescription, EventDate eventDate, EventTime eventStartTime,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                 EventTime eventEndTime, EventAddress eventAddress) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireAllNonNull(eventName, eventDescription, eventDate, eventStartTime, eventAddress);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventDescription \u003d eventDescription;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventDate \u003d eventDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventDay \u003d new EventDay(eventDate.getEventDay());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventStartTime \u003d eventStartTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventEndTime \u003d eventEndTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventAddress \u003d eventAddress;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public EventName getEventName() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public EventDescription getEventDescription() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventDescription;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public EventDate getEventDate() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventDate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public EventTime getEventStartTime() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventStartTime;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public EventTime getEventEndTime() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventEndTime;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public EventAddress getEventAddress() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventAddress;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public EventDay getEventDay() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventDay;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns true if the two events clash"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean isClashingEvent(Event event) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventDate.equals(event.eventDate)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 eventEndTime.compareTo(event.eventStartTime) \u003e 0"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 eventStartTime.compareTo(event.eventEndTime) \u003c 0;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    //todo: check isSameEvent constraints"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns true if both events are equal"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean isSameEvent(Event event) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return equals(event);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns true if both events have the same identity and data fields."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!(other instanceof Event)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event otherPerson \u003d (Event) other;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return otherPerson.getEventName().equals(getEventName())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 otherPerson.getEventDescription().equals(getEventDescription())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 otherPerson.getEventDate().equals(getEventDate())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 otherPerson.getEventStartTime().equals(getEventStartTime())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 otherPerson.getEventEndTime().equals(getEventEndTime())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 otherPerson.getEventAddress().equals(getEventAddress());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return Objects.hash(eventName, eventDescription, eventDate, eventStartTime, eventEndTime, eventAddress);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        builder.append(getEventName())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .append(\" Event description: \")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .append(getEventDescription())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .append(\" Event date: \")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .append(getEventDate())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .append(\" Event day: \")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .append(getEventDay())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .append(\" Event start time: \")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .append(getEventStartTime())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .append(\" Event end time: \")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .append(getEventEndTime())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .append(\" Event Address: \")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .append(getEventAddress());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 133
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventAddress.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Represents a Event\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventAddress {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * The first character of the event address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * so that \" \" (a blank string) is considered an invalid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public final String eventAddress;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Constructs an {@code EventAddress}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @param eventAddress A valid address."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public EventAddress(String eventAddress) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(eventAddress);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        checkArgument(isValidAddress(eventAddress), MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventAddress \u003d eventAddress;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns true if a given string is a valid event address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return test.matches(ADDRESS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventAddress;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                || (other instanceof EventAddress // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 eventAddress.equals(((EventAddress) other).eventAddress)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventAddress.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventDate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Represents an Event\u0027s date in the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventDate implements Comparable\u003cEventDate\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_DATE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \"Dates should be in the format YYYY-MM-DD, and it should not be blank\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * A blank string \" \" is considered invalid."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Format must be in YYYY-MM-DD, using only - as the separator."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String DATE_VALIDATION_REGEX \u003d \"^[0-9]{4}-\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \"(((0[13578]|(10|12))-(0[1-9]|[1-2][0-9]|3[0-1]))|\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \"(02-(0[1-9]|[1-2][0-9]))|\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \"((0[469]|11)-(0[1-9]|[1-2][0-9]|30)))$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public final LocalDate eventDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Constructs a {@code EventDate}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @param eventDate A valid date."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public EventDate(String eventDate) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(eventDate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        checkArgument(isValidDate(eventDate), MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventDate \u003d LocalDate.parse(eventDate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public DayOfWeek getEventDay() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventDate.getDayOfWeek();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static boolean isValidDate(String test) throws DateTimeParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!test.matches(DATE_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // includes checks for leap years"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            LocalDate.parse(test);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        } catch (DateTimeParseException dte) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventDate.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                || (other instanceof EventDate // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 eventDate.equals(((EventDate) other).eventDate)); // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public int compareTo(EventDate other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventDate.compareTo(other.eventDate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventDate.hashCode();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventDay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Represents an Event\u0027s day in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Guarantees: immutable; and is based on the Enum class {@link DayOfWeek}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventDay {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final DayOfWeek day;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public EventDay(DayOfWeek day) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(day);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return day.toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                || (other instanceof EventDay // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 day.equals(((EventDay) other).day)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return day.hashCode();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventDescription.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Represents an Event\u0027s description in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventDescription {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \"Event descriptions should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * The first character of the event name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * so that \" \" (a blank string) is considered an invalid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String DESCRIPTION_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum}\\\\s]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public final String eventDescription;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Constructs a {@code EventDescription}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @param eventDescription A valid description."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public EventDescription(String eventDescription) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(eventDescription);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        checkArgument(isValidDescription(eventDescription), MESSAGE_DESCRIPTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventDescription \u003d eventDescription;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns true if a given string is a valid event name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return test.matches(DESCRIPTION_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventDescription;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                || (other instanceof EventDescription // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 eventDescription.equals(((EventDescription) other).eventDescription)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventDescription.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Represents an Event\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \"Event names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * The first character of the event name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * so that \" \" (a blank string) is considered an invalid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum}\\\\s]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public final String eventName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Constructs a {@code EventName}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @param eventName A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public EventName(String eventName) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(eventName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        checkArgument(isValidName(eventName), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns true if a given string is a valid event name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                || (other instanceof EventName // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 eventName.equals(((EventName) other).eventName)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventName.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventTime.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Represents an Event\u0027s time in the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTime(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventTime implements Comparable\u003cEventTime\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_TIME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \"Times should be in the 24-hour format HHMM, should be in the range 0000 to 2359, \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    + \"and it should not be blank\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * A blank string \" \" is considered invalid."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Format must be in HHMM, without any separators."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String TIME_VALIDATION_REGEX \u003d \"^(20|21|22|23|[01]\\\\d)\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \"(([0-5]\\\\d){1})$\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public final LocalTime eventTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Constructs a {@code EventTime}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @param eventTime A valid time."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public EventTime(String eventTime) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(eventTime);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        checkArgument(isValidTime(eventTime), MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventTime \u003d LocalTime.parse(getHour(eventTime) + \":\" + getMinute(eventTime));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static String getHour(String time) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return time.substring(0, 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static String getMinute(String time) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return time.substring(2, 4);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns true if a given string is a valid time."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!test.matches(TIME_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            LocalTime.parse(getHour(test) + \":\" + getMinute(test));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        } catch (DateTimeParseException dte) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Compares this event time and {@code eventTime} in the same way as is done in {@link LocalTime}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @param eventTime"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @return a negative integer if this is earlier than eventTime, 0 if this is the same as eventTime and a"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * positive integer if this is later than eventTime."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public int compareTo(EventTime eventTime) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return this.eventTime.compareTo(eventTime.eventTime);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @return String representation of time in HH:MM"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventTime.toString().replace(\":\", \"\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                || (other instanceof EventTime // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 eventTime.equals(((EventTime) other).eventTime)); // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventTime.hashCode();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/UniqueEventList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.exceptions.DuplicateEventException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.exceptions.EventClashException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * A list of events that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * An event is considered unique by comparing using {@code Event#isSameEvent(Event)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * events uses Event#isSameEvent(Event) for equality so as to ensure that the event being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * unique in terms of identity in the UniqueEventList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * @see Event#isSameEvent(Event)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class UniqueEventList implements Iterable\u003cEvent\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final ObservableList\u003cEvent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns true if the list contains an equivalent event as the given argument."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean contains(Event toCheck) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameEvent);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns true if the list contains a clashing event as defined in {@code Event#isClashingEvent(Event)}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean containsClashingEvent(Event toCheck) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isClashingEvent);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Adds an {@code Event} to the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * The event must not already exist in the list and there must not be any clashes with existing events in the"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * addressbook."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void add(Event toAdd) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new DuplicateEventException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (containsClashingEvent(toAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new EventClashException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void setEvents(UniqueEventList replacement) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Replaces the contents of this list with {@code events}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * {@code events} must not contain duplicate events."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireAllNonNull(events);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!eventsAreUnique(events)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new DuplicateEventException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!eventsDoNotClash(events)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new EventClashException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        internalList.setAll(events);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ObservableList\u003cEvent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public Iterator\u003cEvent\u003e iterator() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                || (other instanceof UniqueEventList // instanceof handles nulls"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueEventList) other).internalList));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns true if {@code events} contains only unique events."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private boolean eventsAreUnique(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        for (int i \u003d 0; i \u003c events.size() - 1; i++) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            for (int j \u003d i + 1; j \u003c events.size(); j++) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                if (events.get(i).isSameEvent(events.get(j))) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns true if {@code events} does not contain any events with clashes."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private boolean eventsDoNotClash(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        for (int i \u003d 0; i \u003c events.size() - 1; i++) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            for (int j \u003d i + 1; j \u003c events.size(); j++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                if (events.get(i).isClashingEvent(events.get(j))) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 132
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/exceptions/DuplicateEventException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Signals that the operation will result in duplicate {@code Event} (Events are considered duplicates if they have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * the same"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * identity as defined in {@code Event#isSameEvent(Event)})."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class DuplicateEventException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public DuplicateEventException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        super(\"Operation would result in duplicate events\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/exceptions/EventClashException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Signals that the operation will result in two clashing {@code Event}s (Events are considered clashing events if"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * they clash, as defined in {@code Event#isClashingEvent(Event)})."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventClashException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public EventClashException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        super(\"Operation would result in clash events\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventAddress;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDescription;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Faculty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\"), new Faculty(\"SCI\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\"), new Faculty(\"FASS\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\"), new Faculty(\"COM\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\"), new Faculty((\"COM\"))),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\"), new Faculty(\"ENG\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"), new Faculty(\"SDE\"))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static Event[] getSampleEvents() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return new Event[] {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            new Event(new EventName(\"Meeting\"), new EventDescription(\"test events description\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new EventDate(\"2018-04-01\"), new EventTime(\"1400\"), new EventTime(\"1500\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    new EventAddress(\"3 Kent Ridge Drive\"))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        for (Event sampleEvent : getSampleEvents()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            sampleAb.addEvent(sampleEvent);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 17,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.AddEventCommandParser.MESSAGE_INVALID_START_END_TIME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventAddress;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDescription;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * JAXB-friendly version of the Event."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class XmlAdaptedEvent {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Event\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private String eventName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private String eventDescription;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private String eventDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private String eventStartTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private String eventEndTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private String eventAddress;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Constructs an XmlAdaptedEvent."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public XmlAdaptedEvent() {}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Constructs an {@code XmlAdaptedEvent} with the given event details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public XmlAdaptedEvent(String eventName, String eventDescription, String eventDate, String eventStartTime,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                           String eventEndTime, String eventAddress) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventDescription \u003d eventDescription;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventDate \u003d eventDate;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventStartTime \u003d eventStartTime;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventEndTime \u003d eventEndTime;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventAddress \u003d eventAddress;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Converts a given Event into this class for JAXB use."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedEvent"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public XmlAdaptedEvent(Event source) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventName \u003d source.getEventName().eventName;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventDescription \u003d source.getEventDescription().eventDescription;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventDate \u003d source.getEventDate().toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventStartTime \u003d source.getEventStartTime().toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventEndTime \u003d source.getEventEndTime().toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventAddress \u003d source.getEventAddress().eventAddress;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Converts this jaxb-friendly adapted event object into the model\u0027s Event object."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted event"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public Event toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (eventName \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    EventName.class.getSimpleName()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!EventName.isValidName(eventName)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new IllegalValueException(EventName.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        final EventName modelName \u003d new EventName(eventName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (eventDescription \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    EventDescription.class.getSimpleName()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!EventDescription.isValidDescription(eventDescription)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new IllegalValueException(EventDescription.MESSAGE_DESCRIPTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        final EventDescription modelDescription \u003d new EventDescription(eventDescription);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (eventDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    EventDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!EventDate.isValidDate(eventDate)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new IllegalValueException(EventDate.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        final EventDate modelDate \u003d new EventDate(eventDate);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (eventStartTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    \"Start\" + EventTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!EventTime.isValidTime(eventStartTime)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new IllegalValueException(EventTime.MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        final EventTime modelStartTime \u003d new EventTime(eventStartTime);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (eventEndTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    \"End\" + EventTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!EventTime.isValidTime(eventEndTime)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new IllegalValueException(EventTime.MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        final EventTime modelEndTime \u003d new EventTime(eventEndTime);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // check for logical start and end time"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (modelEndTime.compareTo(modelStartTime) \u003c 0) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new IllegalValueException(String.format(MESSAGE_INVALID_START_END_TIME, modelStartTime,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    modelEndTime));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (eventAddress \u003d\u003d null) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    EventAddress.class.getSimpleName()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!EventAddress.isValidAddress(eventAddress)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new IllegalValueException(EventAddress.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        final EventAddress modelAddress \u003d new EventAddress(eventAddress);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return new Event(modelName, modelDescription, modelDate, modelStartTime, modelEndTime, modelAddress);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!(other instanceof XmlAdaptedEvent)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlAdaptedEvent otherEvent \u003d (XmlAdaptedEvent) other;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return Objects.equals(eventName, otherEvent.eventName)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 Objects.equals(eventDescription, otherEvent.eventDescription)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 Objects.equals(eventDate, otherEvent.eventDate)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 Objects.equals(eventStartTime, otherEvent.eventStartTime)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 Objects.equals(eventEndTime, otherEvent.eventEndTime)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 Objects.equals(eventAddress, otherEvent.eventAddress);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 157
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to XML format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@XmlRootElement(name \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"Events list contains duplicate event(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedPerson\u003e persons;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private List\u003cXmlAdaptedEvent\u003e events;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty XmlSerializableAddressBook."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        events.addAll(src.getEventList().stream().map(XmlAdaptedEvent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this addressbook into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * {@code XmlAdaptedPerson} or in the {@code XmlAdaptedEvent}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedPerson p : persons) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d p.toModelType();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        for (XmlAdaptedEvent e : events) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            Event event \u003d e.toModelType();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            if (addressBook.hasEvent(event)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            addressBook.addEvent(event);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlSerializableAddressBook)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return persons.equals(((XmlSerializableAddressBook) other).persons)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 events.equals(((XmlSerializableAddressBook) other).events);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 18,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EventCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * A UI component that displays information of a single {@code Event}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final String FXML \u003d \"EventCard.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public final Event event;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Label startTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Label endTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public EventCard(Event event, int displayedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assert event !\u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        id.setText(\"[\" + displayedIndex + \"] \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // use time representation with colon from LocalTime"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        startTime.setText(event.getEventStartTime().eventTime.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        endTime.setText(event.getEventEndTime().eventTime.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        name.setText(event.getEventName().eventName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        address.setText(event.getEventAddress().eventAddress);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        description.setText(event.getEventDescription().eventDescription);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!(other instanceof EventCard)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventCard card \u003d (EventCard) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 event.equals(card.event);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EventListCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * A UI component that displays information of a list of {@code Event} for a particular {@code EventDate}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventListCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final String FXML \u003d \"EventListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public final List\u003cEvent\u003e eventList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Label day;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private VBox events;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public EventListCard(List\u003cEvent\u003e eventList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assert !eventList.isEmpty();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventList \u003d eventList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event firstEvent \u003d eventList.get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        day.setText(firstEvent.getEventDay().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        date.setText(firstEvent.getEventDate().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        for (int eventIdx \u003d 0; eventIdx \u003c eventList.size(); eventIdx++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            if (eventList.get(eventIdx) !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                events.getChildren().add(new EventCard(eventList.get(eventIdx), eventIdx + 1).getRoot());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!(other instanceof EventListCard)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventListCard card \u003d (EventListCard) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventList.equals(card.eventList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EventListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.events.ui.EventPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Panel containing the list of events."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final String FXML \u003d \"EventListPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private ListView\u003cList\u003cEvent\u003e\u003e eventListView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public EventListPanel(ObservableList\u003cList\u003cEvent\u003e\u003e eventList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        setConnections(eventList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private void setConnections(ObservableList\u003cList\u003cEvent\u003e\u003e eventList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventListView.setItems(eventList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventListView.setCellFactory(listView -\u003e new EventListViewCell());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        logger.fine(\"Selection in event list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        raise(new EventPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                });"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            eventListView.scrollTo(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            eventListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        });"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code List\u003cEvent\u003e} using a {@code EventListCard}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    class EventListViewCell extends ListCell\u003cList\u003cEvent\u003e\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        protected void updateItem(List\u003cEvent\u003e eventListByDate, boolean empty) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            super.updateItem(eventListByDate, empty);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            if (empty || eventListByDate.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                setGraphic(new EventListCard(eventListByDate).getRoot());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.events.model.AddressBookEventChangedEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private TabPanel tabPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private StackPane tabsPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        tabPanel \u003d new TabPanel(logic.getFilteredEventListByDate());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        tabsPlaceholder.getChildren().add(tabPanel.getRoot());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel.freeResources();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private void handleAddressBookEventChangedEvent(AddressBookEventChangedEvent event) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        /* This is a workaround to reset the displayed events list."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        TODO: Add a listener to ModelManager to listen for changes in the base list, update the list of lists grouped"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "         by date, and remove this method."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        tabPanel \u003d new TabPanel(logic.getFilteredEventListByDate());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        tabsPlaceholder.getChildren().add(tabPanel.getRoot());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 17,
      "-": 200
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TabPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.scene.control.SingleSelectionModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.events.model.AddressBookEventChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Panel containing two tabs: {@code BrowserPanel} and {@code EventListPanel}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Each panel is initialized as {@code BrowserPanel} and {@code EventListPanel} objects."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class TabPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final String FXML \u003d \"TabPanel.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private EventListPanel eventListPanel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private TabPane tabPane;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private SingleSelectionModel\u003cTab\u003e selectionModel \u003d tabPane.getSelectionModel();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Tab webpageTab;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Tab eventsTab;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public TabPanel(ObservableList\u003cList\u003cseedu.address.model.event.Event\u003e\u003e eventList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        browserPanel \u003d new BrowserPanel();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        webpageTab.setContent(browserPanel.getRoot());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventListPanel \u003d new EventListPanel(eventList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventsTab.setContent(eventListPanel.getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // set default tab"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        selectionModel.select(eventsTab);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public TabPane getTabPane() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return tabPane;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public Tab getWebpageTab() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return webpageTab;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public Tab getEventsTab() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventsTab;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private void handleAddressBookEventChangedEvent(AddressBookEventChangedEvent event) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // switch active tab"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        selectionModel.select(eventsTab);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // switch active tab"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        selectionModel.select(webpageTab);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 86
    }
  },
  {
    "path": "src/main/resources/view/BrowserPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003cStackPane xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cWebView fx:id\u003d\"browser\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/EventCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" stylesheets\u003d\"@EventListView.css\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"50\" GridPane.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u003cInsets bottom\u003d\"5.0\" left\u003d\"15.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_small_label_event\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u003cLabel fx:id\u003d\"startTime\" styleClass\u003d\"cell_time_label_event\" text\u003d\"\\$startTime\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"–\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003cLabel fx:id\u003d\"endTime\" styleClass\u003d\"cell_time_label_event\" text\u003d\"\\$endTime\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_name_label_event\" text\u003d\"\\$name\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003cLabel styleClass\u003d\"cell_small_label_event\" text\u003d\"\\@\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_address_label_event\" text\u003d\"\\\\$address\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label_event\" text\u003d\"\\$description\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "               \u003cInsets left\u003d\"25.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003c/VBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 39
    }
  },
  {
    "path": "src/main/resources/view/EventListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" stylesheets\u003d\"@EventListView.css\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u003cLabel fx:id\u003d\"day\" minWidth\u003d\"-Infinity\" styleClass\u003d\"cell_big_label_day\" text\u003d\"\\$day\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_big_label_date\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "         \u003cVBox fx:id\u003d\"events\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 31
    }
  },
  {
    "path": "src/main/resources/view/EventListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003cVBox stylesheets\u003d\"@EventListView.css\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "      \u003cListView fx:id\u003d\"eventListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 8
    }
  },
  {
    "path": "src/main/resources/view/EventListView.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-background-color: #D6EAF8;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-background-color: #AED6F1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-background-color: #7FB3D5;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-border-color: #7FB3D5;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-text-fill: #5D6D7E;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".list-cell .cell_big_label_day {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".list-cell .cell_big_label_date {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-text-fill: #2C3E50;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".list-cell .cell_time_label_event {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-font-size: 15px;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".list-cell .cell_name_label_event {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-font-size: 15px;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-text-fill: #163571;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".list-cell .cell_address_label_event {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-font-size: 15px;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".list-cell .cell_small_label_event {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 68
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "          \u003cStackPane fx:id\u003d\"tabsPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 1,
      "-": 67
    }
  },
  {
    "path": "src/main/resources/view/TabDisplay.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".tab-pane .tab-header-area .tab-header-background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-background-color: #FFFFFF00;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-padding: 0 0 8 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-padding: 0 0 0 2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-min-width: 200px;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-background-insets: 0 5 0 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".tab-pane .tab:selected {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-background-color: #778899;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".tab-pane .tab:hover {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-background-color: #778899;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".tab {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-padding: 2 30 2 30;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".tab-label {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-text-fill: #FFF;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".tab:selected .tab-label {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-text-fill: #FFF;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".tab:hover .tab-label {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-text-fill: #FFF;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 45
    }
  },
  {
    "path": "src/main/resources/view/TabPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003cTabPane fx:id\u003d\"tabPane\" stylesheets\u003d\"@TabDisplay.css\" tabClosingPolicy\u003d\"UNAVAILABLE\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "  \u003ctabs\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003cTab fx:id\u003d\"webpageTab\" text\u003d\"WEBPAGE\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003cAnchorPane /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003cTab fx:id\u003d\"eventsTab\" text\u003d\"EVENTS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003cAnchorPane /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "  \u003c/tabs\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c/TabPane\u003e"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 20
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidAndValidEventAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003c!-- Valid Event --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003cevents\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003ceventName\u003eClass\u003c/eventName\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDescription\u003electure\u003c/eventDescription\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDate\u003e2018-01-01\u003c/eventDate\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventStartTime\u003e1200\u003c/eventStartTime\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventEndTime\u003e1200\u003c/eventEndTime\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventAddress\u003eabc road\u003c/eventAddress\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003c!-- Event with invalid start and end time field --\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003cevents\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003ceventName\u003eClass\u003c/eventName\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDescription\u003electure\u003c/eventDescription\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDate\u003e2018-01-01\u003c/eventDate\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventStartTime\u003e1200\u003c/eventStartTime\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventEndTime\u003e1110\u003c/eventEndTime\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventAddress\u003eabc road\u003c/eventAddress\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 21
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidAndValidPersonAndEventAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c!-- Valid Person --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c!-- Person with invalid phone field --\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e948asdf2424\u003c/phone\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003c!-- Valid Event --\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003cevents\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003ceventName\u003eClass\u003c/eventName\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDescription\u003electure\u003c/eventDescription\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDate\u003e2018-01-01\u003c/eventDate\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventStartTime\u003e1200\u003c/eventStartTime\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventEndTime\u003e1200\u003c/eventEndTime\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventAddress\u003eabc road\u003c/eventAddress\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003c!-- Event with invalid start and end time field --\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003cevents\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003ceventName\u003eClass\u003c/eventName\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDescription\u003electure\u003c/eventDescription\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDate\u003e2018-01-01\u003c/eventDate\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventStartTime\u003e1200\u003c/eventStartTime\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventEndTime\u003e1310\u003c/eventEndTime\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventAddress\u003eabc road\u003c/eventAddress\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 35
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidEventAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c!-- Event with invalid name field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003ceventName\u003eCl@ss\u003c/eventName\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDescription\u003electure\u003c/eventDescription\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDate\u003e2018-01-01\u003c/eventDate\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventStartTime\u003e1200\u003c/eventStartTime\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventEndTime\u003e1200\u003c/eventEndTime\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventAddress\u003eabc road\u003c/eventAddress\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 12
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/duplicateEventAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003ceventName\u003eClass\u003c/eventName\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDescription\u003electure\u003c/eventDescription\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDate\u003e2018-01-01\u003c/eventDate\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventStartTime\u003e1200\u003c/eventStartTime\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventEndTime\u003e1200\u003c/eventEndTime\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventAddress\u003eabc road\u003c/eventAddress\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c!-- Event with same identity as Class --\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003ceventName\u003eClass\u003c/eventName\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDescription\u003electure\u003c/eventDescription\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDate\u003e2018-01-01\u003c/eventDate\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventStartTime\u003e1200\u003c/eventStartTime\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventEndTime\u003e1200\u003c/eventEndTime\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventAddress\u003eabc road\u003c/eventAddress\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 23
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/invalidEventAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c!-- Event with invalid start and end time field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003cevents\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003ceventName\u003eClass\u003c/eventName\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDescription\u003electure\u003c/eventDescription\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDate\u003e2018-01-01\u003c/eventDate\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventStartTime\u003e1200\u003c/eventStartTime\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventEndTime\u003e1110\u003c/eventEndTime\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventAddress\u003eabc road\u003c/eventAddress\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 12
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/typicalPersonsAndEventsAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c!-- AddressBook save file which contains the same Person and Event values as in TypicalPersons#getTypicalAddressBook() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cfaculty\u003eSOC\u003c/faculty\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eBenson Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e98765432\u003c/phone\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ejohnd@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e311, Clementi Ave 2, #02-25\u003c/address\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003eowesMoney\u003c/tagged\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cfaculty\u003eSOC\u003c/faculty\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCarl Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cfaculty\u003eSOC\u003c/faculty\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eDaniel Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cfaculty\u003eSOC\u003c/faculty\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eElle Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cfaculty\u003eSOC\u003c/faculty\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eFiona Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cfaculty\u003eSOC\u003c/faculty\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eGeorge Best\u003c/name\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cfaculty\u003eSOC\u003c/faculty\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003cevents\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventName\u003eDoctor appointment\u003c/eventName\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDescription\u003eConsultation\u003c/eventDescription\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDate\u003e2018-09-01\u003c/eventDate\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventStartTime\u003e1400\u003c/eventStartTime\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003ceventEndTime\u003e1500\u003c/eventEndTime\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventAddress\u003eBlk 312, Amy Street 1\u003c/eventAddress\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003c/events\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003cevents\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventName\u003eMeeting\u003c/eventName\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDescription\u003eGroup meeting desc\u003c/eventDescription\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDate\u003e2018-09-09\u003c/eventDate\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventStartTime\u003e0900\u003c/eventStartTime\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003ceventEndTime\u003e1200\u003c/eventEndTime\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventAddress\u003eBlock 123, Bobby Street 3\u003c/eventAddress\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003c/events\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 17,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.testutil.ScheduledEventBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_validCommandAlias_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD_ALIAS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void getFilteredEventList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        logic.getFilteredEventList().add(new ScheduledEventBuilder().build());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 14,
      "-": 124
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public boolean hasClashingEvent(Event event) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public ObservableList\u003cList\u003cEvent\u003e\u003e getFilteredEventListByDate() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 36,
      "-": 204
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddEventCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.testutil.ScheduledEventBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class AddEventCommandIntegrationTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_newEvent_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event validEvent \u003d new ScheduledEventBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.addEvent(validEvent);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(new AddEventCommand(validEvent), model, commandHistory,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                String.format(AddEventCommand.MESSAGE_SUCCESS, validEvent), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_duplicateEvent_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event eventInList \u003d model.getAddressBook().getEventList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandFailure(new AddEventCommand(eventInList), model, commandHistory,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                AddEventCommand.MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddEventCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.testutil.ScheduledEventBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class AddEventCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void constructor_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        new AddEventCommand(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_eventAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ModelStubAcceptingEventAdded modelStub \u003d new ModelStubAcceptingEventAdded();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event validEvent \u003d new ScheduledEventBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        CommandResult commandResult \u003d new AddEventCommand(validEvent).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(String.format(AddEventCommand.MESSAGE_SUCCESS, validEvent), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(Arrays.asList(validEvent), modelStub.eventsAdded);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_duplicateEvent_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event validEvent \u003d new ScheduledEventBuilder().build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        AddEventCommand addEventCommand \u003d new AddEventCommand(validEvent);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithEvent(validEvent);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expectMessage(AddEventCommand.MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        addEventCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_clashingEvent_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event validEvent \u003d new ScheduledEventBuilder()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(\"1200\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventEndTime(\"1400\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithEvent(validEvent);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event clashingEvent \u003d new ScheduledEventBuilder()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(\"1210\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventEndTime(\"1410\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        AddEventCommand addEventCommand \u003d new AddEventCommand(clashingEvent);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expectMessage(AddEventCommand.MESSAGE_CLASHING_EVENT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        addEventCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event firstEvent \u003d new ScheduledEventBuilder().withEventName(\"event\").build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event secondEvent \u003d new ScheduledEventBuilder().withEventName(\"a different event\").build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        AddEventCommand addFirstEventCommand \u003d new AddEventCommand(firstEvent);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        AddEventCommand addSecondEventCommand \u003d new AddEventCommand(secondEvent);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(addFirstEventCommand.equals(addFirstEventCommand));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        AddEventCommand addFirstEventCommandCopy \u003d new AddEventCommand(firstEvent);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(addFirstEventCommand.equals(addFirstEventCommandCopy));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(addFirstEventCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(addFirstEventCommand.equals(null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different event -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(addFirstEventCommand.equals(addSecondEventCommand));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public boolean hasClashingEvent(Event event) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public ObservableList\u003cList\u003cEvent\u003e\u003e getFilteredEventListByDate() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private class ModelStubWithEvent extends ModelStub {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        private final Event event;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ModelStubWithEvent(Event event) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            this.event \u003d event;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return this.event.isSameEvent(event);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public boolean hasClashingEvent(Event event) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return this.event.isClashingEvent(event);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private class ModelStubAcceptingEventAdded extends ModelStub {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        final ArrayList\u003cEvent\u003e eventsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return eventsAdded.stream().anyMatch(event::isSameEvent);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public boolean hasClashingEvent(Event event) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return eventsAdded.stream().anyMatch(event::isClashingEvent);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            eventsAdded.add(event);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            // called by {@code AddEventCommand#execute()}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 271
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DESCRIPTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FACULTY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_FACULTY \u003d \"SOC\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FACULTY_DESC \u003d \" \" + PREFIX_FACULTY + VALID_FACULTY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    // Events"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String CLASHING_EVENT_START_TIME_DOCTORAPPT \u003d \"1410\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String CLASHING_EVENT_END_TIME_DOCTORAPPT \u003d \"1440\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String VALID_EVENT_NAME_DOCTORAPPT \u003d \"Doctor appointment\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String VALID_EVENT_NAME_MEETING \u003d \"Meeting\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String VALID_EVENT_DESC_DOCTORAPPT \u003d \"Consultation\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String VALID_EVENT_DESC_MEETING \u003d \"Group meeting desc\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String VALID_EVENT_DATE_DOCTORAPPT \u003d \"2018-09-01\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String VALID_EVENT_DATE_MEETING \u003d \"2018-09-09\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String VALID_EVENT_START_TIME_DOCTORAPPT \u003d \"1400\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String VALID_EVENT_START_TIME_MEETING \u003d \"0900\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String VALID_EVENT_END_TIME_DOCTORAPPT \u003d \"1500\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String VALID_EVENT_END_TIME_MEETING \u003d \"1200\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String VALID_EVENT_ADDRESS_DOCTORAPPT \u003d \"Blk 312, Amy Street 1\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String VALID_EVENT_ADDRESS_MEETING \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String INVALID_EVENT_END_TIME_TOO_EARLY_DOCTORAPPT \u003d \"0800\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String EVENT_NAME_DESC_DOCTORAPPT \u003d \" \" + PREFIX_NAME + VALID_EVENT_NAME_DOCTORAPPT;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String EVENT_NAME_DESC_MEETING \u003d \" \" + PREFIX_NAME + VALID_EVENT_NAME_MEETING;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String EVENT_DESC_DESC_DOCTORAPPT \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \" \" + PREFIX_EVENT_DESCRIPTION + VALID_EVENT_DESC_DOCTORAPPT;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String EVENT_DESC_DESC_MEETING \u003d \" \" + PREFIX_EVENT_DESCRIPTION + VALID_EVENT_DESC_MEETING;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String EVENT_DATE_DESC_DOCTORAPPT \u003d \" \" + PREFIX_DATE + VALID_EVENT_DATE_DOCTORAPPT;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String EVENT_DATE_DESC_MEETING \u003d \" \" + PREFIX_DATE + VALID_EVENT_DATE_MEETING;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String EVENT_START_TIME_DESC_DOCTORAPPT \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \" \" + PREFIX_START_TIME + VALID_EVENT_START_TIME_DOCTORAPPT;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String EVENT_START_TIME_DESC_MEETING \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \" \" + PREFIX_START_TIME + VALID_EVENT_START_TIME_MEETING;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String EVENT_END_TIME_DESC_DOCTORAPPT \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \" \" + PREFIX_END_TIME + VALID_EVENT_END_TIME_DOCTORAPPT;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String EVENT_END_TIME_DESC_MEETING \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \" \" + PREFIX_END_TIME + VALID_EVENT_END_TIME_MEETING;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String EVENT_ADDRESS_DESC_DOCTORAPPT \u003d \" \" + PREFIX_ADDRESS + VALID_EVENT_ADDRESS_DOCTORAPPT;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String EVENT_ADDRESS_DESC_MEETING \u003d \" \" + PREFIX_ADDRESS + VALID_EVENT_ADDRESS_MEETING;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String INVALID_EVENT_NAME_DESC \u003d \" \" + PREFIX_NAME + \"Consultation-\"; // - not allowed"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String INVALID_EVENT_DESC_DESC \u003d \" \" + PREFIX_EVENT_DESCRIPTION + \"Important*\"; // * not allowed"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String INVALID_EVENT_DATE_DESC \u003d \" \" + PREFIX_DATE + \"2018-09-32\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String INVALID_EVENT_START_TIME_DESC \u003d \" \" + PREFIX_START_TIME + \"12:00\"; // colon not allowed"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String INVALID_EVENT_END_TIME_DESC \u003d \" \" + PREFIX_END_TIME + \"13:00\"; // colon not allowed"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String INVALID_EVENT_END_TIME_TOO_EARLY_DESC \u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \" \" + PREFIX_END_TIME + INVALID_EVENT_END_TIME_TOO_EARLY_DOCTORAPPT;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String INVALID_EVENT_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\r  \\t  \\n\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book and the filtered person list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Adds the input {@code event} into the filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static void addNewEvent(Event event, Model model) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        model.addEvent(event);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 60,
      "-": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.addNewEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.CLASS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        addNewEvent(CLASS, model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        addNewEvent(CLASS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 4,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.addNewEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.CLASS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        addNewEvent(CLASS, model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        addNewEvent(CLASS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 5,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddEventCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_ADDRESS_DESC_DOCTORAPPT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_ADDRESS_DESC_MEETING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_DATE_DESC_DOCTORAPPT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_DATE_DESC_MEETING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_DESC_DESC_DOCTORAPPT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_DESC_DESC_MEETING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_END_TIME_DESC_DOCTORAPPT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_END_TIME_DESC_MEETING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_NAME_DESC_DOCTORAPPT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_NAME_DESC_MEETING;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_START_TIME_DESC_DOCTORAPPT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_START_TIME_DESC_MEETING;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_ADDRESS_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_DATE_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_DESC_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_END_TIME_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_END_TIME_TOO_EARLY_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_END_TIME_TOO_EARLY_DOCTORAPPT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_NAME_DESC;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_START_TIME_DESC;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_ADDRESS_DOCTORAPPT;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATE_DOCTORAPPT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DESC_DOCTORAPPT;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_DOCTORAPPT;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_START_TIME_DOCTORAPPT;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.AddEventCommandParser.MESSAGE_INVALID_START_END_TIME;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.DOCTORAPPT;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventAddress;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDescription;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.testutil.ScheduledEventBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class AddEventCommandParserTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private AddEventCommandParser parser \u003d new AddEventCommandParser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final Event defaultEvent \u003d new ScheduledEventBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event expectedEvent \u003d new ScheduledEventBuilder(DOCTORAPPT).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + EVENT_NAME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_DESC_DESC_DOCTORAPPT + EVENT_DATE_DESC_DOCTORAPPT + EVENT_START_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_END_TIME_DESC_DOCTORAPPT + EVENT_ADDRESS_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new AddEventCommand(expectedEvent));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // multiple names - only the last name accepted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseSuccess(parser, EVENT_NAME_DESC_MEETING + EVENT_NAME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_DESC_DESC_DOCTORAPPT + EVENT_DATE_DESC_DOCTORAPPT + EVENT_START_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_END_TIME_DESC_DOCTORAPPT + EVENT_ADDRESS_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new AddEventCommand(expectedEvent));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // multiple event descriptions - only the last description accepted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + EVENT_NAME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_DESC_DESC_MEETING + EVENT_DESC_DESC_DOCTORAPPT + EVENT_DATE_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_START_TIME_DESC_DOCTORAPPT + EVENT_END_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_ADDRESS_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new AddEventCommand(expectedEvent));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // multiple dates - last date accepted"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + EVENT_NAME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_DESC_DESC_DOCTORAPPT + EVENT_DATE_DESC_MEETING + EVENT_DATE_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_START_TIME_DESC_DOCTORAPPT + EVENT_END_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_ADDRESS_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new AddEventCommand(expectedEvent));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // multiple times - last start time accepted"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + EVENT_NAME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_DESC_DESC_DOCTORAPPT + EVENT_DATE_DESC_DOCTORAPPT + EVENT_START_TIME_DESC_MEETING"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_START_TIME_DESC_DOCTORAPPT + EVENT_END_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_ADDRESS_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new AddEventCommand(expectedEvent));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // multiple times - last end time accepted"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + EVENT_NAME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_DESC_DESC_DOCTORAPPT + EVENT_DATE_DESC_DOCTORAPPT + EVENT_START_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_END_TIME_DESC_MEETING + EVENT_END_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_ADDRESS_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new AddEventCommand(expectedEvent));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + EVENT_NAME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_DESC_DESC_DOCTORAPPT + EVENT_DATE_DESC_DOCTORAPPT + EVENT_START_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_END_TIME_DESC_DOCTORAPPT + EVENT_ADDRESS_DESC_MEETING + EVENT_ADDRESS_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new AddEventCommand(expectedEvent));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // missing event name prefix"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                VALID_EVENT_NAME_DOCTORAPPT + EVENT_DESC_DESC_DOCTORAPPT + EVENT_DATE_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_START_TIME_DESC_DOCTORAPPT + EVENT_ADDRESS_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // missing event description prefix"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                EVENT_NAME_DESC_DOCTORAPPT + VALID_EVENT_DESC_DOCTORAPPT + EVENT_DATE_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_START_TIME_DESC_DOCTORAPPT + EVENT_ADDRESS_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // missing event date prefix"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                EVENT_NAME_DESC_DOCTORAPPT + EVENT_DESC_DESC_DOCTORAPPT + VALID_EVENT_DATE_DOCTORAPPT"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_START_TIME_DESC_DOCTORAPPT + EVENT_ADDRESS_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // missing event time prefix"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                EVENT_NAME_DESC_DOCTORAPPT + EVENT_DESC_DESC_DOCTORAPPT + EVENT_DATE_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + VALID_EVENT_START_TIME_DOCTORAPPT + EVENT_ADDRESS_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // missing event address prefix"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                EVENT_NAME_DESC_DOCTORAPPT + EVENT_DESC_DESC_DOCTORAPPT + EVENT_DATE_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_START_TIME_DESC_DOCTORAPPT + VALID_EVENT_ADDRESS_DOCTORAPPT,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                VALID_EVENT_NAME_DOCTORAPPT + VALID_EVENT_DESC_DOCTORAPPT + VALID_EVENT_DATE_DOCTORAPPT"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + VALID_EVENT_START_TIME_DOCTORAPPT + VALID_EVENT_ADDRESS_DOCTORAPPT,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // invalid event name"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, INVALID_EVENT_NAME_DESC + EVENT_DESC_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                + EVENT_DATE_DESC_DOCTORAPPT + EVENT_START_TIME_DESC_DOCTORAPPT + EVENT_END_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_ADDRESS_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                EventName.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // invalid event description"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, EVENT_NAME_DESC_DOCTORAPPT + INVALID_EVENT_DESC_DESC"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                + EVENT_DATE_DESC_DOCTORAPPT + EVENT_START_TIME_DESC_DOCTORAPPT + EVENT_END_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_ADDRESS_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                EventDescription.MESSAGE_DESCRIPTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, EVENT_NAME_DESC_DOCTORAPPT + EVENT_DESC_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + INVALID_EVENT_DATE_DESC + EVENT_START_TIME_DESC_DOCTORAPPT + EVENT_END_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_ADDRESS_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                EventDate.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // invalid start time (format-wise)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, EVENT_NAME_DESC_DOCTORAPPT + EVENT_DESC_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_DATE_DESC_DOCTORAPPT + INVALID_EVENT_START_TIME_DESC + EVENT_END_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_ADDRESS_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                EventTime.MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // invalid end time (format-wise)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, EVENT_NAME_DESC_DOCTORAPPT + EVENT_DESC_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_DATE_DESC_DOCTORAPPT + EVENT_START_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + INVALID_EVENT_END_TIME_DESC + EVENT_ADDRESS_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                EventTime.MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // invalid end time (end time earlier than start time)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, EVENT_NAME_DESC_DOCTORAPPT + EVENT_DESC_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_DATE_DESC_DOCTORAPPT + EVENT_START_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + INVALID_EVENT_END_TIME_TOO_EARLY_DESC + EVENT_ADDRESS_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                String.format(MESSAGE_INVALID_START_END_TIME, VALID_EVENT_START_TIME_DOCTORAPPT,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        INVALID_EVENT_END_TIME_TOO_EARLY_DOCTORAPPT));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, EVENT_NAME_DESC_DOCTORAPPT + EVENT_DESC_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_DATE_DESC_DOCTORAPPT + EVENT_START_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_END_TIME_DESC_DOCTORAPPT + INVALID_EVENT_ADDRESS_DESC,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                EventAddress.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, INVALID_EVENT_NAME_DESC + EVENT_DESC_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_DATE_DESC_DOCTORAPPT + EVENT_START_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_END_TIME_DESC_DOCTORAPPT + INVALID_EVENT_ADDRESS_DESC,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                EventName.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + EVENT_NAME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_DATE_DESC_DOCTORAPPT + EVENT_START_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_END_TIME_DESC_DOCTORAPPT + EVENT_ADDRESS_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 200
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ImportContactsCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.testutil.ScheduledEventBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.testutil.ScheduledEventUtil;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    // test for add command alias"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parseCommand_add_alias() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        AddCommand command \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                (AddCommand) parser.parseCommand(PersonUtil.getAddCommandAlias(person));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parseCommand_clear_alias() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD_ALIAS) instanceof ClearCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parseCommand_delete_alias() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                DeleteCommand.COMMAND_WORD_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parseCommand_edit_alias() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD_ALIAS + \" \""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parseCommand_exit_alias() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD_ALIAS) instanceof ExitCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parseCommand_find_alias() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                FindCommand.COMMAND_WORD_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parseCommand_help_alias() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD_ALIAS) instanceof HelpCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parseCommand_history_alias() throws Exception {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD_ALIAS) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            // assert if the above command throws an exception as expected"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parseCommand_list_alias() throws Exception {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD_ALIAS) instanceof ListCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parseCommand_select_alias() throws Exception {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                SelectCommand.COMMAND_WORD_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parseCommand_addEvent() throws Exception {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event event \u003d new ScheduledEventBuilder().build();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        AddEventCommand command \u003d (AddEventCommand) parser.parseCommand(ScheduledEventUtil.getAddEventCommand(event));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(new AddEventCommand(event), command);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parseCommand_redoCommandWordAlias_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD_ALIAS) instanceof RedoCommand);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD_ALIAS + \" 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_importContactsCommand() throws Exception {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        String csvFilePath \u003d Paths"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                .get(\"src\", \"test\", \"data\", \"ImportContactsTest\")"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "                .resolve(\"ImportContacts.csv\")"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "                .toFile()"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "                .getAbsolutePath();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        ImportContactsCommand command \u003d (ImportContactsCommand) parser.parseCommand("
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "                ImportContactsCommand.COMMAND_WORD + \" file/\" + csvFilePath);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new ImportContactsCommand(csvFilePath), command);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parseCommand_undoCommandWordAlias_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD_ALIAS) instanceof UndoCommand);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 101,
      "-": 159
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CLASHING_EVENT_END_TIME_DOCTORAPPT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CLASHING_EVENT_START_TIME_DOCTORAPPT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.DOCTORAPPT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.exceptions.DuplicateEventException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.exceptions.EventClashException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.testutil.ScheduledEventBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getEventList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cEvent\u003e newEvents \u003d Arrays.asList(DOCTORAPPT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons, newEvents);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void resetData_withDuplicateEvents_throwsDuplicateEventException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // Two events with the same identity fields"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event duplicateEvent \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new ScheduledEventBuilder(DOCTORAPPT).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cEvent\u003e newEvents \u003d Arrays.asList(DOCTORAPPT, duplicateEvent);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons, newEvents);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(DuplicateEventException.class);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void resetData_withClashingEvents_throwsDuplicateEventException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // Two events with the same identity fields"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event clashingEvent \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        .withEventStartTime(CLASHING_EVENT_START_TIME_DOCTORAPPT)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        .withEventEndTime(CLASHING_EVENT_END_TIME_DOCTORAPPT)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cEvent\u003e newEvents \u003d Arrays.asList(DOCTORAPPT, clashingEvent);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons, newEvents);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(EventClashException.class);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.hasPerson(null);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void hasEvent_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        addressBook.hasEvent(null);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void hasEvent_eventNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(addressBook.hasEvent(DOCTORAPPT));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void hasClashingEvent_clashingEventNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(addressBook.hasClashingEvent(DOCTORAPPT));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void hasEvent_eventInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        addressBook.addEvent(DOCTORAPPT);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(addressBook.hasEvent(DOCTORAPPT));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void hasClashingEvent_clashingEventInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        addressBook.addEvent(DOCTORAPPT);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event clashingEvent \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(CLASHING_EVENT_START_TIME_DOCTORAPPT)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventEndTime(CLASHING_EVENT_END_TIME_DOCTORAPPT)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(addressBook.hasClashingEvent(clashingEvent));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void hasEvent_eventWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        addressBook.addEvent(DOCTORAPPT);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event duplicateEvent \u003d new ScheduledEventBuilder(DOCTORAPPT).build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(addressBook.hasEvent(duplicateEvent));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getPersonList().remove(0);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void getEventList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        addressBook.getEventList().add(new ScheduledEventBuilder().build());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list and events list can violate interface constraints."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        private final ObservableList\u003cEvent\u003e events \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            this.events.setAll(events);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public ObservableList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return events;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 98,
      "-": 107
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CLASHING_EVENT_END_TIME_DOCTORAPPT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CLASHING_EVENT_START_TIME_DOCTORAPPT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EVENTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.DOCTORAPPT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.MEETING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.testutil.ScheduledEventBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.hasPerson(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void hasEvent_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        modelManager.hasEvent(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void hasEvent_eventNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(modelManager.hasEvent(DOCTORAPPT));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void hasClashingEvent_clashingEventNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(modelManager.hasClashingEvent(DOCTORAPPT));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void hasEvent_eventInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        modelManager.addEvent(DOCTORAPPT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(modelManager.hasEvent(DOCTORAPPT));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void hasClashingEvent_clashingEventInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        modelManager.addEvent(DOCTORAPPT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event clashingEvent \u003d new ScheduledEventBuilder()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventName(DOCTORAPPT.getEventName().eventName)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventDescription(DOCTORAPPT.getEventDescription().eventDescription)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventDate(DOCTORAPPT.getEventDate().toString())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(CLASHING_EVENT_START_TIME_DOCTORAPPT)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventEndTime(CLASHING_EVENT_END_TIME_DOCTORAPPT)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventAddress(DOCTORAPPT.getEventAddress().eventAddress)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(modelManager.hasClashingEvent(clashingEvent));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void getFilteredEventList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        modelManager.getFilteredEventList().add(new ScheduledEventBuilder().build());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withPerson(ALICE)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withPerson(BENSON)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEvent(DOCTORAPPT)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEvent(MEETING)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different filteredList of persons -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        modelManager.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 57,
      "-": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.DOCTORAPPT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.MEETING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionedAddressBookTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithAmy \u003d new AddressBookBuilder().withPerson(AMY).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithBob \u003d new AddressBookBuilder().withPerson(BOB).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithCarl \u003d new AddressBookBuilder().withPerson(CARL).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithDoctorAppt \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            new AddressBookBuilder().withEvent(DOCTORAPPT).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithMeeting \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            new AddressBookBuilder().withEvent(MEETING).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ReadOnlyAddressBook emptyAddressBook \u003d new AddressBookBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_singleAddressBook_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy, addressBookWithBob),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(addressBookWithAmy, addressBookWithBob));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_singleAddressBook_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy),"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_singleAddressBook_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook copy \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(copy));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(versionedAddressBook));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(null));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(1));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook differentAddressBookList \u003d prepareAddressBookList(addressBookWithBob, addressBookWithCarl);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentAddressBookList));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook differentCurrentStatePointer \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code versionedAddressBook} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * states before {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * and states after {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertAddressBookListStatus(VersionedAddressBook versionedAddressBook,"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "                                             List\u003cReadOnlyAddressBook\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "                                             ReadOnlyAddressBook expectedCurrentState,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "                                             List\u003cReadOnlyAddressBook\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(versionedAddressBook), expectedCurrentState);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        while (versionedAddressBook.canUndo()) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyAddressBook expectedAddressBook : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, new AddressBook(versionedAddressBook));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyAddressBook expectedAddressBook : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, new AddressBook(versionedAddressBook));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedAddressBook.undo());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code VersionedAddressBook} with the {@code addressBookStates} added into it, and the"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code VersionedAddressBook#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    private VersionedAddressBook prepareAddressBookList(ReadOnlyAddressBook... addressBookStates) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBookStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d new VersionedAddressBook(addressBookStates[0]);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 1; i \u003c addressBookStates.length; i++) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.resetData(addressBookStates[i]);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.commit();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shifts the {@code versionedAddressBook#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedAddressBook versionedAddressBook, int count) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 6,
      "-": 298
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/EventAddressTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventAddressTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new EventAddress(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new EventAddress(invalidAddress));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e EventAddress.isValidAddress(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventAddress.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventAddress.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(EventAddress.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(EventAddress.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(EventAddress.isValidAddress(\"NUS\")); // one word"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(EventAddress.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // long address"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/EventDateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventDateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new EventDate(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new EventDate(invalidDate));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e EventDate.isValidDate(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventDate.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventDate.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventDate.isValidDate(\"20180901\")); // date not conforming to yyyy-mm-dd"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventDate.isValidDate(\"2018-09-013\")); // date not conforming to yyyy-mm-dd"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventDate.isValidDate(\"201809013\")); // date not conforming to yyyy-mm-dd"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventDate.isValidDate(\"2018-0901\")); // only one dash"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventDate.isValidDate(\"20181301\")); // invalid month"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventDate.isValidDate(\"20181032\")); // invalid day"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventDate.isValidDate(\"2018-02-29\")); // leap year"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(EventDate.isValidDate(\"2018-08-01\")); // normal date with separator -"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(EventDate.isValidDate(\"2016-02-29\")); // leap year"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/EventDayTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventDayTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new EventDay(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventDay eventDay \u003d new EventDay(DayOfWeek.MONDAY);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertNotEquals(eventDay, null);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different types"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertNotEquals(eventDay, \" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different values"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertNotEquals(eventDay, new EventDay(DayOfWeek.TUESDAY));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(eventDay, eventDay);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same values"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(eventDay, new EventDay(DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/EventDescriptionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventDescriptionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new EventDescription(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new EventDescription(invalidDescription));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e EventDescription.isValidDescription(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventDescription.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventDescription.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventDescription.isValidDescription(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventDescription.isValidDescription(\"consultation*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // valid description"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(EventDescription.isValidDescription(\"consultation\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(EventDescription.isValidDescription(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(EventDescription.isValidDescription(\"1st meeting\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(EventDescription.isValidDescription(\"MeeTing 123\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(EventDescription.isValidDescription(\"Consultation at the Nearby Polyclinic\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/EventNameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventNameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new EventName(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new EventName(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e EventName.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventName.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventName.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventName.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventName.isValidName(\"meeting*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(EventName.isValidName(\"consultation\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(EventName.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(EventName.isValidName(\"meeting 1\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(EventName.isValidName(\"MeeTing 123\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(EventName.isValidName(\"Consultation at the Nearby Polyclinic\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/EventTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_ADDRESS_MEETING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATE_MEETING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DESC_MEETING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_MEETING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_START_TIME_MEETING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.DOCTORAPPT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.MEETING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.testutil.ScheduledEventBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    // equality criteria testing for two Event objects"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event doctorApptCopy \u003d new ScheduledEventBuilder(DOCTORAPPT).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(DOCTORAPPT.equals(doctorApptCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(DOCTORAPPT.equals(DOCTORAPPT));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(DOCTORAPPT.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(DOCTORAPPT.equals(5));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(DOCTORAPPT.equals(MEETING));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event editedDoctorAppt \u003d new ScheduledEventBuilder(DOCTORAPPT).withEventName(VALID_EVENT_NAME_MEETING).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(DOCTORAPPT.equals(editedDoctorAppt));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different event description -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        editedDoctorAppt \u003d new ScheduledEventBuilder(DOCTORAPPT).withEventDescription(VALID_EVENT_DESC_MEETING).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(DOCTORAPPT.equals(editedDoctorAppt));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        editedDoctorAppt \u003d new ScheduledEventBuilder(DOCTORAPPT).withEventDate(VALID_EVENT_DATE_MEETING).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(DOCTORAPPT.equals(editedDoctorAppt));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different time -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        editedDoctorAppt \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(VALID_EVENT_START_TIME_MEETING).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(DOCTORAPPT.equals(editedDoctorAppt));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        editedDoctorAppt \u003d new ScheduledEventBuilder(DOCTORAPPT).withEventAddress(VALID_EVENT_ADDRESS_MEETING).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(DOCTORAPPT.equals(editedDoctorAppt));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    // checking for clashes between two Events"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void isClashingEvent() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same dates"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event event \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(\"1200\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventEndTime(\"1400\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e event.isClashingEvent(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // before event, no clash"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event earlierEventNoClash \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(\"1000\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventEndTime(\"1159\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(event.isClashingEvent(earlierEventNoClash));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event anotherEarlierEventNoClash \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(\"1000\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventEndTime(\"1200\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(event.isClashingEvent(anotherEarlierEventNoClash));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // after event, no clash"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event laterEventNoClash \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(\"1401\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventEndTime(\"1500\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(event.isClashingEvent(laterEventNoClash));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event anotherLaterEventNoClash \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(\"1400\")"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventEndTime(\"1500\")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(event.isClashingEvent(anotherLaterEventNoClash));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // starts before event starts and ends after event starts, with clash"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event firstEventWithClash \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(\"1100\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventEndTime(\"1300\")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(event.isClashingEvent(firstEventWithClash));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // starts after event starts and ends before event ends, with clash"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event secondEventWithClash \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(\"1230\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventEndTime(\"1330\")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(event.isClashingEvent(secondEventWithClash));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // starts before event ends, ends after event ends, clash"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event thirdEventWithClash \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(\"1300\")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventEndTime(\"1500\")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(event.isClashingEvent(thirdEventWithClash));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // covers whole duration of event and more, clash"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event fourthEventWithClash \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(\"1100\")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventEndTime(\"1500\")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(event.isClashingEvent(fourthEventWithClash));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same duration as event, clash"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event fifthEventWithClash \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(\"1200\")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventEndTime(\"1400\")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(event.isClashingEvent(fifthEventWithClash));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different dates"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event newEvent \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventDate(\"2018-09-01\")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(\"1200\")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventEndTime(\"1400\")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different date, same time, no clash"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event differentDateSameTime \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventDate(\"2018-09-02\")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(\"1200\")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventEndTime(\"1400\")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(event.isClashingEvent(differentDateSameTime));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different date, different time, no clash"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event differentDateDifferentTime \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventDate(\"2018-09-02\")"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(\"1000\")"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventEndTime(\"1200\")"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(event.isClashingEvent(differentDateDifferentTime));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 162
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/EventTimeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventTimeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new EventTime(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void constructor_invalidTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String invalidTime \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new EventTime(invalidTime));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void isValidTime() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // null event time"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e EventTime.isValidTime(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventTime.isValidTime(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventTime.isValidTime(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventTime.isValidTime(\"12:30\")); // time with colon"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventTime.isValidTime(\"233012\")); // hhmmss"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventTime.isValidTime(\"2400\")); // invalid hour"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventTime.isValidTime(\"1061\")); // invalid minute"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(EventTime.isValidTime(\"1230\")); // normal time"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(EventTime.isValidTime(\"0000\")); // start point"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(EventTime.isValidTime(\"2359\")); // end point"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void compareTo() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventTime eventTime \u003d new EventTime(\"1200\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // null EventTime"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e eventTime.compareTo(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(eventTime.compareTo(eventTime) \u003d\u003d 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same time"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventTime sameTime \u003d new EventTime(\"1200\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(eventTime.compareTo(sameTime) \u003d\u003d 0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // eventTime is earlier time"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventTime laterTime \u003d new EventTime(\"1230\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(eventTime.compareTo(laterTime) \u003c 0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // eventTime is later time"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventTime earlierTime \u003d new EventTime(\"1130\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(eventTime.compareTo(earlierTime) \u003e 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/UniqueEventListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CLASHING_EVENT_END_TIME_DOCTORAPPT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CLASHING_EVENT_START_TIME_DOCTORAPPT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.DOCTORAPPT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.MEETING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.exceptions.DuplicateEventException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.exceptions.EventClashException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.testutil.ScheduledEventBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class UniqueEventListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final UniqueEventList uniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void contains_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.contains(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void contains_eventNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(uniqueEventList.contains(DOCTORAPPT));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void contains_clashingEventNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(uniqueEventList.containsClashingEvent(DOCTORAPPT));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void contains_eventInList_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.add(DOCTORAPPT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(uniqueEventList.contains(DOCTORAPPT));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void contains_clashingEventInList_returnsTrue() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.add(DOCTORAPPT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event clashingEvent \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(CLASHING_EVENT_START_TIME_DOCTORAPPT)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventEndTime(CLASHING_EVENT_END_TIME_DOCTORAPPT)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(uniqueEventList.containsClashingEvent(clashingEvent));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void add_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.add(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void add_duplicateEvent_throwsDuplicateEventException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.add(DOCTORAPPT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(DuplicateEventException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.add(DOCTORAPPT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void setEvents_nullUniqueEventList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.setEvents((UniqueEventList) null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void setEvents_uniqueEventList_replacesOwnListWithProvidedUniqueEventList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.add(DOCTORAPPT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedUniqueEventList.add(MEETING);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.setEvents(expectedUniqueEventList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(expectedUniqueEventList, uniqueEventList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void setEvents_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.setEvents((List\u003cEvent\u003e) null);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void setEvents_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.add(DOCTORAPPT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cEvent\u003e eventList \u003d Collections.singletonList(MEETING);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.setEvents(eventList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedUniqueEventList.add(MEETING);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(expectedUniqueEventList, uniqueEventList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void setEvents_listWithDuplicateEvents_throwsDuplicateEventException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cEvent\u003e listWithDuplicateEvents \u003d Arrays.asList(DOCTORAPPT, DOCTORAPPT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(DuplicateEventException.class);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.setEvents(listWithDuplicateEvents);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void setEvents_listWithClashingEvents_throwsDuplicateEventException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event clashingEvent \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(CLASHING_EVENT_START_TIME_DOCTORAPPT)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventEndTime(CLASHING_EVENT_END_TIME_DOCTORAPPT)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cEvent\u003e listWithClashingEvents \u003d Arrays.asList(DOCTORAPPT, clashingEvent);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(EventClashException.class);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.setEvents(listWithClashingEvents);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.asUnmodifiableObservableList().add(DOCTORAPPT);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 128
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    // cannot modify the immutable list of tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().remove(0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).withFaculty(\"SOC\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 1,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedEventTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.AddEventCommandParser.MESSAGE_INVALID_START_END_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.storage.XmlAdaptedEvent.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.DOCTORAPPT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventAddress;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDescription;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class XmlAdaptedEventTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final String INVALID_EVENT_NAME \u003d \"Cl@ss\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final String INVALID_EVENT_DESCRIPTION \u003d \"+invalid_desc\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final String INVALID_EVENT_DATE \u003d \"123123\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final String INVALID_EVENT_START_TIME \u003d \"123123\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final String INVALID_EVENT_END_TIME \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            DOCTORAPPT.getEventStartTime().eventTime"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .minus(Duration.ofHours(1))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .toString()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .replace(\":\", \"\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final String INVALID_EVENT_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final String VALID_EVENT_NAME \u003d DOCTORAPPT.getEventName().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final String VALID_EVENT_DESCRIPTION \u003d DOCTORAPPT.getEventDescription().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final String VALID_EVENT_DATE \u003d DOCTORAPPT.getEventDate().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final String VALID_EVENT_START_TIME \u003d DOCTORAPPT.getEventStartTime().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final String VALID_EVENT_END_TIME \u003d DOCTORAPPT.getEventEndTime().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final String VALID_EVENT_ADDRESS \u003d DOCTORAPPT.getEventAddress().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void toModelType_validEventDetails_returnsEvent() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(DOCTORAPPT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(DOCTORAPPT, event.toModelType());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new XmlAdaptedEvent(INVALID_EVENT_NAME, VALID_EVENT_DESCRIPTION, VALID_EVENT_DATE,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        VALID_EVENT_START_TIME, VALID_EVENT_END_TIME, VALID_EVENT_ADDRESS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d EventName.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new XmlAdaptedEvent(null, VALID_EVENT_DESCRIPTION, VALID_EVENT_DATE,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        VALID_EVENT_START_TIME, VALID_EVENT_END_TIME, VALID_EVENT_ADDRESS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EventName.class.getSimpleName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void toModelType_invalidDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new XmlAdaptedEvent(VALID_EVENT_NAME, INVALID_EVENT_DESCRIPTION, VALID_EVENT_DATE,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        VALID_EVENT_START_TIME, VALID_EVENT_END_TIME, VALID_EVENT_ADDRESS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d EventDescription.MESSAGE_DESCRIPTION_CONSTRAINTS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new XmlAdaptedEvent(VALID_EVENT_NAME, null, VALID_EVENT_DATE, VALID_EVENT_START_TIME,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        VALID_EVENT_END_TIME, VALID_EVENT_ADDRESS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EventDescription.class.getSimpleName());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new XmlAdaptedEvent(VALID_EVENT_NAME, VALID_EVENT_DESCRIPTION, INVALID_EVENT_DATE,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        VALID_EVENT_START_TIME, VALID_EVENT_END_TIME, VALID_EVENT_ADDRESS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d EventDate.MESSAGE_DATE_CONSTRAINTS;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void toModelType_nullDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new XmlAdaptedEvent(VALID_EVENT_NAME, VALID_EVENT_DESCRIPTION, null, VALID_EVENT_START_TIME,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        VALID_EVENT_END_TIME, VALID_EVENT_ADDRESS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EventDate.class.getSimpleName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void toModelType_invalidStartTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new XmlAdaptedEvent(VALID_EVENT_NAME, VALID_EVENT_DESCRIPTION, VALID_EVENT_DATE,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        INVALID_EVENT_START_TIME, VALID_EVENT_END_TIME, VALID_EVENT_ADDRESS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d EventTime.MESSAGE_TIME_CONSTRAINTS;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void toModelType_invalidEndTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new XmlAdaptedEvent(VALID_EVENT_NAME, VALID_EVENT_DESCRIPTION, VALID_EVENT_DATE,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        VALID_EVENT_START_TIME, INVALID_EVENT_END_TIME, VALID_EVENT_ADDRESS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d String.format(String.format(MESSAGE_INVALID_START_END_TIME, VALID_EVENT_START_TIME,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                INVALID_EVENT_END_TIME));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void toModelType_nullStartTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new XmlAdaptedEvent(VALID_EVENT_NAME, VALID_EVENT_DESCRIPTION, VALID_EVENT_DATE, null,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        VALID_EVENT_END_TIME, VALID_EVENT_ADDRESS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \"Start\" + EventTime.class.getSimpleName());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void toModelType_nullEndTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new XmlAdaptedEvent(VALID_EVENT_NAME, VALID_EVENT_DESCRIPTION, VALID_EVENT_DATE,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        VALID_EVENT_START_TIME, null, VALID_EVENT_ADDRESS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"End\" + EventTime.class.getSimpleName());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new XmlAdaptedEvent(VALID_EVENT_NAME, VALID_EVENT_DESCRIPTION, VALID_EVENT_DATE,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        VALID_EVENT_START_TIME, VALID_EVENT_END_TIME, INVALID_EVENT_ADDRESS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d EventAddress.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new XmlAdaptedEvent(VALID_EVENT_NAME, VALID_EVENT_DESCRIPTION, VALID_EVENT_DATE,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        VALID_EVENT_START_TIME, VALID_EVENT_END_TIME, null);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EventAddress.class.getSimpleName());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(DOCTORAPPT);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertNotEquals(event, null);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // Different objects"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertNotEquals(event, 1);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // Different event details"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlAdaptedEvent eventWithDifferentDetails \u003d"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new XmlAdaptedEvent(VALID_EVENT_NAME, VALID_EVENT_DESCRIPTION + \" \","
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                VALID_EVENT_DATE,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                VALID_EVENT_START_TIME, VALID_EVENT_END_TIME, VALID_EVENT_ADDRESS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertNotEquals(event, eventWithDifferentDetails);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // Same event"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlAdaptedEvent otherEvent \u003d event;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(event, otherEvent);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // Same event details"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlAdaptedEvent eventWithSameDetails \u003d new XmlAdaptedEvent(DOCTORAPPT);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(event, eventWithSameDetails);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 183
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAddressBookStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAddressBookStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlAddressBookStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new XmlAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"NotXmlFormatAddressBook.xml\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void readAddressBook_invalidEventAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        readAddressBook(\"invalidEventAddressBook.xml\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidAndValidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void readAddressBook_invalidAndValidEventAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        readAddressBook(\"invalidAndValidEventAddressBook.xml\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAndEventAddressBook_throwDataConversionException()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        readAddressBook(\"invalidAndValidPersonAndEventAddressBook.xml\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempAddressBook.xml\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            new XmlAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(new AddressBook(), null);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 19,
      "-": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSerializableAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBookTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final Path TYPICAL_PERSONS_AND_EVENTS_FILE \u003d TEST_DATA_FOLDER.resolve("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \"typicalPersonsAndEventsAddressBook\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    + \".xml\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.xml\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final Path INVALID_EVENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidEventAddressBook.xml\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final Path DUPLICATE_EVENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateEventAddressBook.xml\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void toModelType_typicalPersonsAndEventsFile_success() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_PERSONS_AND_EVENTS_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(XmlSerializableAddressBook.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void toModelType_invalidEventFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_EVENT_FILE,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void toModelType_duplicateEvents_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_EVENT_FILE,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expectMessage(XmlSerializableAddressBook.MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 26,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Adds a new {@code Event} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public AddressBookBuilder withEvent(Event event) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        addressBook.addEvent(event);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 9,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FACULTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static String getAddCommandAlias(Person person) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return AddCommand.COMMAND_WORD_ALIAS + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_FACULTY + person.getFaculty().value + \" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 4,
      "-": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ScheduledEventBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventAddress;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDescription;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * A utility class to help with building Event objects. File naming is set to be in line with the other Event utils."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class ScheduledEventBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String DEFAULT_EVENT_NAME \u003d \"Doctor Appointment\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String DEFAULT_EVENT_DESC \u003d \"Consultation\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String DEFAULT_EVENT_DATE \u003d \"2018-09-01\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String DEFAULT_EVENT_START_TIME \u003d \"1015\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String DEFAULT_EVENT_END_TIME \u003d \"1045\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String DEFAULT_EVENT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private EventName eventName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private EventDescription eventDescription;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private EventDate eventDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private EventTime eventStartTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private EventTime eventEndTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private EventAddress eventAddress;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Builds a new Event with the default values."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ScheduledEventBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventName \u003d new EventName(DEFAULT_EVENT_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventDescription \u003d new EventDescription(DEFAULT_EVENT_DESC);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventDate \u003d new EventDate(DEFAULT_EVENT_DATE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventStartTime \u003d new EventTime(DEFAULT_EVENT_START_TIME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventEndTime \u003d new EventTime(DEFAULT_EVENT_END_TIME);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventAddress \u003d new EventAddress(DEFAULT_EVENT_ADDRESS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Initializes the EvebtBuilder with the data of {@code eventToCopy}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ScheduledEventBuilder(Event eventToCopy) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventName \u003d eventToCopy.getEventName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventDescription \u003d eventToCopy.getEventDescription();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventDate \u003d eventToCopy.getEventDate();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventStartTime \u003d eventToCopy.getEventStartTime();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventEndTime \u003d eventToCopy.getEventEndTime();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventAddress \u003d eventToCopy.getEventAddress();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Sets the {@code EventName} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ScheduledEventBuilder withEventName(String eventName) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventName \u003d new EventName(eventName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Sets the {@code EventDescription} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ScheduledEventBuilder withEventDescription(String eventDesc) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventDescription \u003d new EventDescription(eventDesc);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Sets the {@code EventDate} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ScheduledEventBuilder withEventDate(String eventDate) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventDate \u003d new EventDate(eventDate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Sets the {@code EventStartTime} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ScheduledEventBuilder withEventStartTime(String eventTime) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventStartTime \u003d new EventTime(eventTime);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Sets the {@code EventEndTime} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ScheduledEventBuilder withEventEndTime(String eventTime) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventEndTime \u003d new EventTime(eventTime);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Sets the {@code EventAddress} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ScheduledEventBuilder withEventAddress(String eventAddress) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventAddress \u003d new EventAddress(eventAddress);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public Event build() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return new Event(eventName, eventDescription, eventDate, eventStartTime, eventEndTime, eventAddress);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 105
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ScheduledEventUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * A utility class for Events. Note that this is different from EventsUtil.java, hence the different naming, as this is"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * for the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Events-related"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * functions in EventsPlus+."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class ScheduledEventUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns an add command string for adding the {@code event}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static String getAddEventCommand(Event event) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return AddEventCommand.COMMAND_WORD + \" \" + getEventDetails(event);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns the part of command string for the given {@code event}\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static String getEventDetails(Event event) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        sb.append(PREFIX_NAME + event.getEventName().eventName + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        sb.append(PREFIX_EVENT_DESCRIPTION + event.getEventDescription().eventDescription + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        sb.append(PREFIX_DATE + event.getEventDate().toString() + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        sb.append(PREFIX_START_TIME + event.getEventStartTime().toString() + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        sb.append(PREFIX_END_TIME + event.getEventEndTime().toString() + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        sb.append(PREFIX_ADDRESS + event.getEventAddress().eventAddress + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalEvents.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_ADDRESS_DOCTORAPPT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_ADDRESS_MEETING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATE_DOCTORAPPT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATE_MEETING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DESC_DOCTORAPPT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DESC_MEETING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_END_TIME_DOCTORAPPT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_END_TIME_MEETING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_DOCTORAPPT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_MEETING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_START_TIME_DOCTORAPPT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_START_TIME_MEETING;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * A utility class containing a list of {@code Event} objects to be used in tests."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class TypicalEvents {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    // Manually added - Event\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final Event DOCTORAPPT \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            new ScheduledEventBuilder()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventName(VALID_EVENT_NAME_DOCTORAPPT)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventDescription(VALID_EVENT_DESC_DOCTORAPPT)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventDate(VALID_EVENT_DATE_DOCTORAPPT)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventStartTime(VALID_EVENT_START_TIME_DOCTORAPPT)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventEndTime(VALID_EVENT_END_TIME_DOCTORAPPT)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventAddress(VALID_EVENT_ADDRESS_DOCTORAPPT)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final Event MEETING \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            new ScheduledEventBuilder()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventName(VALID_EVENT_NAME_MEETING)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventDescription(VALID_EVENT_DESC_MEETING)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventDate(VALID_EVENT_DATE_MEETING)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventStartTime(VALID_EVENT_START_TIME_MEETING)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventEndTime(VALID_EVENT_END_TIME_MEETING)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventAddress(VALID_EVENT_ADDRESS_MEETING)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    // more events manually added"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final Event CLASS \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            new ScheduledEventBuilder()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            .withEventName(\"Guest lecture\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            .withEventDescription(\"Cryptography\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            .withEventDate(\"2018-08-01\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            .withEventStartTime(\"1200\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            .withEventEndTime(\"1400\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final Event DINNER \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            new ScheduledEventBuilder()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventName(\"Dinner appointment\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventDescription(\"with Ann\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventDate(\"2018-09-07\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventStartTime(\"1800\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventEndTime(\"2015\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private TypicalEvents() {} // prevents instantiation"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static List\u003cEvent\u003e getTypicalEvents() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(DOCTORAPPT, MEETING));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FACULTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalEvents;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").withFaculty(\"SOC\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withFaculty(\"SOC\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withFaculty(\"SOC\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            .withFaculty(\"SOC\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withFaculty(\"SOC\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withFaculty(\"SOC\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withFaculty(\"SOC\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withFaculty(\"SOC\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withFaculty(\"SOC\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            .withFaculty(VALID_FACULTY)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            .withFaculty(VALID_FACULTY)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons and events."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        for (Event event : getTypicalEvents()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            ab.addEvent(event);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 9,
      "-": 81
    }
  }
]
