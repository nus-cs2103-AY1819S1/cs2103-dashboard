[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "\u003d 3VIA"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S1-W12-3/main[image:https://travis-ci.com/CS2103-AY1819S1-W12-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S1-W12-3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S1-W12-3/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "* This is a desktop Trivia application. It has a GUI, better utilised using the CLI (Command Line Interface)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "* App design: For _students_ to create their deck of flashcards, to modify and test their knowledge, in preparation for finals."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "* Support for _Build Automation_ using Gradle and for _Continuous Integration_ using Travis CI."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "* This application was adapted from https://github.com/se-edu/addressbook-level4[AddressBookLevel 4] created by https://github.com/se-edu/[SE-EDU]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "* Inspired by https://quizlet.com/[Quizlet]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "shaniceabigail": 6,
      "-": 28
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "      \"githubId\": \"junhui2778\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "      \"displayName\": \"CHUA ...N HUI\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "      \"authorNames\": [\"junhui2778\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "      \"githubId\": \"hozongsien\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "      \"displayName\": \"HO ZO... SIEN\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "      \"authorNames\": [\"hozongsien\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "      \"githubId\": \"JunWei96\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "      \"displayName\": \"KOH J...N WEI\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "      \"authorNames\": [\"JunWei96\", \"Koh Jun Wei\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "      \"githubId\": \"shaniceabigail\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "      \"displayName\": \"SHANI...IGAIL\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "      \"authorNames\": [\"shaniceabigail\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "      \"githubId\": \"Cary-Xx\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "      \"displayName\": \"XIU Z...IHENG\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "      \"authorNames\": [\"Cary-Xx\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 30
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "    implementation group: \u0027com.jfoenix\u0027, name:\u0027jfoenix\u0027, version: \u00279.0.6\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u0027site-name\u0027: \u00273VIA\u0027,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S1-W12-3/main\u0027,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "shaniceabigail": 1,
      "JunWei96": 2,
      "-": 239
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "3VIA was developed by the"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "https://github.com/CS2103-AY1819S1-W12-3/main/blob/master/docs/AboutUs.adoc#project-team[Project Team]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "shown below and based by https://github.com/nus-cs2103-AY1718S1/addressbook-level4[AddressBook-Level4] from the"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "https://se-edu.github.io/docs/Team.html[se-edu] team. +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "\u003d\u003d\u003d Koh Jun Wei"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "image::junwei96.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "{empty}[https://github.com/JunWei96[github]] [\u003c\u003ckohjunwei#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "Responsibilities: Model, Scheduling and Deliverables and Deadline Management"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "\u003d\u003d\u003d Ziheng Xiu"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "image::cary-xx.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "{empty}[https://github.com/Cary-Xx[github]] [\u003c\u003czihengxiu#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "Responsibilities: Logic, Integration"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "\u003d\u003d\u003d Chua Jun Hui"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "image::junhui2778.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "{empty}[https://github.com/junhui2778[github]] [\u003c\u003cchuajunhui#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "Responsibilities Logic, Testing"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "\u003d\u003d\u003d Shanice Abigal"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "image::shaniceabigail.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "{empty}[https://github.com/shaniceabigail[github]] [\u003c\u003cshaniceabigal#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "Responsibilities: UI, Documentation"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "\u003d\u003d\u003d Ho Zong Sien"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "image::hozongsien.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "{empty}[https://github.com/hozongsien[github]] [\u003c\u003chozongsien#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "Responsibilities: Storage, Code Quality"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 9,
      "-": 33,
      "hozongsien": 17
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2103-AY1819S1-W12-3/main/issues[issue tracker] if you"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 3,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003d 3VIA - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-W12-3/main/blob/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "By: `CS2103T W12-3 Team`      Since: `Sept 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands from the user interface command box"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with our coding standards but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "After forking the repo, the documentation will still have the `CS2103T W12-3 Team` branding and refer to the `CS2103-AY1819S1-W12-3/main` repo."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `CS2103-AY1819S1-W12-3/main`), you should do the following:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "2. Take a look at \u003c\u003cImplementation\u003e\u003e for a more detailed description of the implementation of our features."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "* stores the Trivia Bundle data."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cCard\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in xml format and read it back."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003d\u003d\u003d Mass Import Feature"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "The import mechanism works with the `StorageManager` to add and save multiple cards at once. The imported cards are stored internally as an xml file on the hard disk. Additionally, the import mechanism implements the following operations:"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "* `ImportCommand#parseFile()` -- Parse the question(s), answer(s) and topic(s) into a list of cards to add."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "* `ImportCommand#addMultipleCards()` -- Adds a list of cards into the `TriviaBundle`."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "`addMultiple()` is exposed in the Model interface as Model#addMultipleCards()."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "The following activity diagram summarizes what happens when a user executes the import command."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "image::ImportCommandActivityDiagram.png[ImportCommandActivityDiagram]"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "Given below is an example usage scenario and how the import mechanism behaves."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "Step 1: The user enters the import command to import a file from the hard disk. An `ImportCommand` object is initialised."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "Step 2: When the `ImportCommand` executes, the desired import file is first verified to be valid. The following checks are done:"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "* the import path points to a file"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "* the import file is of .txt type"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "* the import file is readable"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "Step 3: Once verified, the import file is parsed to form a list of cards to be added into `TriviaBundle`. The number of cards, questions and answer to be imported is displayed to the user."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "The sequence diagram below shows how the adding of multiple cards works"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "image::AddMutipleCardsSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How import executes"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "* **Alternative 1 (current choice):** Store all cards to be added in `TriviaBundle` before writing to file on hard disk."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "** Pros: Less IO intensive as only one write to file is needed."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "** Cons: May have heap memory issue if large amounts of cards are stored temporarily."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "* **Alternative 2:** Writes a card to xml file after each card is added."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "** Cons: May have performance issue when large amount of cards are added."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How the import file is parsed"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "* **Alternative 1 (current choice):** Tokenize string according to user defined character between question and answer, and between cards."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "** Pros: Allows user to undo/ redo import as import is viewed by `VersionedAddressBook` as a single command."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "** Cons: May have memory performance issue as multiple cards are stored temporarily in the `TriviaBundle`."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "* **Alternative 2 (current choice):** Tokenize string based on AddCommand input format"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "** Pros: Easy to implement as it allows reuse of add command"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "** Cons: Unable to undo/ redo import of all cards as the import command is essentially multiple add commands."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "// tag::matchingtest[]"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003d\u003d\u003d Matching Test Feature"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "The life cycle of a matching test is facilitated by the `AppState` and `MatchTest` model."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "The `AppState` model defines the state of which the application is in. And the `MatchTest` model extends"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "from `TriviaTest` which has the functionality of storing the necessary information that are needed in any kinds of test."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "Additionally, `MatchTest` also implements the following operations:"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "* `MatchTest#startTest()` -- Does the necessary initialisations to start a matching test."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "* `MatchTest#stopTest()` -- Does the necessary clean up to stop a matching test."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "* `MatchTest#match(questionIndex, answerIndex)` -- Matches the question to the answer."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#startTriviaTest()`, `Model#stopTriviaTest()` and `Model#MatchCards` respectively."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "The following activity diagram shows the complete lifecycle of a matching test."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "image::MatchTestActivityDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "Given below is an example usage scenario and how the matching test behaves at each step."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "Step 1. The user enter the `testM` command and a new `MatchingTestCommand` will be created."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "Step 2. The `MatchingTestCommand` will be executed and a new MatchTest will be created as shown in the below Sequence diagram."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "image::StartingMatchTestSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "Step 3. After the matching test has been started, the user can only input the following commands:"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "* `QUESTION_INDEX ANSWER_INDEX` Will be used to define which question will be matched to the answer."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "* `exit` If the user input `exit`, the matching test will end and the information related to that matching test will not be recorded."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "Step 4. Suppose the user chose to match a question to an answer, the sequence will execute a list of steps, as shown in the sequence diagram below, to determine whether the match is correct."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "image::MatchCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "Step 5. Suppose it is correct, the System will remove the matched question and answer from the Ui."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "Step 6. If there are still existing unmatched question and answers, the System will go back to step 3."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "Step 7. After all the question and answers are matched, the System will display the results."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "Step 8. At this stage, the System will await `exit` command from the user so that user can be taken back to the home page."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d The polymorphism of TriviaTest"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "* **Alternative 1 (current choice):** Uses `TriviaTest`, `CloseTriviaTestViewEvent` and `ShowTriviaTestViewEvent` that accepts all kinds of TriviaTest, not just matching test."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "** Pros: Follows Open-Close Principle which increases the extensibility of the testing feature in 3VIA."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "** Pros: Increases the re-usability of similar codes, and promotes cleaner code."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "** Cons: The implementation of different tests have to follow the structure of TriviaTest very strictly."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "* **Alternative 1 (current choice):** Implement each kinds of test as a standalone test with its own standalone class and event handler."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "** Pros: Easy to implement and each developer will have their freedom of how to implement their own test."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "** Cons: Will lead to code that is increasingly not manageable."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d How UI feedback is being received when a `MatchCommand` is executed"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "* **Alternative 1 (current choice):** Uses `AsyncEventCenter` to dispatch its events."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "** Pros: The feedback received by the user is synchronised between question and answer."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "** Cons: More CPU intensive as it uses multi-threading."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "* **Alternative 2:** Uses `EventCenter` to dispatch its events."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "** Pros: Easier to debug code that does not use multi-threading and less CPU intensive."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "** Cons: The events will be dispatched and handle in a sequential order, as a result the UI feedback for question may not be in sync with feedback for answer."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "// end::matchingtest[]"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "* For students/learners who wants to reinforce their knowledge"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "*Value proposition*: help students memorise and test their knowledge quickly"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "|`* * *` |curious learner |be able to test my knowledge |be sure that I have memorised the content"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "|`* * *` |hardworking learner |have different testing mechanisms |reinforce my knowledge and clear any misconceptions."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "|`* * *` |user |list all the contents in a deck of cards |review all the contents in one glance"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "|`* * *` |user |to search for questions |look-up answers to questions that I can’t remember"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "|`* * *` |user |mass import multiple cards at the same time from a single file |input large amount of data at once"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "|`* *` |efficient user |have a timer on the time to answer each question |improve the ability to recall information quickly"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "|`* *` |curious user |research more on the question |learn at a greater depth"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "|`* *` |consistent user |revise on the contents which I’m not familiar with more often |memorise those content permanently"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "|`*` |multilingual user |input text in different languages |learn another language"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "|`*` |competitive user |have a multi player function |challenge my friends’ knowledge"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "(For all use cases below, the *System* is the `3VIA` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003d\u003d\u003d Use case 1: Find more info on a topic"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "1. User: Search for a certain question using keywords."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "2. System: Shows a list of questions that meets the search criteria."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "3. User: Select a question."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "4. System: Displays the question and answer."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "5. User: Request more info regarding the question."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "6. System: Display more info."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "* 1a. No matches."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "** 1a1. System: Indicates no question."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "* 2a. User wants to see more question"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "** 2a1. User request for matching questions again."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "\u003d\u003d\u003d Use case 2: Add Card"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "1. User: Adds question, answer and topic(s)."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "2. System: Displays the question and answer added."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "+"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "* 1a. Incorrect format."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "** 1a1. System: Indicates format entered is incorrect."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "+"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003d\u003d\u003d Use case 3: Open-Ended Test"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "1. User: User start open-ended test."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "2. System: Displays list of questions with topic."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "3. User: Confirms questions to be tested."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "4. System: Displays question and starts the timer (if specified) for the question."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "5. User: Key in the user’s answer."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "6. System: Display the correct answer and wait for the user to determine the correctness of the question."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "7. User: User determine the correctness of the question."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "8. Repeat step 4 until all cards have been viewed and answered."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "+"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "* 2a. Topic not found"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "** 2a1. System: Indicates topic not found."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "+"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "* 4a. Time limit exceeded and user did not answer the question"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "** 4a1. System: Continue to next question at step 4."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "+"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "Use case resumes at step 4 on the next question."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003d\u003d\u003d Use case 4: Matching test"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "1. User: Start matching test."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "2. System: Shows a list of question and answer."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "3. User: Select the matching question and answer."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "4. Repeat step 3 until user matched all the questions and answers correctly."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "5. System: Record down the statistics of the test."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "+"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "* 3a. Question and answer matched wrongly."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "** 3a1. System: Indicates that question and answer matched are wrong."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "+"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "* 4a. User exit from the test without completing it."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "** 4a1. System: Step 5 will not be carried out."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "+"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003d\u003d\u003d Use case 5: Import"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "1. User: Input import command."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "2. System: Displays the number of cards, questions and answer to be imported."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "3. User: Selects the desired questions and answers to import."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "4. System: Stores the desired questions and answers in database."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "* 2a. Invalid file."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "** 2a1. System: Indicates file can\u0027t be found/read."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "* 2a. Wrong text format."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "** 2a1. System: Indicates the format of text is incorrect."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "* 3a. Input index is invalid."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "** 3a1. System: Indicates the index (range) entered is invalid."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "junhui2778"
        },
        "content": ".  The maximum number of question that the app can have should not be capped."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "junhui2778"
        },
        "content": ".  The application should be intuitive and easy to use."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ".  The application should still work, without internet access."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "[[card]] Card::"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "A question and answer pair."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "junhui2778"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "[[deck]] Deck::"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "A related set of cards grouped together."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "junhui2778"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "[[bundle]] Bundle::"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "Refers to all the cards in the application."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "Author:"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "junhui2778": 62,
      "shaniceabigail": 6,
      "JunWei96": 108,
      "-": 679,
      "hozongsien": 68
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003d 3VIA - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-W12-3/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "By: `CS2103T W12-3 Team`      Since: `Sept 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "3VIA is a great way for _learners_ to *reinforce and test out their knowledge*. Tired of using a mouse or trackpad to navigate? Don\u0027t worry, 3VIA is *optimised for a veteran Command Line Interface (CLI) user*, while still having the benefits of a beautiful Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "3VIA will spur and energise your desire to be that A* student, without ever leaving the keyboard. We believe that it should only take 3 steps to get that Very Important A (3VIA, get it?)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "You can read the user guide from start to finish by jumping right in to \u003c\u003cQuick Start\u003e\u003e to get started or just use it as a reference. Enjoy!"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": ".  Ensure you have Java version _9_ or later installed in your computer."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": ".  Download the latest `3VIA.jar` link:{repoURL}/releases[here] and copy the file into the folder you want to use as the home folder for your 3VIA app."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": ".  Double-click the icon to start the app. The GUI should appear in a few seconds and you\u0027re ready to go!"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "*Some things to try:* +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "Type commands in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "Here are some example commands you can try:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "* *`list`* : lists all cards according to their topics"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "* **`add`**`add q/What is the formula for force? a/force \u003d mass * acceleration a/Physics` : adds a card with question"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "`What is the formula for force?` to the the trivia application."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "* **`delete`**`3` : deletes the 3rd card in the current list"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "Refer to \u003c\u003cFeatures\u003e\u003e for more details of each command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "[qanda]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "UPPER_CASE _are parameters you should include in use the command_:: `add q/QUESTION` means `add q/Why is the earth round`."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "Items in square brackets are optional:: `q/QUESTION [t/TOPIC]` means `q/Why is the earth round t/Physics`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "Items with `...` after them can be used optionally or multiple times:: `[t/TOPIC] ...` can be `t/Physics t/Math t/Literature`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "Parameters written can be in any order:: `q/QUESTION a/ANSWER` can be `a/ANSWER q/QUESTION`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "`INDEX` refers to the index number of the card in the most recently displayed card list:: `INDEX` must be a *positive integer*, i.e. 1, 2, 3 ..."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "Opens a window to our 3VIA User Guide."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "\u003d\u003d\u003d Adding a card: `add`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "Adds a card to *3VIA* +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "Format: `add q/QUESTION a/ANSWER [t/TOPIC]...`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "A card can have any number of topics. If there are no topics specified, `NoTopic` will be assigned to the card."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "* `add q/What is the formula for force? a/force \u003d mass * acceleration t/Physics`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "* `add q/What is the capital of Singapore? a/Singapore t/GeneralKnowledge t/Geography`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003d\u003d\u003d Listing all cards : `list`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "Shows a list of all the cards. +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003d\u003d\u003d Editing a card : `edit`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "Edits an existing card at specified `INDEX` with updated input values. +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "Format: `edit INDEX [q/QUESTION] [a/ANSWER] [t/TOPIC]...`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "* When editing topics, the existing topics of the card will be removed i.e adding of topics is not cumulative."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "* You can set a topic of `NoTopic` to the card just by typing `t/` without specifying any topics after it."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "* `add q/Why will the apple fall from the tree? a/Because it was ripe!` +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "`edit 1 q/Why will the apple fall from the tree? a/Because of gravity!` +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "_Edits the answer of the 1st card to be `Because of gravity!`._"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "* `add q/Why can\u0027t a bicycle stand on its own? a/Two tired. t/Funny`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "`edit 2 q/Why did the young mother fall asleep when put her child in bed t/` +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "_Edits the question of the 2nd card to be `Why did the young mother fall asleep when put her child in bed?` and the card will have a topic of `NoTopic`._"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "\u003d\u003d\u003d Search for cards by question: `find`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "Finds a list of card(s) whose question contain at least one of the given keywords. +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "* The search is *not case sensitive*. e.g `why` will match `Why`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "* The order of the keywords does not matter. e.g. `Why drop` will match `drop why`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "* Only the question is searched."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "* Only full words will be matched e.g. `drop` will not match `droppings`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "* Cards matching at least one keyword will be returned. e.g. `Why drop` will return `Why will apple drop?`, `Why will rain drop?`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "* `find Why` +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "_Returns `Why will the apple fall from the tree?` and `Why can\u0027t a bicycle stand on its own?`_"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "* `find why what where` +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "_Returns all cards having question `why`, `what`, or `where`_"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003d\u003d\u003d Deleting a card : `delete`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "Deletes the card from the specified `INDEX`. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "_Deletes the 2nd displayed card._"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "* `find Why` +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "_Deletes the 1st card in the results of the `find` command._xs"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003d\u003d\u003d Selecting a card : `select`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "Selects the card identified by the index number used in the displayed card list. Loads the Google search page for the card question. +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "_Selects and opens a Google search page for the 2nd displayed card._"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "* `find Why` +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "_Selects and opens a Google search page for the 1st card in the results of the `find` command._"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "Lists all the commands that you have entered from your most recent command. +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "Restores the app to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "Undoable commands: those commands that modify the app\u0027s content (`add`, `delete`, `edit`, `clear` and `import`)."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "_`delete 1` command is reversed_"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "_The `undo` command not executed as there are no undoable commands previously executed._"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "_`clear` command is reversed +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "_`delete 1` command is reversed_"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "* `import C:\\Users\\username\\Desktop\\text.txt` +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "_`import` command is reversed_"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "_`delete 1` command is reversed_ +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "_`delete 1` command is reapplied_"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "The `redo` command was not executed as there are no `undo` commands previously executed."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "_`clear` command is reversed_ +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "_`delete 1` command is reversed_ +"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "_`delete 1` command is reapplied_ +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "_`clear` command is reapplied_ +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear` `[coming in v2.0]`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "Use with caution! Clears all entries in 3VIA and reboots. +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "\u003d\u003d\u003d Starting an Open Ended Test: `testO` `[coming in v2.0]`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "Start an open-ended test of a specified topic. In an open-ended test, the user will get the choose whether he/she has answered correctly by comparing their answers with the expected answer. +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "Format: `test t/TOPIC [TIMELIMIT_IN_SECONDS]`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "****"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "* The test aims to test the knowledge of the user with the existing questions of a specified topic that are in the trivia application."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "* The user can also set the time limit (in seconds) for each question using the optional field `TIMELIMIT_IN_SECONDS`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "****"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "The following commands can only be used during an `Open Ended Test`."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "\u003d\u003d\u003d\u003d Answering a question:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "Type your answer in the command field and press `enter` to submit your answer. If you don\u0027t have an answer in mind, you can just press `enter` with nothing in the command field. We accept your silence as an answer. +"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "Format: `ANSWER_FROM_USER`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003d\u003d\u003d\u003d Determining the correctness of your answer:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "After answering the question, you would be given a comparison between the expected and actual answer you entered. You would be required to determine the correctness of your answer since the questions are open ended. The app will keep track of your score. +"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "Format: `c` (correct) OR `x` (wrong)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003d\u003d\u003d\u003d Quit the test:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "Test is exited. +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "\u003d\u003d\u003d Starting a Matching Test: `testM`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "Start a test of matching cards of a specified topic. In a test of matching cards, all the questions and answers in that topic"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "will be displayed. The user will then have to match the correct question and answer together. +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "Format: `testM t/TOPIC`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "The following commands can only be used during a `Matching Test`."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003d\u003d\u003d\u003d Enter the matching cards: match"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "Will match and pair the cards during a matching test. +"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "Format: `INDEX_OF_QUESTION INDEX_OF_ANSWER`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "\u003d\u003d\u003d\u003d Quit matching cards test:"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "Test is exited. +"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "\u003d\u003d\u003d View statistics for a certain test: `stats` `[coming in v2.0]`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "Results of previous tests, questions, expected answers and the user’s answers for that particular topic will be displayed. +"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "Format: `stats [TOPIC]`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "\u003d\u003d\u003d Mass Import: `import` `[coming in v2.0]`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "Imports multiple cards from a text file into 3VIA. +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "Format: `import FILEPATH`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "****"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "* Ignores duplicated cards already in the app."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "* The `FILEPATH` refers to the absolute path of the file to be imported."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "* The file *must be a non empty text file*."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "****"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "****"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "* `import C:\\Users\\username\\Desktop\\text.txt`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "_Imports the contents from the text.txt file on a Windows desktop._"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "* `import C:\\Users\\username\\Desktop\\text.txt`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "_Imports the contents from the text.txt file on a Mac desktop._"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "* `import home/username/text.txt`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "_Imports the contents from the text.txt file on a Linux desktop._"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "****"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "command `exit` used in any of the test page will bring you to the home page, whereas using the command `exit` in the homepage will exit the programme."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "3VIA saves data in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "// tag::multiplayer[]"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003d\u003d\u003d Multi-Player `[coming in v2.0]`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "_{explain how the user can enable/disable Multi-Player}_"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "// end::multiplayer[]"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "*Q*: How do I transfer my data to another computer? +"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous 3VIA application folder."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "* *Add* `add q/QUESTION a/ANSWER [t/TOPIC]...` +"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "e.g. `add q/What is the formula for force? a/force \u003d mass * acceleration t/Physics`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "* *Edit* : `edit INDEX [q/QUESTION] [a/ANSWER] [t/TOPIC]...` +"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "e.g. `edit 1 q/Why will the apple fall from the tree? a/Because of gravity!`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "e.g. `find Why`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "* *Test* : `test TOPIC TIMELIMIT_IN_SECONDS`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "* *Correctness of answer* : `c` (correct) OR `x` (wrong)"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "* *View statistics of test* : `stats [TOPIC]`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "* *Mass Import* : `import FILEPATH`"
      }
    ],
    "authorContributionMap": {
      "shaniceabigail": 109,
      "JunWei96": 66,
      "-": 161,
      "hozongsien": 15
    }
  },
  {
    "path": "docs/UsingCheckstyle.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Checkstyle-IDEA"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configuring Checkstyle-IDEA"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ". Install the Checkstyle-IDEA plugin by going to `File` \u003e `Settings` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS). +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Select `Plugins`, press `Browse Repository`, and find the plugin. +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Restart the IDE to complete the installation."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": ". Click `File` \u003e `Settings...` or `IntelliJ IDEA` \u003e `Preferences...` (macOS) \u003e `Other Settings` \u003e `Checkstyle`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ". Set `Scan Scope`  to `Only Java sources (including tests)`, so that the plugin will run checkstyle for our test source codes as well"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ". Ensure that the `Checkstyle version` is set to `8.1`. This is the same version that we are using inside Gradle, so that you won\u0027t get any errors due to version incompatibility"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * If `Checkstyle version` is not set to `8.1`, set it to version `8.1` and click `Apply`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "image::checkstyle-idea-scan-scope.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ". Click the plus sign under `Configuration File`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". Enter an arbitrary description e.g. addressbook"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Use a local Checkstyle file`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the checkstyle configuration file found at `config/checkstyle/checkstyle.xml`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Next` \u003e `Finish`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ". Mark `Active` for the newly imported check configuration"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::checkstyle-idea-configuration.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Checkstyle-IDEA"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: When importing `checkstyle.xml`, Checkstyle-IDEA plugin complains that `The Checkstyle rules file could not be parsed. ... The file has been blacklisted for 60s.`**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: `checkstyle.xml` is written for a particular version, but the plugin was not configured to the correct version."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Ensure that you have selected the correct `Checkstyle version` that matches the version in `build.gradle` and have clicked `Apply`, as `checkstyle.xml` is written for Gradle\u0027s checkstyle."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: After setting up `checkstyle.xml`, Checkstyle-IDEA plugin does not seem to highlight the errors / real-time scanning seems broken.**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: The plugin may not immediately run after setting it up."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Restart the IDE."
      }
    ],
    "authorContributionMap": {
      "shaniceabigail": 1,
      "-": 41
    }
  },
  {
    "path": "docs/team/hozongsien.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "\u003d Ho Zong Sien - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "\u003d\u003d PROJECT: 3VIA"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "-": 70,
      "hozongsien": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyTriviaBundle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.TriviaBundle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.ReadOnlyTriviaResults;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaResults;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.TriviaBundleStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.storage.TriviaResultsStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlTriviaBundleStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.storage.XmlTriviaResultsStorage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing 3VIA app ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        TriviaBundleStorage triviaBundleStorage \u003d new XmlTriviaBundleStorage(userPrefs.getTriviaBundleFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        TriviaResultsStorage triviaResultsStorage \u003d new XmlTriviaResultsStorage(userPrefs"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .getTriviaResultsFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, triviaBundleStorage, triviaResultsStorage,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                userPrefsStorage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyTriviaBundle initialTriviaBundleData;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        ReadOnlyTriviaResults initialTriviaResults;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        initialData \u003d readData(storage::readAddressBook, SampleDataUtil::getSampleAddressBook, AddressBook::new,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                AddressBook.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        initialTriviaBundleData \u003d readData(storage::readTriviaBundle, SampleDataUtil::getSampleTriviaBundle,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                TriviaBundle::new, TriviaBundle.class);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        initialTriviaResults \u003d readData(storage::readTriviaResults, SampleDataUtil::getSampleTriviaResults,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                TriviaResults::new, TriviaResults.class);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return new ModelManager(initialData, initialTriviaBundleData, initialTriviaResults, userPrefs);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * A function that is used to read the different kinds of data from the hard disk."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private \u003cE, T extends E\u003e E readData(SupplierToReadData\u003cOptional\u003cE\u003e\u003e readAction, Supplier\u003cE\u003e sampleDataAction,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                                        Supplier\u003cE\u003e emptyDataAction, Class\u003cT\u003e dataClass) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            Optional\u003cE\u003e dataOptional \u003d readAction.get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            if (!dataOptional.isPresent()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                logger.info(String.format(StorageManager.MESSAGE_DATA_FILE_NOT_FOUND, dataClass.getSimpleName()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            return dataOptional.orElseGet(sampleDataAction);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            logger.warning(String.format(StorageManager.MESSAGE_PROBLEM_READING_FILE, dataClass.getSimpleName()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            return emptyDataAction.get();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            logger.warning(String.format(StorageManager.MESSAGE_INCORRECT_DATA_FILE, dataClass.getSimpleName()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            return emptyDataAction.get();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * A Supplier that is used to read data from hard disk. Will throw IOException and DataConversionException."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private interface SupplierToReadData\u003cT\u003e {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        T get() throws IOException, DataConversionException;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "        logger.info(\"Starting 3VIA app \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping 3VIA app ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaniceabigail": 3,
      "JunWei96": 42,
      "-": 200
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/AsyncEventsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.concurrent.ExecutorService;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.concurrent.Executors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import com.google.common.eventbus.AsyncEventBus;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * Manages the event dispatching of the app."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class AsyncEventsCenter {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AsyncEventsCenter.class);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static AsyncEventsCenter instance;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final AsyncEventBus asyncEventBus;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final ExecutorService executorService;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private AsyncEventsCenter() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        executorService \u003d Executors.newCachedThreadPool();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        asyncEventBus \u003d new AsyncEventBus(executorService);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static AsyncEventsCenter getInstance() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            instance \u003d new AsyncEventsCenter();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static void clearSubscribers() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        instance \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void registerHandler(Object handler) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        asyncEventBus.register(handler);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Posts an event to the event bus."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public \u003cE extends BaseEvent\u003e AsyncEventsCenter post(E event) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        logger.info(\"------[Async Event Posted] \" + event.getClass().getCanonicalName() + \": \" + event.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        asyncEventBus.post(event);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_CARD_DISPLAYED_INDEX \u003d \"The card index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CARDS_LISTED_OVERVIEW \u003d \"%1$d cards listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String MESSAGE_INVALID_BOOLEAN_FOR_ISCORRECT \u003d \"Invalid boolean values for isCorrect field.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String MESSAGE_POSITIVE_INDEX \u003d \"Index have to be positive.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 2,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ExtraInformationDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "package seedu.address.commons.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hozongsien"
        },
        "content": " * Types of additional information to display."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hozongsien"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "public enum ExtraInformationDisplay {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    BROWSER, IMPORT_HELP_DISPLAY"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hozongsien": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/TriviaResultsChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaResults;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * Indicates the TriviaResults has changed"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class TriviaResultsChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public final TriviaResults data;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public TriviaResultsChangedEvent(TriviaResults data) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return \"number of cards \" + data.getResultList().size();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/CardPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hozongsien"
        },
        "content": " * Represents a selection change in the Card List Panel."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hozongsien"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CardPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Card newSelection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CardPanelSelectionChangedEvent(Card newSelection) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Card getNewSelection() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "hozongsien": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/CloseTriviaTestViewEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * An event requesting to close the trivia test page."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class CloseTriviaTestViewEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /** For navigation to the matching test page. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public CloseTriviaTestViewEvent() {}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/DisplayBrowserEventChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hozongsien"
        },
        "content": " * Represents the visibility change in the browser information."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hozongsien"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hozongsien"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "public class DisplayBrowserEventChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    private boolean visibility;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public DisplayBrowserEventChangedEvent(boolean visibility) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        this.visibility \u003d visibility;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public boolean isBrowserVisible() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        return visibility;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hozongsien": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/DisplayImportHelpChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hozongsien"
        },
        "content": " * Represents the visibility change in the import help display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hozongsien"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hozongsien"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "public class DisplayImportHelpChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    private boolean visibility;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public DisplayImportHelpChangedEvent(boolean visibility) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        this.visibility \u003d visibility;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public boolean isImportHelpDisplayVisible() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        return visibility;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hozongsien": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/ExtraInformationDisplayChangeEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.commons.events.ExtraInformationDisplay;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hozongsien"
        },
        "content": " * Represents the change in information presented."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hozongsien"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hozongsien"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "public class ExtraInformationDisplayChangeEvent extends BaseEvent {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    private ExtraInformationDisplay toDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public ExtraInformationDisplayChangeEvent(ExtraInformationDisplay toDisplay) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        this.toDisplay \u003d toDisplay;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public ExtraInformationDisplay toDisplay() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        return toDisplay;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hozongsien": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/FlashMatchOutcomeEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * A flash to the matched answer and question cards, to indicate they have been matched correctly or wrongly."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class FlashMatchOutcomeEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public final int indexOfQuestion;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public final int indexOfAnswer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public final boolean isCorrect;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public FlashMatchOutcomeEvent(int indexOfQuestion, int indexOfAnswer, boolean isCorrect) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.indexOfQuestion \u003d indexOfQuestion;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.indexOfAnswer \u003d indexOfAnswer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.isCorrect \u003d isCorrect;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/ShowTriviaTestResultEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.ui.test.TriviaTestResultPage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * An event requesting to show the result of trivia test page."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class ShowTriviaTestResultEvent extends BaseEvent {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final Supplier\u003c? extends TriviaTestResultPage\u003e page;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public ShowTriviaTestResultEvent(Supplier\u003c? extends TriviaTestResultPage\u003e page) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.page \u003d page;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public Supplier\u003c? extends TriviaTestResultPage\u003e getTriviaTestResultPage() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return page;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/ShowTriviaTestViewEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.ui.test.TriviaTestPage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * An event requesting to show the trivia test page."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class ShowTriviaTestViewEvent extends BaseEvent {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Supplier\u003c? extends TriviaTestPage\u003e page;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public ShowTriviaTestViewEvent(Supplier\u003c? extends TriviaTestPage\u003e page) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.page \u003d page;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public Supplier\u003c? extends TriviaTestPage\u003e getTriviaTestPage() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return page;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CollectionUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * If the given object is null, it will throw the exception that was defined in the second parameter."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static \u003cE extends Exception\u003e void ifNullThrows(Object item, E exceptionToThrow) throws E {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            throw exceptionToThrow;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 11,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/DateUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * Helper functions for handling Date."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class DateUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String MESSAGE_DATE_CONSTRAINTS \u003d \"Date should be in the following format:\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            + \"dd MMM yyyy, hh:mm AM/PM\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final DateFormat DATE_FORMAT \u003d new SimpleDateFormat(\"dd MMM yyyy, hh:mm a\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Formats the given date according to this format: 01 Jun 2016, 04:13 PM"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static String format(Date date) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return DATE_FORMAT.format(date);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Formats the given string into a java {@code Date} object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @throws ParseException When the given date in String does not conform to the above format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static Date parse(String date) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return DATE_FORMAT.parse(date);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText, model.getAppState());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cCard\u003e getFilteredCardList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredCardList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 1,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TOPIC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * Adds a card to the trivia bundle."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a card to the trivia. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            + PREFIX_QUESTION + \"QUESTION \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            + PREFIX_ANSWER + \"ANSWER \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            + \"[\" + PREFIX_TOPIC + \"TAG]...\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            + PREFIX_QUESTION + \"Why is the earth round? \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            + PREFIX_ANSWER + \"Because of gravity! \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            + PREFIX_TOPIC + \"Physics \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            + PREFIX_TOPIC + \"Science\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New card added: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CARD \u003d \"This card already exists in the trivia bundle\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final Card toAdd;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Card}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public AddCommand(Card card) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        requireNonNull(card);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        toAdd \u003d card;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (model.hasCard(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        model.addCard(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        model.commitTriviaBundle();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 24,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            + \": Deletes the card identified by the index number used in the displayed card list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String MESSAGE_DELETE_CARD_SUCCESS \u003d \"Deleted Card: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        List\u003cCard\u003e lastShownList \u003d model.getFilteredCardList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Card cardToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        model.deleteCard(cardToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        model.commitTriviaBundle();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_CARD_SUCCESS, cardToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 9,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TOPIC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CARDS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Answer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Question;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.topic.Topic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * Edits the details of an existing card in the trivia bundle."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the card identified \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            + \"by the index number used in the displayed card list. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            + \"[\" + PREFIX_QUESTION + \"QUESTION] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            + \"[\" + PREFIX_ANSWER + \"ANSWER] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            + \"[\" + PREFIX_TOPIC + \"TAG]...\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            + PREFIX_QUESTION + \"91234567 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            + PREFIX_ANSWER + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String MESSAGE_EDIT_CARD_SUCCESS \u003d \"Edited Card: %1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CARD \u003d \"This card already exists in the trivia bundle.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final EditCardDescriptor editCardDescriptor;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @param index of the card in the filtered card list to edit"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @param editCardDescriptor details to edit the card with"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public EditCommand(Index index, EditCardDescriptor editCardDescriptor) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        requireNonNull(editCardDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.editCardDescriptor \u003d new EditCardDescriptor(editCardDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        List\u003cCard\u003e lastShownList \u003d model.getFilteredCardList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Card cardToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Card editedCard \u003d createEditedCard(cardToEdit, editCardDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (!cardToEdit.equals(editedCard) \u0026\u0026 model.hasCard(editedCard)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        model.updateCard(cardToEdit, editedCard);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        model.updateFilteredCardList(PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        model.commitTriviaBundle();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_CARD_SUCCESS, editedCard));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Creates and returns a {@code Card} with the details of {@code cardToEdit}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * edited with {@code editCardDescriptor}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static Card createEditedCard(Card cardToEdit, EditCardDescriptor editCardDescriptor) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assert cardToEdit !\u003d null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Question updatedQuestion \u003d editCardDescriptor.getQuestion().orElse(cardToEdit.getQuestion());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Answer updatedAnswer \u003d editCardDescriptor.getAnswer().orElse(cardToEdit.getAnswer());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Set\u003cTopic\u003e updatedTags \u003d editCardDescriptor.getTopics().orElse(cardToEdit.getTopics());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return new Card(updatedQuestion, updatedAnswer, updatedTags);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u0026\u0026 editCardDescriptor.equals(e.editCardDescriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Stores the details to edit the card with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * corresponding field value of the card."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static class EditCardDescriptor {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        private Question question;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        private Answer answer;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        private Set\u003cTopic\u003e topics;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        public EditCardDescriptor() {}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "         * A defensive copy of {@code topics} is used internally."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        public EditCardDescriptor(EditCardDescriptor toCopy) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            setQuestion(toCopy.question);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            setAnswer(toCopy.answer);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            setTopics(toCopy.topics);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            return CollectionUtil.isAnyNonNull(question, answer, topics);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        public void setQuestion(Question question) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            this.question \u003d question;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        public Optional\u003cQuestion\u003e getQuestion() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            return Optional.ofNullable(question);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        public void setAnswer(Answer answer) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            this.answer \u003d answer;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        public Optional\u003cAnswer\u003e getAnswer() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            return Optional.ofNullable(answer);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "         * Sets {@code topics} to this object\u0027s {@code topics}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "         * A defensive copy of {@code topics} is used internally."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        public void setTopics(Set\u003cTopic\u003e topics) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            this.topics \u003d (topics !\u003d null) ? new HashSet\u003c\u003e(topics) : null;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "         * Returns an unmodifiable topic set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code topics} is null."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        public Optional\u003cSet\u003cTopic\u003e\u003e getTopics() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            return (topics !\u003d null) ? Optional.of(Collections.unmodifiableSet(topics)) : Optional.empty();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            if (!(other instanceof EditCardDescriptor)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            EditCardDescriptor e \u003d (EditCardDescriptor) other;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            return getQuestion().equals(e.getQuestion())"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                    \u0026\u0026 getAnswer().equals(e.getAnswer())"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                    \u0026\u0026 getTopics().equals(e.getTopics());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 77,
      "-": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_FROM_APP \u003d \"Exiting 3VIA app as requested ...\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String MESSAGE_EXIT_FROM_TEST \u003d \"Exiting from test as requested ...\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (model.isInTestingState()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            model.stopTriviaTest();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            return new CommandResult(MESSAGE_EXIT_FROM_TEST);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            EventsCenter.getInstance().post(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            return new CommandResult(MESSAGE_EXIT_FROM_APP);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 7,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * Finds and lists all cards in trivia bundle whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all cards whose question contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" why\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final QuestionContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public FindCommand(QuestionContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        model.updateFilteredCardList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                String.format(Messages.MESSAGE_CARDS_LISTED_OVERVIEW, model.getFilteredCardList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 9,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaniceabigail"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You haven\u0027t entered any commands.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e previousCommands \u003d history.getHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaniceabigail": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ImportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.commons.events.ExtraInformationDisplay;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.commons.events.ui.ExtraInformationDisplayChangeEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hozongsien"
        },
        "content": " * Import cards from specified location to the trivia bundle."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hozongsien"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "public class ImportCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Imports cards to the trivia. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "            + \"File path\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "            + \"C:\\\\Users\\\\username\\\\Desktop\\\\cards.txt\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Imported cards from: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CARD \u003d \"Some cards already exists in the trivia bundle\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public static final String MESSAGE_INVALID_FILE \u003d \"Invalid file name.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public static final String MESSAGE_INVALID_FILE_TYPE \u003d \"Invalid file type. Only .txt files are accepted\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    private final File file;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "     * Creates an ImportCommand to import the cards {@code File}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public ImportCommand(File file) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        isFileValid();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        // parse txt"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        // add card to model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        // exception if file empty, file wrong format, file contains duplicated"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        // model.addCard(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        model.commitTriviaBundle();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, file.getName()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "     * Validates the file to be imported."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "     * @throws CommandException the exception caught."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    private void isFileValid() throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        if (!file.isFile()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "            EventsCenter"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "                    .getInstance()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "                    .post(new ExtraInformationDisplayChangeEvent(ExtraInformationDisplay.IMPORT_HELP_DISPLAY));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_FILE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        } else if (!isValidFileType()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_FILE_TYPE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "     * Checks if file is a readable .txt format."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "     * @return true if file is a readable text file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    private boolean isValidFileType() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "            String fileType \u003d Files.probeContentType(file.toPath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "            if (!fileType.equals(\"text/plain\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "                || (other instanceof ImportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "                \u0026\u0026 file.equals(((ImportCommand) other).file));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hozongsien": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CARDS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all cards\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        model.updateFilteredCardList(PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "hozongsien": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MatchCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.matchtest.MatchTest;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * The MatchCommand can only be used in a Matching test."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class MatchCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Match a question to its answer. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            + \"Parameters: INDEX_OF_QUESTION INDEX_OF_ANSWER \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            + \"Example: 1 4\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String MESSAGE_MATCH_SUCCESS \u003d \"Perfect Match!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String MESSAGE_MATCH_FAILURE \u003d \"Wrong Match!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String MESSAGE_INDEX_OUT_OF_BOUND \u003d \"The index specified is out of bound.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final Index questionIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final Index answerIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public MatchCommand(Index questionIndex, Index answerIndex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.questionIndex \u003d questionIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.answerIndex \u003d answerIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assert model.getCurrentRunningTest() instanceof MatchTest;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            if (model.matchQuestionAndAnswer(questionIndex, answerIndex)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_MATCH_SUCCESS));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                throw new CommandException(MESSAGE_MATCH_FAILURE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            throw new CommandException(MESSAGE_INDEX_OUT_OF_BOUND);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // All the tests are different even if they have the same parameters."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                || (other instanceof MatchCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u0026\u0026 questionIndex.equals(((MatchCommand) other).questionIndex)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u0026\u0026 answerIndex.equals(((MatchCommand) other).answerIndex));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MatchTestCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TOPIC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.matchtest.MatchTest;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.topic.Topic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * The command which will executing the matching test of trivia."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class MatchTestCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"testM\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Starts a matching test. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            + PREFIX_TOPIC + \"TAG \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            + PREFIX_TOPIC + \"Physics \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Matching test started.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final Topic tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public MatchTestCommand(Topic tag) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            MatchTest test \u003d new MatchTest(tag, model.getTriviaBundle());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            model.startTriviaTest(test);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                || (other instanceof MatchTestCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u0026\u0026 tag.equals(((MatchTestCommand) other).tag)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CARDS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        if (!model.canRedoTriviaBundle()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        model.redoTriviaBundle();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        model.updateFilteredCardList(PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhui2778": 4,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hozongsien"
        },
        "content": " * Selects a card identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "            + \": Selects the card identified by the index number used in the displayed card list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public static final String MESSAGE_SELECT_CARD_SUCCESS \u003d \"Selected Card: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        List\u003cCard\u003e filteredCardList \u003d model.getFilteredCardList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredCardList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_CARD_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 49,
      "hozongsien": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CARDS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        if (!model.canUndoTriviaBundle()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        model.undoTriviaBundle();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        model.updateFilteredCardList(PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhui2778": 4,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TOPIC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Answer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Question;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.topic.Topic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_QUESTION, PREFIX_ANSWER, PREFIX_TOPIC);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_QUESTION, PREFIX_ANSWER)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Question question \u003d ParserUtil.parseQuestion(argMultimap.getValue(PREFIX_QUESTION).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Answer answer \u003d ParserUtil.parseAnswer(argMultimap.getValue(PREFIX_ANSWER).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Set\u003cTopic\u003e tagList \u003d ParserUtil.parseTopics(argMultimap.getAllValues(PREFIX_TOPIC));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Card card \u003d new Card(question, answer, tagList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return new AddCommand(card);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 14,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.logic.commands.MatchTestCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.state.State;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public Command parseCommand(String userInput, State appState) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        switch (appState) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        case NORMAL:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            switch (commandWord) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ClearCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                return new HistoryCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                return new UndoCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                return new RedoCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            case MatchTestCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                return new MatchTestCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "            case ImportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "                return new ImportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        case MATCH_TEST:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            switch (commandWord) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                return new MatchCommandParser().parse(userInput);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 18,
      "-": 97,
      "hozongsien": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final Prefix PREFIX_TOPIC \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_QUESTION \u003d new Prefix(\"q/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ANSWER \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TOPIC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditCardDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.topic.Topic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_QUESTION, PREFIX_ANSWER, PREFIX_TOPIC);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        EditCardDescriptor editCardDescriptor \u003d new EditCommand.EditCardDescriptor();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (argMultimap.getValue(PREFIX_QUESTION).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            editCardDescriptor.setQuestion(ParserUtil.parseQuestion(argMultimap.getValue(PREFIX_QUESTION).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ANSWER).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            editCardDescriptor.setAnswer(ParserUtil.parseAnswer(argMultimap.getValue(PREFIX_ANSWER).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TOPIC)).ifPresent(editCardDescriptor::setTopics);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (!editCardDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return new EditCommand(index, editCardDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Optional\u003cSet\u003cTopic\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return Optional.of(ParserUtil.parseTopics(tagSet));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 16,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return new FindCommand(new QuestionContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 2,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ImportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hozongsien"
        },
        "content": " * Parses input arguments and creates a new ImportCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hozongsien"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "public class ImportCommandParser implements Parser\u003cImportCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ImportCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "     * and returns an ImportCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public ImportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "            File file \u003d ParserUtil.parsePath(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "            return new ImportCommand(file);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hozongsien": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MatchCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.logic.commands.MatchCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * Parses input arguments and creates a new MatchCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class MatchCommandParser implements Parser\u003cMatchCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code MatchTestCommand}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * and returns an MatchTest object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public MatchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        args \u003d args.trim().replaceAll(\"\\\\s+\", \" \");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String[] values \u003d args.split(\" \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (values.length \u003c 2) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MatchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Index questionIndex \u003d ParserUtil.parseIndex(values[0]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Index answerIndex \u003d ParserUtil.parseIndex(values[1]);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return new MatchCommand(questionIndex, answerIndex);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MatchTestCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TOPIC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.logic.commands.MatchTestCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.topic.Topic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * Parses input arguments and creates a new MatchTestCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class MatchTestCommandParser implements Parser\u003cMatchTestCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MatchTestCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * and returns an MatchTestCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public MatchTestCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TOPIC);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TOPIC)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MatchTestCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Topic tag \u003d ParserUtil.parseTopic(argMultimap.getValue(PREFIX_TOPIC).get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return new MatchTestCommand(tag);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.card.Answer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.card.Question;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TimeLimit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.topic.Topic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public static final String MESSAGE_NO_FILE_NAME \u003d \"No path name specified.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "     * Parses {@code pathName} into an {@code file} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "     * @throws ParseException if no path name is specified."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public static File parsePath(String pathName) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        String trimmedPathName \u003d pathName.trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        requireNonNull(trimmedPathName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        if (trimmedPathName.isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "            throw new ParseException(MESSAGE_NO_FILE_NAME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        return new File(trimmedPathName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String question} into an {@code Question}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code question} is invalid."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Question parseQuestion(String question) throws ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedQuestion \u003d question.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Question.isValidQuestion(trimmedQuestion)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Question.MESSAGE_QUESTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Question(trimmedQuestion);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String answer} into an {@code Answer}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code answer} is invalid."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Answer parseAnswer(String answer) throws ParseException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(answer);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAnswer \u003d answer.trim();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Answer.isValidAnswer(trimmedAnswer)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Answer.MESSAGE_ANSWER_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Answer(trimmedAnswer);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Parses a {@code String topic} into a {@code Topic}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @throws ParseException if the given {@code topic} is invalid."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static Topic parseTopic(String topic) throws ParseException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        requireNonNull(topic);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String trimmedTopic \u003d topic.trim();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (!Topic.isValidTopicName(trimmedTopic)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            throw new ParseException(Topic.MESSAGE_TOPIC_CONSTRAINTS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return new Topic(trimmedTopic);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e topics} into a {@code Set\u003cTopic\u003e}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static Set\u003cTopic\u003e parseTopics(Collection\u003cString\u003e topics) throws ParseException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        requireNonNull(topics);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        final Set\u003cTopic\u003e topicSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        for (String topicName : topics) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            topicSet.add(parseTopic(topicName));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return topicSet;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Parses {@code String timeLimit} into a float"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @throws ParseException if the given {@code timeLimit} is invalid"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static TimeLimit parseTimeLimit(String timeLimit) throws ParseException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        requireNonNull(timeLimit);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String trimmedTimeLimit \u003d timeLimit.trim();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (!TimeLimit.isValidTimeLimit(timeLimit)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            throw new ParseException(TimeLimit.MESSAGE_TIME_LIMIT_CONSTRAINTS);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return new TimeLimit(trimmedTimeLimit);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 31,
      "-": 140,
      "hozongsien": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.state.State;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.Attempt;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaTest;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cCard\u003e PREDICATE_SHOW_ALL_CARDS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyTriviaBundle newData);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the TriviaBundle */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyTriviaBundle getTriviaBundle();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card with the same identity as {@code card} exists in the list of trivia bundle."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasCard(Card card);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given card."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code card} must not already exist in the list of trivia bundle."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    void addCard(Card card);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Deletes the given card."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * The card must exist in the trivia bundle."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    void deleteCard(Card target);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    /** Returns an unmodifiable view of the filtered card\u0027s list */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cCard\u003e getFilteredCardList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered card list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredCardList(Predicate\u003cCard\u003e predicate);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given card {@code target} with {@code editedCard}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateCard(Card target, Card editedCard);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Saves the current trivia bundle state for undo/redo."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitTriviaBundle();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junhui2778"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Returns true if the model has previous trivia bundle states to restore."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "    boolean canUndoTriviaBundle();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junhui2778"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "     * Returns true if the model has undone trivial bundle states to restore."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "    boolean canRedoTriviaBundle();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junhui2778"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "     * Restores the model\u0027s trivial bundle to its previous state."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "    void undoTriviaBundle();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junhui2778"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "     * Restores the model\u0027s trivial bundle to its previously undone state."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "    void redoTriviaBundle();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junhui2778"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Set a test to the trivia application model."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    void startTriviaTest(TriviaTest test);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junhui2778"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Stop a test in the trivia application model."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    void stopTriviaTest();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Match a question to another answer. To be used in a matching test."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    boolean matchQuestionAndAnswer(Index questionIndex, Index answerIndex);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Obtain the trivia test that is running."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    TriviaTest getCurrentRunningTest();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Get the app state that the application is currently in."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    State getAppState();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Return boolean on whether the model in in a testing state."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    boolean isInTestingState();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Returns the result list for trivia test."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    List\u003cTriviaResult\u003e getTriviaResultList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Return the Attempts in trivia test made by the given card."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    List\u003cAttempt\u003e getAttemptsByCard(Card card);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhui2778": 21,
      "JunWei96": 52,
      "-": 91,
      "hozongsien": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.TriviaBundleChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.events.model.TriviaResultsChangedEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.events.ui.CloseTriviaTestViewEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.events.ui.ShowTriviaTestViewEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.state.AppState;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.state.State;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.Attempt;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.ReadOnlyTriviaResults;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaResult;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaResults;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaTest;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.matchtest.MatchTest;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedTriviaBundle versionedTriviaBundle;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cCard\u003e filteredCards;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final TriviaResults triviaResults;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final AppState appState;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private TriviaTest currentRunningTest;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyTriviaBundle triviaBundle,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                        ReadOnlyTriviaResults triviaResults, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, triviaBundle, userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with addressbook and trivia bundle: \" + triviaBundle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedTriviaBundle \u003d new VersionedTriviaBundle(triviaBundle);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredCards \u003d new FilteredList\u003c\u003e(versionedTriviaBundle.getCardList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.triviaResults \u003d new TriviaResults(triviaResults);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        currentRunningTest \u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        appState \u003d new AppState();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this(new AddressBook(), new TriviaBundle(), new TriviaResults(), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyTriviaBundle newData) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedTriviaBundle.resetData(newData);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateTriviaBundleChanged();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyTriviaBundle getTriviaBundle() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedTriviaBundle;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateTriviaBundleChanged() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new TriviaBundleChangedEvent(versionedTriviaBundle));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(card);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedTriviaBundle.hasCard(card);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void deleteCard(Card target) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        versionedTriviaBundle.removeCard(target);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        indicateTriviaBundleChanged();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addCard(Card card) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedTriviaBundle.addCard(card);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredCardList(PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateTriviaBundleChanged();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateCard(Card target, Card editedCard) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedCard);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedTriviaBundle.updateCard(target, editedCard);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        indicateTriviaBundleChanged();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Card} backed by the internal list of"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedTriviaBundle}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cCard\u003e getFilteredCardList() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredCards);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredCardList(Predicate\u003cCard\u003e predicate) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredCards.setPredicate(predicate);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "    public boolean canUndoTriviaBundle() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        return versionedTriviaBundle.canUndo();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "    public boolean canRedoTriviaBundle() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        return versionedTriviaBundle.canRedo();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "    public void undoTriviaBundle() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        versionedTriviaBundle.undo();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        indicateTriviaBundleChanged();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "    public void redoTriviaBundle() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        versionedTriviaBundle.redo();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        indicateTriviaBundleChanged();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitTriviaBundle() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedTriviaBundle.commit();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d App State \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public State getAppState() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return appState.getState();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public boolean isInTestingState() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return appState.getState() \u003d\u003d State.TEST || appState.getState() \u003d\u003d State.MATCH_TEST;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Trivia Tests \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void startTriviaTest(TriviaTest test) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        currentRunningTest \u003d test;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        appState.setAppState(State.MATCH_TEST);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        test.startTest();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        raise(new ShowTriviaTestViewEvent(test.getTestingPage()));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void stopTriviaTest() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        currentRunningTest.stopTest();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        appState.setAppState(State.NORMAL);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        raise(new CloseTriviaTestViewEvent());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        currentRunningTest \u003d null;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public TriviaTest getCurrentRunningTest() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return currentRunningTest;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Matching Tests \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public boolean matchQuestionAndAnswer(Index questionIndex, Index answerIndex) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assert currentRunningTest instanceof MatchTest;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        MatchTest matchTest \u003d (MatchTest) currentRunningTest;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        boolean isCorrectMatch \u003d matchTest.match(questionIndex, answerIndex);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (matchTest.isCompleted()) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            triviaResults.addTriviaResult(new TriviaResult(currentRunningTest));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            raise(new TriviaResultsChangedEvent(triviaResults));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return isCorrectMatch;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Trivia Test Results \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public List\u003cTriviaResult\u003e getTriviaResultList() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return triviaResults.getResultList();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public List\u003cAttempt\u003e getAttemptsByCard(Card card) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return triviaResults.getAttemptsByCard(card);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        return (versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons))"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (versionedTriviaBundle \u003d\u003d null // short circuit for regression compatibility with addressbook"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                    || (versionedTriviaBundle.equals(other.versionedTriviaBundle)"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                    \u0026\u0026 filteredCards.equals(other.filteredCards)))"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u0026\u0026 ((currentRunningTest \u003d\u003d null \u0026\u0026 other.currentRunningTest \u003d\u003d null)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                    || (currentRunningTest !\u003d null \u0026\u0026 currentRunningTest.equals(other.currentRunningTest)));"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhui2778": 10,
      "JunWei96": 99,
      "-": 194
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyTriviaBundle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an Trivia Bundle"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyTriviaBundle {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Returns an unmodifiable view of the cards list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * This list will not contain any duplicate cards."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cCard\u003e getCardList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Returns a new unmodifiable list of cards that is filtered by the given topic."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    ObservableList\u003cCard\u003e getListOfCardFilteredByTopic(Predicate\u003cCard\u003e predicate);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 9,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/TriviaBundle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.card.UniqueCardList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Wrap all the data at the trivia bundle level."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed by (.equals comparison)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class TriviaBundle implements ReadOnlyTriviaBundle {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueCardList cards;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        cards \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public TriviaBundle() {}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public TriviaBundle(ReadOnlyTriviaBundle toBeCopied) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the card list with {@code cards}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code cards} must not contain duplicate cards."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setCards(List\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.cards.setCards(cards);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyTriviaBundle newData) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        setCards(newData.getCardList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    //// card-level operations"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card with the same identity as {@code card} exists in the address book."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(card);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return cards.contains(card);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a card to the trivia bundle."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The card must not already exist in the bundle."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addCard(Card c) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        cards.add(c);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Removes {@code key} from this {@code TriviaBundle}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * {@code key} must exist in the trivia bundle."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void removeCard(Card key) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        cards.remove(key);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given card {@code target} in the list with {@code editedCard}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the trivia bundle."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * The card identity of {@code editedCard} must not be the same as another existing card in the trivia bundle."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateCard(Card target, Card editedCard) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedCard);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        cards.setCard(target, editedCard);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return cards.asUnmodifiableObservableList().size() + \" cards\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cCard\u003e getCardList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return cards.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public ObservableList\u003cCard\u003e getListOfCardFilteredByTopic(Predicate\u003cCard\u003e predicate) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        ObservableList\u003cCard\u003e filteredCards \u003d FXCollections.observableList(getCardList().stream()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .filter(predicate)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredCards);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TriviaBundle // instanceof handles nulls"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 cards.equals(((TriviaBundle) other).cards));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return cards.hashCode();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 18,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.xml\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path triviaBundleFilePath \u003d Paths.get(\"data\" , \"triviabundle.xml\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Path triviaResultsFilePath \u003d Paths.get(\"data\", \"testresult.xml\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(500, 500, 0, 0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getTriviaBundleFilePath() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return triviaBundleFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public Path getTriviaResultsFilePath() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return triviaResultsFilePath;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTriviaBundleFilePath(Path triviaBundleFilePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.triviaBundleFilePath \u003d triviaBundleFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void setTriviaResultsFilePath(Path triviaResultsFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.triviaResultsFilePath \u003d triviaResultsFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u0026\u0026 Objects.equals(triviaBundleFilePath, o.triviaBundleFilePath)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u0026\u0026 Objects.equals(triviaResultsFilePath, o.triviaResultsFilePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 12,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/model/card/Answer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represent an answer to a question."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Answer {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ANSWER_CONSTRAINTS \u003d \"Answer must not be an empty string.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code answer}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param answer A answer."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public Answer(String answer) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(answer);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        checkArgument(isValidAnswer(answer), MESSAGE_ANSWER_CONSTRAINTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.value \u003d answer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid answer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAnswer(String test) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return !test.trim().equals(\"\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Answer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Answer) other).value));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 3,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/card/Card.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.topic.Topic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represent a card in a deck."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Card {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // identity fields"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Question question;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // data fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final Answer answer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final Set\u003cTopic\u003e topics \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public Card(Question question, Answer answer, Set\u003cTopic\u003e topics) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (topics.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            this.topics.add(new Topic(\"NoTopic\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            this.topics.addAll(topics);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Question getQuestion() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Answer getAnswer() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Returns an immutable topic set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public Set\u003cTopic\u003e getTopics() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return Collections.unmodifiableSet(topics);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both cards have the same identity fields."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Card)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Card otherCard \u003d (Card) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return otherCard.getQuestion().equals(getQuestion());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return Objects.hash(question, answer, topics);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\" Question: \")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getQuestion())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Answer: \")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAnswer())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .append(\" Topics: \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        getTopics().forEach(builder::append);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 17,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/card/Question.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represent an question to a card."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Question {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_QUESTION_CONSTRAINTS \u003d \"Question must not be an empty string.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code question}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param question A question."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public Question(String question) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        checkArgument(isValidQuestion(question), MESSAGE_QUESTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.value \u003d question;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid question."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidQuestion(String test) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return !test.trim().equals(\"\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Question"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 value.equals(((Question) other).value));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 3,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/card/QuestionContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * Tests that a {@code Card}\u0027s {@code Question} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class QuestionContainsKeywordsPredicate implements Predicate\u003cCard\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public QuestionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Card card) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(card.getQuestion().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof QuestionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((QuestionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 1,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/card/TopicIsKeywordPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * Tests that a {@code Card}\u0027s {@code Topic} matches any of the keywords given."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class TopicIsKeywordPredicate implements Predicate\u003cCard\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public TopicIsKeywordPredicate(String keyword) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public boolean test(Card card) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return card.getTopics().stream()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .anyMatch(topic -\u003e topic.topicName.toLowerCase().equals(keyword.toLowerCase()));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                || (other instanceof TopicIsKeywordPredicate// instanceof handles nulls"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u0026\u0026 keyword.equals(((TopicIsKeywordPredicate) other).keyword)); // state check"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.topic.Topic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final Set\u003cTopic\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTopic\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Returns an immutable topic set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public Set\u003cTopic\u003e getTags() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 5,
      "-": 115
    }
  },
  {
    "path": "src/main/java/seedu/address/model/state/AppState.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.model.state;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * Defines the state of the application with their respective constraints on the type of command it can run."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class AppState {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private State currentState;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public AppState() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        currentState \u003d State.NORMAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void setAppState(State state) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        currentState \u003d state;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public State getState() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return currentState;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/state/State.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.model.state;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * This represents the different state the application can have."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public enum State {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    NORMAL, TEST, MATCH_TEST"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/test/Attempt.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.model.test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Question;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * A base model for the different kinds of attempts that can be made in different tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * It is also a model for storing the database of attempts made during the various tests."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class Attempt {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    protected final Card attemptedCard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    protected final String answer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    protected final boolean isCorrect;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public Attempt(Card attemptedCard, String answer, boolean isCorrect) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.attemptedCard \u003d attemptedCard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.isCorrect \u003d isCorrect;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public Question getQuestion() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return attemptedCard.getQuestion();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public Card getAttemptedCard() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return attemptedCard;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public String getRawAnswer() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public boolean isCorrect() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return isCorrect;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (!(other instanceof Attempt)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Attempt o \u003d (Attempt) other;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return attemptedCard.equals(o.attemptedCard) \u0026\u0026 answer.equals(o.answer) \u0026\u0026 (isCorrect \u003d\u003d o.isCorrect);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/test/ReadOnlyTriviaResults.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.model.test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * Unmodifiable view of an TriviaResults"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public interface ReadOnlyTriviaResults {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Returns an unmodifiable view of the TriviaResults."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    ObservableList\u003cTriviaResult\u003e getResultList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Returns a list of Attempts made by the given card."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    ObservableList\u003cAttempt\u003e getAttemptsByCard(Card card);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/test/TestType.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.model.test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * Represents all the different kinds of test in 3VIA."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public enum TestType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    MATCH_TEST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String MESSAGE_TEST_TYPE_CONSTRAINTS \u003d \"TestType should belong to one of the defined \""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            + \"TestType enum.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/test/TimeLimit.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.model.test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * Represent the time limit that the user can take for each card."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class TimeLimit {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String MESSAGE_TIME_LIMIT_CONSTRAINTS \u003d \"Time limit, which is in seconds, \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            + \"must be more than 0.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final float value;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public TimeLimit(String value) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        checkArgument(isValidTimeLimit(value), MESSAGE_TIME_LIMIT_CONSTRAINTS);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.value \u003d Float.parseFloat(value);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public float getValue() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Returns if a given string is a valid time limit."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static boolean isValidTimeLimit(String test) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            return Float.parseFloat(test) \u003e 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return \"Time limit: \" + String.valueOf(value);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                || (other instanceof TimeLimit"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u0026\u0026 value \u003d\u003d (((TimeLimit) other).value));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return String.valueOf(value).hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/test/TriviaResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.model.test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.topic.Topic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * A class that is being used to store the data of the trivia test."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class TriviaResult {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String INCOMPLETE_TRIVIA_TEST_MESSAGE \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \"Trivia test have to completed before it can be recorded.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final TestType testType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final Topic topic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final List\u003c? extends Attempt\u003e attempts;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final Date testDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final double duration;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public TriviaResult(TriviaTest triviaTest) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        checkArgument(triviaTest.isCompleted(), INCOMPLETE_TRIVIA_TEST_MESSAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        testType \u003d triviaTest.getTestType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        topic \u003d triviaTest.getTopic();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        attempts \u003d triviaTest.getAttempts();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        testDate \u003d triviaTest.getTestDate();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        duration \u003d triviaTest.getDuration();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public TriviaResult(TestType testType, Topic topic, Date testDate, double duration,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                        List\u003c? extends Attempt\u003e attempts) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.testType \u003d testType;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.topic \u003d topic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.attempts \u003d attempts;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.testDate \u003d testDate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public TestType getTestType() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return testType;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public Topic getTopic() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return topic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public List\u003c? extends Attempt\u003e getAttempts() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return attempts;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public Date getTestDate() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return testDate;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public double getDuration() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (!(other instanceof TriviaResult)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        TriviaResult o \u003d (TriviaResult) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return testType.equals(o.testType) \u0026\u0026 topic.equals(o.topic) \u0026\u0026 testDate.equals(o.testDate)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u0026\u0026 (duration \u003d\u003d o.duration) \u0026\u0026 attempts.equals(o.attempts);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/model/test/TriviaResults.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.model.test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * Contains the mapping of all the test."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class TriviaResults implements ReadOnlyTriviaResults {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final List\u003cTriviaResult\u003e triviaResults;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final HashMap\u003cCard, List\u003cAttempt\u003e\u003e attemptsOfCards;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public TriviaResults() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        triviaResults \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        attemptsOfCards \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Creates a TriviaResult using the ReadOnlyTriviaResults in the {@code toBeCopied}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public TriviaResults(ReadOnlyTriviaResults toBeCopied) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Replaces the contents of the ResultList with {@code persons}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void setTriviaResults(List\u003cTriviaResult\u003e results) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        triviaResults.clear();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        triviaResults.addAll(results);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        attemptsOfCards.clear();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        for (TriviaResult result : results) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            mapCardsToAttempts(result.getAttempts());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Resets the existing data of this {@code TriviaBundleList} with {@code newData}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void resetData(ReadOnlyTriviaResults newData) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        setTriviaResults(newData.getResultList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Adds a triviaResult into the list of triviaResults"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void addTriviaResult(TriviaResult triviaResult) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        requireAllNonNull(triviaResult);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        triviaResults.add(triviaResult);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        mapCardsToAttempts(triviaResult.getAttempts());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Will map cards to attempts for efficient retrieval of attempts by card."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private void mapCardsToAttempts(List\u003c? extends Attempt\u003e attempts) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        for (Attempt attempt : attempts) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            List\u003cAttempt\u003e existingAttemptsByCard \u003d attemptsOfCards.get(attempt.attemptedCard);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            if (existingAttemptsByCard \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                attemptsOfCards.put(attempt.attemptedCard, new ArrayList\u003c\u003e(Arrays.asList(attempt)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                existingAttemptsByCard.add(attempt);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public ObservableList\u003cTriviaResult\u003e getResultList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return FXCollections.unmodifiableObservableList("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                FXCollections.observableArrayList(triviaResults));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public ObservableList\u003cAttempt\u003e getAttemptsByCard(Card card) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return FXCollections.unmodifiableObservableList("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                FXCollections.observableList(attemptsOfCards.get(card)));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                || (other instanceof TriviaResults // instanceof handles nulls"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u0026\u0026 triviaResults.equals(((TriviaResults) other).triviaResults));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/model/test/TriviaTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.model.test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.ReadOnlyTriviaBundle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.TopicIsKeywordPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.topic.Topic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.ui.test.TriviaTestPage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.ui.test.TriviaTestResultPage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * An abstract model for the different kinds tests. Require a Topic and Trivia Bundle to start a test."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public abstract class TriviaTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    protected final Topic topic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    protected final Date testDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    protected final ObservableList\u003cCard\u003e cards;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    protected boolean isCompleted;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    protected double duration;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    protected Timer timer;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public TriviaTest(Topic topic, ReadOnlyTriviaBundle triviaBundle) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.topic \u003d topic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        testDate \u003d new Date();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        duration \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        isCompleted \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        cards \u003d triviaBundle.getListOfCardFilteredByTopic(new TopicIsKeywordPredicate(topic.topicName));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public abstract void startTest();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public abstract void stopTest();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public abstract List\u003c? extends Attempt\u003e getAttempts();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public abstract TestType getTestType();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public abstract Supplier\u003c? extends TriviaTestPage\u003e getTestingPage();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public abstract Supplier\u003c? extends TriviaTestResultPage\u003e getResultPage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public Topic getTopic() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return topic;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public Date getTestDate() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return testDate;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public double getDuration() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public List\u003cCard\u003e getCardsTested() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return cards;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return isCompleted;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/model/test/matchtest/MatchAttempt.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.model.test.matchtest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Answer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.Attempt;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * Represent an attempt to answer the question during a test."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class MatchAttempt extends Attempt {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final Card cardWithAnswer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @param cardWithQuestion Represents the card that is associated to the question."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @param cardWithAnswer Represents the card that is associated to the answer."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public MatchAttempt(Card cardWithQuestion, Card cardWithAnswer) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        super(cardWithQuestion, cardWithAnswer.getAnswer().toString(),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                checkCorrectness(cardWithQuestion, cardWithAnswer));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.cardWithAnswer \u003d cardWithAnswer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public Answer getAnswer() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return cardWithAnswer.getAnswer();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static boolean checkCorrectness(Card cardWithQuestion, Card cardWithAnswer) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return cardWithQuestion.equals(cardWithAnswer);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (!(obj instanceof MatchAttempt)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        MatchAttempt other \u003d (MatchAttempt) obj;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return attemptedCard.equals(other.attemptedCard)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u0026\u0026 cardWithAnswer.equals(other.cardWithAnswer);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/test/matchtest/MatchTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.model.test.matchtest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.events.ui.FlashMatchOutcomeEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.events.ui.ShowTriviaTestResultEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.ReadOnlyTriviaBundle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Answer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Question;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TestType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaTest;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.topic.Topic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.ui.test.TriviaTestPage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.ui.test.TriviaTestResultPage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.ui.test.matchtest.MatchTestPage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.ui.test.matchtest.MatchTestResultPage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * Represents a trivia test that is started by the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * For a {@code MatchTest} to start, there must be more than 1 cards related to the topic that is specified in the test."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class MatchTest extends TriviaTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String MESSAGE_MATCH_TEST_CONSTRAINS \u003d \"Matching test needs more than 1 card with the\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            + \" corresponding topic to proceed.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public final TestType testType \u003d TestType.MATCH_TEST;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final ObservableList\u003cQuestion\u003e shuffledQuestions;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final ObservableList\u003cAnswer\u003e shuffledAnswers;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private List\u003cMatchAttempt\u003e attempts;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public MatchTest(Topic tag, ReadOnlyTriviaBundle triviaBundle) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        super(tag, triviaBundle);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        shuffledQuestions \u003d getQuestions(cards);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        shuffledAnswers \u003d getAnswers(cards);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        attempts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        checkArgument(isValidMatchTest(), MESSAGE_MATCH_TEST_CONSTRAINS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * The logic associated to matching a question and a answer."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @param questionIndex The display index of the question to match."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @param answerIndex The display index of the answer to match."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @return a boolean which signify whether the match is success or failure."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @throws IndexOutOfBoundsException when the given question and answer index is not within the range of"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * existing questions\u0027 and answers\u0027 indexes."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public boolean match(Index questionIndex, Index answerIndex) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        MatchAttempt attempt \u003d addAttempt(questionIndex, answerIndex);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        postOutcomeOfMatch(attempt);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (!attempt.isCorrect()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (isAtLastMatch()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            isCompleted \u003d true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Timer timer \u003d new Timer();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        timer.schedule(new TimerTask() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                    respondToCorrectAttempt(attempt);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                });"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }, UiPart.FLASH_TIME);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public TestType getTestType() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return testType;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public List\u003cMatchAttempt\u003e getAttempts() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return attempts;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Responds to an correct attempt accordingly."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void respondToCorrectAttempt(MatchAttempt attempt) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assert attempt.isCorrect();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        removeCardFromUi(attempt);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (isEndOfTest()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            stopTest();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            EventsCenter.getInstance().post(new ShowTriviaTestResultEvent(getResultPage()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Add an attempt to the matching test."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @param questionIndex The index of the question to match."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @param answerIndex The index of the answer to match."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @return the new Matching attempt."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @throws IndexOutOfBoundsException when the given index is out of range of the given answers or questions."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private MatchAttempt addAttempt(Index questionIndex, Index answerIndex) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Question question \u003d shuffledQuestions.get(questionIndex.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Answer answer \u003d shuffledAnswers.get(answerIndex.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Card cardWithQuestion \u003d cards.stream()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .filter(card -\u003e card.getQuestion().equals(question))"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .orElseThrow(IndexOutOfBoundsException::new);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Card cardWithAnswer \u003d cards.stream()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .filter(card -\u003e card.getAnswer().equals(answer))"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .orElseThrow(IndexOutOfBoundsException::new);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        MatchAttempt newAttempt \u003d new MatchAttempt(cardWithQuestion, cardWithAnswer);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        attempts.add(newAttempt);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return newAttempt;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Remove the involved card that is answered correctly from the UI."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @param attempt The attempt that was made by the user in the matching test."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private void removeCardFromUi(MatchAttempt attempt) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assert attempt.isCorrect(); // Ensure that attempt is correct before removing."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        shuffledQuestions.remove(attempt.getQuestion());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        shuffledAnswers.remove(attempt.getAnswer());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Will create an UI event to indicate on the UI on whether the match is successful or not."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @param attempt The attempt of that match command."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private void postOutcomeOfMatch(MatchAttempt attempt) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        int indexOfQuestion \u003d getQuestions().indexOf(attempt.getQuestion());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        int indexOfAnswer \u003d getAnswers().indexOf(attempt.getAnswer());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        EventsCenter.getInstance().post(new FlashMatchOutcomeEvent(indexOfQuestion, indexOfAnswer,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                attempt.isCorrect()));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private boolean isValidMatchTest() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return getQuestions().size() \u003e 1;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Starts the timer of the matching test."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private void startTimer() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        timer \u003d new Timer();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        DecimalFormat timerFormat \u003d new DecimalFormat(\"#.#\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        TimerTask task \u003d new TimerTask() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                duration \u003d Double.parseDouble(timerFormat.format(duration + 0.1));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                System.out.println(\"Seconds passed: \" + duration);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        };"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        timer.scheduleAtFixedRate(task, 0, 100);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public ObservableList\u003cQuestion\u003e getQuestions() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return this.shuffledQuestions;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Retrieve a randomized modifiable observable list of questions to allow changes in the UI."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @param cards The cards to retrieve the questions from."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @return an observable list of questions"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private ObservableList\u003cQuestion\u003e getQuestions(List\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        List\u003cQuestion\u003e questions \u003d cards.stream()"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .map(Card::getQuestion)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Collections.shuffle(questions);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return FXCollections.observableList(questions);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public ObservableList\u003cAnswer\u003e getAnswers() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return this.shuffledAnswers;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Retrieve a randomized modifiable observable list of answers to allow changes in the UI."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @param cards The cards to retrieve the answers from."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @return an observable list of answers"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private ObservableList\u003cAnswer\u003e getAnswers(List\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        List\u003cAnswer\u003e answers \u003d cards.stream()"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .map(Card::getAnswer)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Collections.shuffle(answers);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return FXCollections.observableList(answers);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private boolean isEndOfTest() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return shuffledQuestions.isEmpty() \u0026\u0026 shuffledAnswers.isEmpty();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private boolean isAtLastMatch() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return shuffledQuestions.size() \u003d\u003d 1 \u0026\u0026 shuffledAnswers.size() \u003d\u003d 1;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void startTest() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        startTimer();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void stopTest() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        timer.cancel();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public Supplier\u003c? extends TriviaTestPage\u003e getTestingPage() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return () -\u003e new MatchTestPage(this);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public Supplier\u003c? extends TriviaTestResultPage\u003e getResultPage() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return () -\u003e new MatchTestResultPage(this);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (!(obj instanceof MatchTest)) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        MatchTest other \u003d (MatchTest) obj;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return cards.equals(other.cards) \u0026\u0026 attempts.equals(other.attempts);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 259
    }
  },
  {
    "path": "src/main/java/seedu/address/model/topic/Topic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.model.topic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * Represents a topic in 3VIA."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTopicName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class Topic {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String MESSAGE_TOPIC_CONSTRAINTS \u003d \"Topic names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String TOPIC_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public final String topicName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Constructs a {@code Topic}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @param topicName A valid topic name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public Topic(String topicName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        requireNonNull(topicName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        checkArgument(isValidTopicName(topicName), MESSAGE_TOPIC_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.topicName \u003d topicName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Returns true if a given string is a valid topic name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static boolean isValidTopicName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return test.matches(TOPIC_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                || (other instanceof Topic // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u0026\u0026 topicName.equals(((Topic) other).topicName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return topicName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return \u0027[\u0027 + topicName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyTriviaBundle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.TriviaBundle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.card.Answer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.card.Question;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.Attempt;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.ReadOnlyTriviaResults;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TestType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaResult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaResults;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.topic.Topic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final Card Q_EARTH_ROUND \u003d new Card(new Question(\"Why is the earth round?\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            new Answer(\"Because of gravity!\"), getTopicSet(\"Physics\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final Card Q_GIT_CLONE \u003d new Card("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            new Question(\"Which git command will get a copy of an online repository to your computer?\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            new Answer(\"git clone\"), getTopicSet(\"Git\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final Card Q_FORCE_FORMULA \u003d new Card(new Question(\"What is the formula for calculating force?\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            new Answer(\"mass * acceleration\"), getTopicSet(\"Physics\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final Card Q_GIT_MERGE \u003d new Card(new Question(\"What are the ways to merge 2 branches?\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            new Answer(\"rebase and merge\"), getTopicSet(\"Git\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final Card Q_CAPITAL_OF_SG \u003d new Card(new Question(\"What is the capital of Singapore?\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            new Answer(\"Singapore\"), getTopicSet(\"GeneralKnowledge\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final Attempt ATTEMPT_ON_EARTH \u003d new Attempt(Q_EARTH_ROUND, \"mass * acceleration\", false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final Attempt ATTEMPT_ON_GIT_CLONE \u003d new Attempt(Q_GIT_CLONE, \"git clone\", false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final Attempt ATTEMPT_ON_FORCE_FORMULA \u003d new Attempt(Q_FORCE_FORMULA, \"mass * acceleration\", true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final Attempt ATTEMPT_ON_GIT_MERGE \u003d new Attempt(Q_GIT_MERGE, \"rebase and master\", true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                getTopicSet(\"friends\")),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                getTopicSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                getTopicSet(\"neighbours\")),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                getTopicSet(\"family\")),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                getTopicSet(\"classmates\")),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                getTopicSet(\"colleagues\"))"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Card[] getSampleCards() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return new Card[] { Q_EARTH_ROUND, Q_GIT_CLONE, Q_FORCE_FORMULA, Q_GIT_MERGE, Q_CAPITAL_OF_SG };"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static TriviaResult[] getSampleResults() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return new TriviaResult[] {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            new TriviaResult(TestType.MATCH_TEST, new Topic(\"Physics\"),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                    new Date(2018 - 1990, 0, 31, 8, 30), 9,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                    Arrays.asList(ATTEMPT_ON_EARTH)),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            new TriviaResult(TestType.MATCH_TEST, new Topic(\"Git\"),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                    new Date(2018 - 1990, 0, 31, 8, 0), 10,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                    Arrays.asList(ATTEMPT_ON_GIT_CLONE, ATTEMPT_ON_GIT_MERGE)),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            new TriviaResult(TestType.MATCH_TEST, new Topic(\"Physics\"),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                    new Date(2018 - 1990, 0, 30, 14, 20), 11.5,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                    Arrays.asList(ATTEMPT_ON_FORCE_FORMULA, ATTEMPT_ON_EARTH))"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyTriviaBundle getSampleTriviaBundle() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        TriviaBundle sampleTriviaBundle \u003d new TriviaBundle();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Card sampleCard : getSampleCards()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleTriviaBundle.addCard(sampleCard);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleTriviaBundle;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static ReadOnlyTriviaResults getSampleTriviaResults() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        TriviaResults sampleTriviaResults \u003d new TriviaResults();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        for (TriviaResult result : getSampleResults()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            sampleTriviaResults.addTriviaResult(result);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return sampleTriviaResults;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Returns a topic set containing the list of strings given."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static Set\u003cTopic\u003e getTopicSet(String... strings) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .map(Topic::new)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 57,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.TriviaBundleChangedEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.events.model.TriviaResultsChangedEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyTriviaBundle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.ReadOnlyTriviaResults;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public interface Storage extends AddressBookStorage, TriviaBundleStorage, TriviaResultsStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getTriviaBundleFilePath();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    Path getTriviaResultsFilePath();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyTriviaBundle\u003e readTriviaBundle() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    Optional\u003cReadOnlyTriviaResults\u003e readTriviaResults() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveTriviaBundle(ReadOnlyTriviaBundle triviaBundle) throws IOException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    void saveTriviaResults(ReadOnlyTriviaResults triviaResults) throws IOException;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current version of the Address Book to the hard disk."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    void handleAddressBookChangedEvent(AddressBookChangedEvent event);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current version of the Trivia Bundle to the hard disk."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    void handleTriviaBundleChangedEvent(TriviaBundleChangedEvent event);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Saves the latest version of the TriviaResults to the hard disk."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    void handleTriviaResultsChangedEvent(TriviaResultsChangedEvent event);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 21,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.TriviaBundleChangedEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.events.model.TriviaResultsChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyTriviaBundle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.ReadOnlyTriviaResults;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook and TriviaBundle data in local storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String MESSAGE_DATA_FILE_NOT_FOUND \u003d \"Data file not found. Will be starting with a sample %s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String MESSAGE_PROBLEM_READING_FILE \u003d \"Problem while reading from the file. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                + \"Will be starting with an empty %s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String MESSAGE_INCORRECT_DATA_FILE \u003d \"Data file not in the correct format. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            + \"Will be starting with an empty %s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private TriviaBundleStorage triviaBundleStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private TriviaResultsStorage triviaResultsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, TriviaBundleStorage triviaBundleStorage,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                          TriviaResultsStorage triviaResultsStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.triviaResultsStorage \u003d triviaResultsStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.triviaBundleStorage \u003d triviaBundleStorage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            saveAddressBook(event.data);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TriviaBundle methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getTriviaBundleFilePath() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return triviaBundleStorage.getTriviaBundleFilePath();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyTriviaBundle\u003e readTriviaBundle() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return readTriviaBundle(triviaBundleStorage.getTriviaBundleFilePath());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyTriviaBundle\u003e readTriviaBundle(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return triviaBundleStorage.readTriviaBundle(filePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveTriviaBundle(ReadOnlyTriviaBundle triviaBundle) throws IOException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        saveTriviaBundle(triviaBundle, triviaBundleStorage.getTriviaBundleFilePath());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveTriviaBundle(ReadOnlyTriviaBundle triviaBundle, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        triviaBundleStorage.saveTriviaBundle(triviaBundle, filePath);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleTriviaBundleChangedEvent(TriviaBundleChangedEvent event) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            saveTriviaBundle(event.data);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TriviaTest Results methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public Path getTriviaResultsFilePath() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return triviaResultsStorage.getTriviaResultsFilePath();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public Optional\u003cReadOnlyTriviaResults\u003e readTriviaResults() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return readTriviaResults(triviaResultsStorage.getTriviaResultsFilePath());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public Optional\u003cReadOnlyTriviaResults\u003e readTriviaResults(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        logger.fine(\"Attempting to read data from results file: \" + filePath);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return triviaResultsStorage.readTriviaResults(filePath);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void saveTriviaResults(ReadOnlyTriviaResults triviaResults) throws IOException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        saveTriviaResults(triviaResults, triviaResultsStorage.getTriviaResultsFilePath());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void saveTriviaResults(ReadOnlyTriviaResults triviaResults, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        logger.fine(\"Attempting to write to trivia test results file \" + filePath);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        triviaResultsStorage.saveTriviaResults(triviaResults, filePath);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void handleTriviaResultsChangedEvent(TriviaResultsChangedEvent event) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            saveTriviaResults(event.data);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 53,
      "-": 134
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/TriviaResultsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.ReadOnlyTriviaResults;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaResults;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * Represents a storage for {@link TriviaResults}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public interface TriviaResultsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    Path getTriviaResultsFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Returns TriviaResults data as a {@link ReadOnlyTriviaResults}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    Optional\u003cReadOnlyTriviaResults\u003e readTriviaResults() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @see #getTriviaResultsFilePath() ()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    Optional\u003cReadOnlyTriviaResults\u003e readTriviaResults(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Saves the given {@link ReadOnlyTriviaResults} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @param triviaResults cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    void saveTriviaResults(ReadOnlyTriviaResults triviaResults) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @see #saveTriviaResults(ReadOnlyTriviaResults)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    void saveTriviaResults(ReadOnlyTriviaResults triviaResults, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedAttempt.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.ifNullThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Answer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.Attempt;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * JAXB-friendly version of the Trivia Test\u0027s Attempt."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class XmlAdaptedAttempt {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Trivia attempt\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private XmlAdaptedCard attemptedCard;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private String answer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private String isCorrect;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Constructs an XmlAdaptedAttempt."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public XmlAdaptedAttempt() {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Constructs a {@code XmlAdaptedAttempt} with the given parameters."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public XmlAdaptedAttempt(XmlAdaptedCard attemptedCard, String answer, String isCorrect) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.attemptedCard \u003d attemptedCard;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.isCorrect \u003d isCorrect;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Converts a given Attempt into this class for JAXB use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public XmlAdaptedAttempt(Attempt source) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        attemptedCard \u003d new XmlAdaptedCard(source.getAttemptedCard());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        answer \u003d source.getRawAnswer();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        isCorrect \u003d String.valueOf(source.isCorrect());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Converts this jaxb-friendly adapted attempt object into the model\u0027s Attempt object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted attempt"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public Attempt toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        ifNullThrows(attemptedCard,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Card.class.getSimpleName())));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        ifNullThrows(answer,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Answer.class.getSimpleName())));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        ifNullThrows(isCorrect,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"isCorrect\")));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (!isCorrect.equals(\"true\") \u0026\u0026 !isCorrect.equals(\"false\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            throw new IllegalValueException(Messages.MESSAGE_INVALID_BOOLEAN_FOR_ISCORRECT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return new Attempt(attemptedCard.toModelType(), answer, Boolean.valueOf(isCorrect));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.card.Answer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.card.Question;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.topic.Topic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the Card."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedCard {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Card\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String question;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private String answer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private List\u003cXmlAdaptedTopic\u003e topic \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedCard."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedCard() {}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedCard} with the given card details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public XmlAdaptedCard(String question, String answer, List\u003cXmlAdaptedTopic\u003e topic) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (topic !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            this.topic \u003d new ArrayList\u003c\u003e(topic);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Card into this class for JAXB use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedCard"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedCard(Card source) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        question \u003d source.getQuestion().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        answer \u003d source.getAnswer().value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        topic \u003d source.getTopics().stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .map(XmlAdaptedTopic::new)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted card object into the model\u0027s Card object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted card"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Card toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        final List\u003cTopic\u003e cardTopics \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        for (XmlAdaptedTopic topic : topic) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            cardTopics.add(topic.toModelType());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (question \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                    Question.class.getSimpleName()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Question.isValidQuestion(question)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Question.MESSAGE_QUESTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        final Question modelQuestion \u003d new Question(question);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (answer \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Answer.class.getSimpleName()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Answer.isValidAnswer(answer)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Answer.MESSAGE_ANSWER_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        final Answer modelAnswer \u003d new Answer(answer);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        final Set\u003cTopic\u003e modelTopics \u003d new HashSet\u003c\u003e(cardTopics);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return new Card(modelQuestion, modelAnswer, modelTopics);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedCard)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedCard otherCard \u003d (XmlAdaptedCard) other;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(question, otherCard.question)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(answer, otherCard.answer)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u0026\u0026 topic.equals(otherCard.topic);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 14,
      "-": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.topic.Topic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the Person."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPerson {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private List\u003cXmlAdaptedTopic\u003e topic \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson() {}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public XmlAdaptedPerson(String name, String phone, String email, String address, List\u003cXmlAdaptedTopic\u003e topic) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (topic !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            this.topic \u003d new ArrayList\u003c\u003e(topic);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        topic \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .map(XmlAdaptedTopic::new)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        final List\u003cTopic\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        for (XmlAdaptedTopic tag : topic) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        final Set\u003cTopic\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedPerson)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherPerson.email)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(address, otherPerson.address)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u0026\u0026 topic.equals(otherPerson.topic);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 11,
      "-": 126
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedTopic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.topic.Topic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * JAXB-friendly adapted version of the Topic."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class XmlAdaptedTopic {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private String topicName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedTag."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public XmlAdaptedTopic() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Constructs a {@code XmlAdaptedTag} with the given {@code topicName}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public XmlAdaptedTopic(String topicName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.topicName \u003d topicName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Tag into this class for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public XmlAdaptedTopic(Topic source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        topicName \u003d source.topicName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Converts this jaxb-friendly adapted topic object into the model\u0027s Tag object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public Topic toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (!Topic.isValidTopicName(topicName)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            throw new IllegalValueException(Topic.MESSAGE_TOPIC_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return new Topic(topicName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (!(other instanceof XmlAdaptedTopic)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return topicName.equals(((XmlAdaptedTopic) other).topicName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 17,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedTriviaResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.ifNullThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.Attempt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TestType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.topic.Topic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * JAXB-friendly version of the TriviaResult."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class XmlAdaptedTriviaResult {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Trivia Test\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private String testType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private String topic;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private String duration;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private List\u003cXmlAdaptedAttempt\u003e attempt;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Constructs an XmlAdaptedTriviaResult."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public XmlAdaptedTriviaResult() {}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Constructs an {@code XmlAdaptedTriviaResult} with the given card details."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public XmlAdaptedTriviaResult(String testType, String topic, String date,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                                  String duration, List\u003cXmlAdaptedAttempt\u003e attempt) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.testType \u003d testType;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.topic \u003d topic;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.attempt \u003d new ArrayList\u003c\u003e(attempt);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Converts a given Card into this class for JAXB use."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedCard"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public XmlAdaptedTriviaResult(TriviaResult source) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        testType \u003d source.getTestType().toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        topic \u003d source.getTopic().topicName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        date \u003d DateUtil.format(source.getTestDate());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        duration \u003d String.valueOf(source.getDuration());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        attempt \u003d source.getAttempts().stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .map(XmlAdaptedAttempt::new)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Converts this jaxb-friendly adapted card object into the model\u0027s TriviaResult object."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted card"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public TriviaResult toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        ifNullThrows(testType, new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                TestType.class.getSimpleName())));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        ifNullThrows(topic, new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                Topic.class.getSimpleName())));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        ifNullThrows(date, new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                Date.class.getSimpleName())));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        ifNullThrows(duration, new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Duration\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /** Parse attempts */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        final List\u003cAttempt\u003e attempts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        for (XmlAdaptedAttempt attempt : attempt) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            attempts.add(attempt.toModelType());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /** Parse testType */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        final TestType testTypeEnum;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            testTypeEnum \u003d TestType.valueOf(testType);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            throw new IllegalValueException(TestType.MESSAGE_TEST_TYPE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /** Parse topic */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (!Topic.isValidTopicName(topic)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            throw new IllegalValueException(Topic.MESSAGE_TOPIC_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        final Topic modelTopic \u003d new Topic(topic);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /** Parse date */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        final Date modelDate;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            modelDate \u003d DateUtil.parse(date);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            throw new IllegalValueException(DateUtil.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /** Parse duration */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        final double modelDuration;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            modelDuration \u003d Double.parseDouble(duration);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            throw new IllegalValueException(\"Duration: \" + NumberFormatException.class.getSimpleName());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return new TriviaResult(testTypeEnum, modelTopic, modelDate, modelDuration, attempts);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 123
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                 FileNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"AddressBook file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(filePath,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(xmlAddressBook.toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableAddressBook(addressBook));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 2,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlFileStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores addressbook data in an XML file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlFileStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given addressbook data to the specified file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static \u003cT\u003e void saveDataToFile(Path file, T data)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            XmlUtil.saveDataToFile(file, data);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns address book in the file or an empty address book"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static \u003cT\u003e T loadDataFromSaveFile(Path file, Class\u003cT\u003e classToConvert) throws DataConversionException,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                            FileNotFoundException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            return XmlUtil.getDataFromFile(file, classToConvert);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 4,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableTriviaResults.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.ReadOnlyTriviaResults;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaResults;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * An Immutable TriviaResults that is serializable to XML format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "@XmlRootElement(name \u003d \"testresult\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class XmlSerializableTriviaResults {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private List\u003cXmlAdaptedTriviaResult\u003e results;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Creates an empty XmlSerializableTriviaBundle."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public XmlSerializableTriviaResults() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        results \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public XmlSerializableTriviaResults(ReadOnlyTriviaResults src) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        results.addAll(src.getResultList().stream()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .map(XmlAdaptedTriviaResult::new)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Converts this triviabundle into the model\u0027s {@code TriviaBundle} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * {@code XmlAdaptedCard}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public TriviaResults toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        TriviaResults triviaResults \u003d new TriviaResults();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        for (XmlAdaptedTriviaResult r : results) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            TriviaResult result \u003d r.toModelType();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            triviaResults.addTriviaResult(result);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return triviaResults;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (!(other instanceof XmlSerializableTriviaResults)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return results.equals(((XmlSerializableTriviaResults) other).results);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlTriviaBundleStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyTriviaBundle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access TriviaBundle data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlTriviaBundleStorage implements TriviaBundleStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlTriviaBundleStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlTriviaBundleStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getTriviaBundleFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyTriviaBundle\u003e readTriviaBundle() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return readTriviaBundle(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readTriviaBundle()}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyTriviaBundle\u003e readTriviaBundle(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"TriviaBundle file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlSerializableTriviaBundle xmlTriviaBundle \u003d XmlFileStorage.loadDataFromSaveFile(filePath,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                XmlSerializableTriviaBundle.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(xmlTriviaBundle.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveTriviaBundle(ReadOnlyTriviaBundle triviaBundle) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        saveTriviaBundle(triviaBundle, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveTriviaBundle(ReadOnlyTriviaBundle)}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveTriviaBundle(ReadOnlyTriviaBundle triviaBundle, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(triviaBundle);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableTriviaBundle(triviaBundle));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 2,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlTriviaResultsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.ReadOnlyTriviaResults;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * A class to access TriviaResults data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class XmlTriviaResultsStorage implements TriviaResultsStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlTriviaResultsStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public XmlTriviaResultsStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public Path getTriviaResultsFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public Optional\u003cReadOnlyTriviaResults\u003e readTriviaResults() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return readTriviaResults(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Similar to {@link #readTriviaResults()} ()}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public Optional\u003cReadOnlyTriviaResults\u003e readTriviaResults(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            logger.info(\"TriviaResults file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlSerializableTriviaResults xmlTriviaResult \u003d XmlFileStorage.loadDataFromSaveFile(filePath,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                XmlSerializableTriviaResults.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            return Optional.of(xmlTriviaResult.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void saveTriviaResults(ReadOnlyTriviaResults triviaResults) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        saveTriviaResults(triviaResults, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Similar to {@link #saveTriviaResults(ReadOnlyTriviaResults)}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void saveTriviaResults(ReadOnlyTriviaResults triviaResults, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        requireNonNull(triviaResults);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableTriviaResults(triviaResults));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import static seedu.address.commons.events.ExtraInformationDisplay.BROWSER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import static seedu.address.commons.events.ExtraInformationDisplay.IMPORT_HELP_DISPLAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.commons.events.ExtraInformationDisplay;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.events.ui.CloseTriviaTestViewEvent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.commons.events.ui.DisplayBrowserEventChangedEvent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.commons.events.ui.DisplayImportHelpChangedEvent;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.commons.events.ui.ExtraInformationDisplayChangeEvent;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.events.ui.ShowTriviaTestResultEvent;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.events.ui.ShowTriviaTestViewEvent;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.ui.home.Homepage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.ui.test.TriviaTestPage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.ui.test.TriviaTestResultPage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Homepage homePage;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private TriviaTestPage triviaTestPage;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private TriviaTestResultPage triviaTestResultPage;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private StackPane displayPagePlaceHolder;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void fillInnerParts() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        homePage \u003d new Homepage(logic);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        displayPagePlaceHolder.getChildren().add(homePage.getRoot());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void releaseResources() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        homePage.releaseResources();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Will change the scene displayed in {@code displayPagePlaceHolder} according to the given parameter."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private void changeToScene(UiPart\u003cRegion\u003e region) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        displayPagePlaceHolder.getChildren().clear();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        displayPagePlaceHolder.getChildren().add(region.getRoot());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private void handleShowTriviaTestViewEvent(ShowTriviaTestViewEvent event) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        triviaTestPage \u003d event.getTriviaTestPage().get();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        changeToScene(triviaTestPage);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private void handleShowTriviaTestResultPage(ShowTriviaTestResultEvent event) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        triviaTestResultPage \u003d event.getTriviaTestResultPage().get();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        changeToScene(triviaTestResultPage);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private void handleCloseTriviaTestViewEvent(CloseTriviaTestViewEvent event) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        changeToScene(homePage);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    private void handleExtraInfomationDisplayChangeEvent(ExtraInformationDisplayChangeEvent event) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        raiseExtraInformationToDisplayEventsFor(event.toDisplay());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "     * Raises appropriate events to display desired extra information."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "     * @param extraInfo The extra information to display."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    private void raiseExtraInformationToDisplayEventsFor(ExtraInformationDisplay extraInfo) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        if (extraInfo \u003d\u003d IMPORT_HELP_DISPLAY) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "            raise(new DisplayImportHelpChangedEvent(true));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "            raise(new DisplayBrowserEventChangedEvent(false));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        } else if (extraInfo \u003d\u003d BROWSER) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "            raise(new DisplayImportHelpChangedEvent(false));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "            raise(new DisplayBrowserEventChangedEvent(true));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 47,
      "-": 184,
      "hozongsien": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.events.model.TriviaBundleChangedEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar syncStatus;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar saveLocationStatus;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        setSaveLocation(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSaveLocation(String location) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e saveLocationStatus.setText(location));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSyncStatus(String status) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e syncStatus.setText(status));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent(AddressBookChangedEvent abce) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void handleTriviaBundleChangedEvent(TriviaBundleChangedEvent abce) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 9,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.animation.Animation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.animation.Interpolator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.animation.Transition;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.core.AsyncEventsCenter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final int FLASH_TIME \u003d 750; // 0.75 second"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises the event via {@link EventsCenter#post(BaseEvent)}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param event"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void raise(BaseEvent event) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(event);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Registers the object as an event handler at the {@link EventsCenter}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param handler usually {@code this}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void registerAsAnEventHandler(Object handler) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(handler);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        AsyncEventsCenter.getInstance().registerHandler(handler);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * A quick flash of a specified color at a certain region of the UI."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @param region The region where the flash is."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @param color The color of the flash."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void flashBackgroundColor(Region region, Color color) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        final Animation animation \u003d new Transition() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                setCycleDuration(Duration.millis(FLASH_TIME));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                setInterpolator(Interpolator.EASE_OUT);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            protected void interpolate(double frac) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                Color vColor \u003d new Color(color.getRed(), color.getGreen(), color.getBlue(),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                        color.getOpacity() - frac);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                region.setBackground(new Background(new BackgroundFill(vColor,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                        CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        };"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        animation.play();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 37,
      "-": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/home/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.ui.home;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.CardPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.commons.events.ui.DisplayBrowserEventChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PAGE \u003d \"default.html\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \"https://www.google.com.sg/search?q\u003d\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String FXML \u003d \"/home/BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanel() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadPersonPage(Person person) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + person.getName().fullName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    private void loadCardPage(Card card) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + card.getQuestion().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(defaultPage.toExternalForm());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Frees resources allocated to the browser."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        browser \u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPersonPage(event.getNewSelection());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCardPanelSelectionChangedEvent(CardPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        loadCardPage(event.getNewSelection());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    private void handleDisplayBrowserEventChangedEvent(DisplayBrowserEventChangedEvent event) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        browser.setVisible(event.isBrowserVisible());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 4,
      "-": 80,
      "hozongsien": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/home/CardListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.ui.home;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.commons.events.ExtraInformationDisplay;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.CardPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.commons.events.ui.ExtraInformationDisplayChangeEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of cards."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class CardListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String FXML \u003d \"/home/CardListPanel.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CardListPanel.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cCard\u003e cardListView;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public CardListPanel(ObservableList\u003cCard\u003e cardList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        setConnections(cardList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setConnections(ObservableList\u003cCard\u003e cardList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        cardListView.setItems(cardList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        cardListView.setCellFactory(listView -\u003e new CardListViewCell());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        cardListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                        logger.fine(\"Selection in card list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                        raise(new CardPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "                        raise(new ExtraInformationDisplayChangeEvent(ExtraInformationDisplay.BROWSER));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Scrolls to the {@code CardView} at the {@code index} and selects it."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            cardListView.scrollTo(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            cardListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Card} using a {@code CardView}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    class CardListViewCell extends ListCell\u003cCard\u003e {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Card card, boolean empty) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(card, empty);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || card \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new CardView(card, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 3,
      "-": 73,
      "hozongsien": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/home/CardView.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.ui.home;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Card}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CardView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String FXML \u003d \"/home/CardView.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Card card;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private HBox cardViewPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label question;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label answer;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private FlowPane topics;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CardView(Card card, int displayedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.card \u003d card;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        question.setText(card.getQuestion().value);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        answer.setText(card.getAnswer().value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        card.getTopics().forEach(topic -\u003e topics.getChildren().add(new Label(topic.topicName)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CardView)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        CardView view \u003d (CardView) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(view.id.getText())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 card.equals(view.card);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 7,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/home/Homepage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.ui.home;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * The default landing page of the application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class Homepage extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String FXML \u003d \"/home/Homepage.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    private ImportHelpDisplay importHelpDisplay;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private CardListPanel cardListPanel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    private StackPane extraInformationPlaceholder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private StackPane cardListPanelPlaceholder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public Homepage(Logic logic) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        importHelpDisplay \u003d new ImportHelpDisplay();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        extraInformationPlaceholder.getChildren().add(importHelpDisplay.getRoot());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        browserPanel \u003d new BrowserPanel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        extraInformationPlaceholder.getChildren().add(browserPanel.getRoot()); // overlays importHelpDisplay"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        cardListPanel \u003d new CardListPanel(logic.getFilteredCardList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        cardListPanelPlaceholder.getChildren().add(cardListPanel.getRoot());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public CardListPanel getCardListPanel() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return cardListPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void releaseResources() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        browserPanel.freeResources();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 45,
      "hozongsien": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/home/ImportHelpDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "package seedu.address.ui.home;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.commons.events.ui.DisplayImportHelpChangedEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hozongsien"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hozongsien"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "public class ImportHelpDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ImportHelpDisplay.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    private static final String FXML \u003d \"/home/ImportHelpDisplay.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    private static final String IMPORT_FORMAT \u003d \"\u003cTag\u003e\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "            + \"Question1 Answer1\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "            + \"Question2 Answer2\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "            + \"Question3 Answer3\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    private TextArea importHelp;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public ImportHelpDisplay() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        importHelp.setText(IMPORT_FORMAT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    private void handleDisplayImportHelpEvent(DisplayImportHelpChangedEvent event) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        importHelp.setVisible(event.isImportHelpDisplayVisible());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hozongsien": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/home/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.ui.home;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String FXML \u003d \"/home/PersonListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.topicName)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 4,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/home/PersonListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.ui.home;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String FXML \u003d \"/home/PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        setConnections(personList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setConnections(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                        raise(new PersonPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/test/TriviaTestPage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.ui.test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * The page that shows up when the user is in a trivia test."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public abstract class TriviaTestPage extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public TriviaTestPage(String filePath) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        super(filePath);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/test/TriviaTestResultPage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.ui.test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * The page that shows up after the user has completed a trivia test."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class TriviaTestResultPage extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public TriviaTestResultPage(String filePath) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        super(filePath);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/test/matchtest/AnswerListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.ui.test.matchtest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.events.ui.FlashMatchOutcomeEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Answer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * The panel which contains all the answers in a particular test."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class AnswerListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String FXML \u003d \"/test/matchtest/AnswerListPanel.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AnswerListPanel.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private ListView\u003cAnswer\u003e matchTestAnswerListView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public AnswerListPanel(ObservableList\u003cAnswer\u003e answerList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        setConnections(answerList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private void setConnections(ObservableList\u003cAnswer\u003e answerList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.matchTestAnswerListView.setItems(answerList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        matchTestAnswerListView.setCellFactory(listView -\u003e new AnswerListViewCell());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private void handleFlashMatchOutcomeEvent(FlashMatchOutcomeEvent event) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        matchTestAnswerListView.setCellFactory(listView -\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new AnswerListViewCell(event.indexOfAnswer, event.isCorrect));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Timer timer \u003d new Timer();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        timer.schedule(new TimerTask() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                Platform.runLater(() -\u003e matchTestAnswerListView.setCellFactory(listView -\u003e new AnswerListViewCell()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            };"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }, UiPart.FLASH_TIME);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Card} using a {@code AnswerView}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    class AnswerListViewCell extends ListCell\u003cAnswer\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        private Integer indexOfAnswer;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        private boolean isCorrect;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        public AnswerListViewCell() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            indexOfAnswer \u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "         * Used for defining which cell to flash, with the boolean whether it is correct."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "         * @param indexOfAnswer The targetIndex that is needed to be flashed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "         * @param isCorrect Whether the matching card is correct."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "         */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        public AnswerListViewCell(int indexOfAnswer, boolean isCorrect) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            this.indexOfAnswer \u003d indexOfAnswer;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            this.isCorrect \u003d isCorrect;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        protected void updateItem(Answer answer, boolean empty) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            super.updateItem(answer, empty);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            if (empty || answer \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                if (indexOfAnswer \u003d\u003d null || indexOfAnswer !\u003d getIndex()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                    setGraphic(new AnswerView(answer, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                    setGraphic(new AnswerView(answer, getIndex() + 1, isCorrect).getRoot());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/test/matchtest/AnswerView.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.ui.test.matchtest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Answer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * An UI component to display information of {@code Answer}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class AnswerView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String FXML \u003d \"/test/matchtest/AnswerView.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public final Answer answer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AnswerView.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private HBox answerViewPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Label answerText;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public AnswerView(Answer answer, int displayedIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        answerText.setText(answer.value);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public AnswerView(Answer answer, int displayedIndex, boolean isCorrect) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        answerText.setText(answer.value);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (isCorrect) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            this.flashBackgroundColor(answerViewPane, new Color(0, 1, 0, 1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            this.flashBackgroundColor(answerViewPane, new Color(1, 0, 0, 1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (!(other instanceof AnswerView)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        AnswerView card \u003d (AnswerView) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u0026\u0026 answer.equals(card.answer);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/test/matchtest/MatchAttemptList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.ui.test.matchtest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.matchtest.MatchAttempt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.matchtest.MatchTest;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * A section of the matching result page which shows the list of attempts made the the user in the matching test."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class MatchAttemptList extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String FXML \u003d \"/test/matchtest/MatchAttemptList.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(MatchAttemptList.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private ListView\u003cMatchAttempt\u003e matchAttemptView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public MatchAttemptList(MatchTest matchTest) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        setConnections(FXCollections.observableArrayList(matchTest.getAttempts()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private void setConnections(ObservableList\u003cMatchAttempt\u003e attemptList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        matchAttemptView.setItems(attemptList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        matchAttemptView.setCellFactory(listView -\u003e new AttemptListViewCell());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Attempt} using a {@code MatchAttemptView}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    class AttemptListViewCell extends ListCell\u003cMatchAttempt\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        protected void updateItem(MatchAttempt attempt, boolean empty) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            super.updateItem(attempt, empty);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            if (empty || attempt \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                setGraphic(new MatchAttemptView(attempt, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/test/matchtest/MatchAttemptView.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.ui.test.matchtest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.commons.util.AppUtil.getImage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.matchtest.MatchAttempt;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * An UI component that displays information of a {@code MatchAttempt}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class MatchAttemptView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String FXML \u003d \"/test/matchtest/MatchAttemptView.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final MatchAttempt attempt;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Label attemptText;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private ImageView correctnessIcon;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public MatchAttemptView(MatchAttempt attempt, int displayedIndex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.attempt \u003d attempt;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        attemptText.setText(attempt.getQuestion() + \" ---\u003e \" + attempt.getAnswer());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (attempt.isCorrect()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            correctnessIcon.setImage(getImage(\"/images/tick_icon.png\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            correctnessIcon.setImage(getImage(\"/images/cross_icon.png\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/test/matchtest/MatchTestPage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.ui.test.matchtest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.matchtest.MatchTest;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.ui.test.TriviaTestPage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * The page that shows up when the user is in a matching test."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class MatchTestPage extends TriviaTestPage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String FXML \u003d \"/test/matchtest/MatchTestPage.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private QuestionListPanel questionListPanel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private AnswerListPanel answerListPanel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private StackPane matchTestQuestionListPanelPlaceholder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private StackPane matchTestAnswerListPanelPlaceholder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public MatchTestPage(MatchTest matchTest) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        questionListPanel \u003d new QuestionListPanel(matchTest.getQuestions());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        matchTestQuestionListPanelPlaceholder.getChildren().add(questionListPanel.getRoot());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        answerListPanel \u003d new AnswerListPanel(matchTest.getAnswers());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        matchTestAnswerListPanelPlaceholder.getChildren().add(answerListPanel.getRoot());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/test/matchtest/MatchTestResultPage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.ui.test.matchtest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.matchtest.MatchTest;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.ui.test.TriviaTestResultPage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * The page that shows up after the user has completed a matching test."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class MatchTestResultPage extends TriviaTestResultPage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String FXML \u003d \"/test/matchtest/MatchTestResultPage.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final MatchTest matchTest;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final MatchAttemptList matchAttemptList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Label testDateText;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Label durationText;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Label topicText;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Label numOfCardsText;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Label numOfAttemptsText;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private StackPane attemptListPlaceholder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public MatchTestResultPage(MatchTest matchTest) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.matchTest \u003d matchTest;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        testDateText.setText(DateUtil.format(matchTest.getTestDate()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        durationText.setText(String.valueOf(matchTest.getDuration()) + \"s\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        topicText.setText(matchTest.getTopic().topicName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        numOfCardsText.setText(String.valueOf(matchTest.getCardsTested().size()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        numOfAttemptsText.setText(String.valueOf(matchTest.getAttempts().size()) + \" Attempts\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        matchAttemptList \u003d new MatchAttemptList(matchTest);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        attemptListPlaceholder.getChildren().add(matchAttemptList.getRoot());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/test/matchtest/QuestionListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.ui.test.matchtest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.events.ui.FlashMatchOutcomeEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Question;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * The panel which contains all the questions in a particular test."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class QuestionListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String FXML \u003d \"/test/matchtest/QuestionListPanel.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(QuestionListPanel.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private ListView\u003cQuestion\u003e matchTestQuestionListView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public QuestionListPanel(ObservableList\u003cQuestion\u003e questionList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        setConnections(questionList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private void setConnections(ObservableList\u003cQuestion\u003e questionList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.matchTestQuestionListView.setItems(questionList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        matchTestQuestionListView.setCellFactory(listView -\u003e new QuestionListViewCell());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private void handleFlashMatchOutcomeEvent(FlashMatchOutcomeEvent event) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        matchTestQuestionListView.setCellFactory(listView -\u003e new QuestionListViewCell(event.indexOfQuestion,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                event.isCorrect));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Timer timer \u003d new Timer();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        timer.schedule(new TimerTask() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                Platform.runLater(() -\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                        matchTestQuestionListView.setCellFactory(listView -\u003e new QuestionListViewCell()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            };"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }, UiPart.FLASH_TIME);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Card} using a {@code QuestionView}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    class QuestionListViewCell extends ListCell\u003cQuestion\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        private Integer indexOfQuestion;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        private boolean isCorrect;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        public QuestionListViewCell() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            indexOfQuestion \u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "         * Used for defining which cell to flash, with the boolean whether it is correct."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "         * @param indexOfQuestion The targetIndex that is needed to be flashed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "         * @param isCorrect Whether the matching card is correct."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "         */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        public QuestionListViewCell(int indexOfQuestion, boolean isCorrect) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            this.indexOfQuestion \u003d indexOfQuestion;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            this.isCorrect \u003d isCorrect;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        protected void updateItem(Question question, boolean empty) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            super.updateItem(question, empty);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            if (empty || question \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                if (indexOfQuestion \u003d\u003d null || indexOfQuestion !\u003d getIndex()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                    setGraphic(new QuestionView(question, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                    setGraphic(new QuestionView(question, getIndex() + 1, isCorrect).getRoot());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/test/matchtest/QuestionView.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.ui.test.matchtest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Question;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * An UI component to display information of {@code Question}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class QuestionView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String FXML \u003d \"/test/matchtest/QuestionView.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public final Question question;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private HBox questionViewPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Label questionText;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public QuestionView(Question question, int displayedIndex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        questionText.setText(question.value);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public QuestionView(Question question, int displayedIndex, boolean isCorrect) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        questionText.setText(question.value);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (isCorrect) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            this.flashBackgroundColor(questionViewPane, new Color(0, 1, 0, 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            this.flashBackgroundColor(questionViewPane, new Color(1, 0, 0, 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (!(other instanceof QuestionView)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        QuestionView card \u003d (QuestionView) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u0026\u0026 question.equals(card.question);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 63
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ".label-bright-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    -fx-font-size: 22pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ".split-pane:horizontal .split-pane-divider, .split-pane:vertical .split-pane-divider {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ".list-cell:filled:selected #cardPane #cardViewPane {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "#cardPane #cardViewPane {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "#tags, #topics {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "#tags .label, #topics .label {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 13,
      "-": 346
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cStackPane fx:id\u003d\"displayPagePlaceHolder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 1,
      "-": 51
    }
  },
  {
    "path": "src/main/resources/view/home/BrowserPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "\u003cStackPane fx:id\u003d\"Browser\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cWebView fx:id\u003d\"browser\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "hozongsien": 1
    }
  },
  {
    "path": "src/main/resources/view/home/CardView.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003cHBox id\u003d\"cardViewPane\" fx:id\u003d\"cardViewPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"question\" text\u003d\"\\$question\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cFlowPane fx:id\u003d\"topics\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"answer\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$answer\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 2,
      "-": 33
    }
  },
  {
    "path": "src/main/resources/view/home/Homepage.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cVBox fx:id\u003d\"cardList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003cStackPane fx:id\u003d\"cardListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        \u003cStackPane fx:id\u003d\"extraInformationPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 23,
      "hozongsien": 1
    }
  },
  {
    "path": "src/main/resources/view/home/ImportHelpDisplay.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "\u003cStackPane fx:id\u003d\"ImportHelpDisplay\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "      \u003cTextArea fx:id\u003d\"importHelp\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "hozongsien": 9
    }
  },
  {
    "path": "src/main/resources/view/test/matchtest/AnswerListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "   \u003cGridPane\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "       \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "         \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "       \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "       \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "         \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "         \u003cLabel text\u003d\"Answers\" GridPane.columnIndex\u003d\"1\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\" styleClass\u003d\"label-bright\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "   \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "   \u003cListView fx:id\u003d\"matchTestAnswerListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 26
    }
  },
  {
    "path": "src/main/resources/view/test/matchtest/AnswerView.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003cHBox id\u003d\"answerViewPane\" fx:id\u003d\"answerViewPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003cLabel fx:id\u003d\"answerText\" text\u003d\"\\$answerText\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 32
    }
  },
  {
    "path": "src/main/resources/view/test/matchtest/MatchAttemptList.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003cListView fx:id\u003d\"matchAttemptView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 8
    }
  },
  {
    "path": "src/main/resources/view/test/matchtest/MatchAttemptView.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003cHBox id\u003d\"attemptViewPane\" fx:id\u003d\"attemptViewPane\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003cGridPane prefHeight\u003d\"80.0\" prefWidth\u003d\"150.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105.0\" prefWidth\u003d\"150.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003cminWidth\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                    \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                    \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003cLabel fx:id\u003d\"attemptText\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$attemptText\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003cRegion prefHeight\u003d\"25.0\" prefWidth\u003d\"25.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003cImageView fx:id\u003d\"correctnessIcon\" fitHeight\u003d\"25.0\" fitWidth\u003d\"25.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003cRegion prefHeight\u003d\"25.0\" prefWidth\u003d\"25.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "               \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 40
    }
  },
  {
    "path": "src/main/resources/view/test/matchtest/MatchTestPage.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003cSplitPane id\u003d\"MatchTestSplitPane\" fx:id\u003d\"MatchTestSplitPane\" dividerPositions\u003d\"0.5\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cVBox fx:id\u003d\"MatchTestQuestionListView\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003cStackPane fx:id\u003d\"matchTestQuestionListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cVBox fx:id\u003d\"MatchTestAnswerListView\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003cStackPane fx:id\u003d\"matchTestAnswerListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 25
    }
  },
  {
    "path": "src/main/resources/view/test/matchtest/MatchTestResultPage.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "  \u003cGridPane prefHeight\u003d\"45.0\" prefWidth\u003d\"425.0\" styleClass\u003d\"grid-pane\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "      \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "         \u003cLabel styleClass\u003d\"label-bright-header\" text\u003d\"Matching Test Completed!\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "  \u003cGridPane styleClass\u003d\"grid-pane\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "      \u003cColumnConstraints fillWidth\u003d\"false\" halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "      \u003cColumnConstraints fillWidth\u003d\"false\" halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"40.0\" valignment\u003d\"CENTER\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"40.0\" valignment\u003d\"CENTER\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     \u003cchildren\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "           \u003cchildren\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "              \u003cLabel layoutX\u003d\"14.0\" layoutY\u003d\"21.0\" styleClass\u003d\"label-bright\" text\u003d\"Test Date:\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "              \u003cLabel fx:id\u003d\"testDateText\" styleClass\u003d\"label-bright\" text\u003d\"\\$testDateText\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "           \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "           \u003cchildren\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "              \u003cLabel layoutX\u003d\"14.0\" layoutY\u003d\"21.0\" styleClass\u003d\"label-bright\" text\u003d\"Duration:\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "              \u003cLabel fx:id\u003d\"durationText\" styleClass\u003d\"label-bright\" text\u003d\"\\$durationText\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "           \u003c/children\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "           \u003cchildren\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "              \u003cLabel layoutX\u003d\"14.0\" layoutY\u003d\"23.0\" styleClass\u003d\"label-bright\" text\u003d\"Topic:\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "              \u003cLabel fx:id\u003d\"topicText\" styleClass\u003d\"label-bright\" text\u003d\"\\$topicText\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "           \u003c/children\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "           \u003cchildren\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "              \u003cLabel layoutX\u003d\"14.0\" layoutY\u003d\"23.0\" styleClass\u003d\"label-bright\" text\u003d\"Number of Cards Tested:\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "              \u003cLabel fx:id\u003d\"numOfCardsText\" styleClass\u003d\"label-bright\" text\u003d\"\\$numOfCardsText\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "           \u003c/children\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     \u003c/children\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "  \u003cGridPane styleClass\u003d\"grid-pane\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "      \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"ALWAYS\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "         \u003cColumnConstraints /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "      \u003cRowConstraints maxHeight\u003d\"83.0\" minHeight\u003d\"10.0\" prefHeight\u003d\"37.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     \u003cchildren\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "         \u003cLabel fx:id\u003d\"numOfAttemptsText\" styleClass\u003d\"label-bright\" style\u003d\"-fx-font-size: 15pt\" text\u003d\"\\$numOfAttemptsText\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     \u003c/children\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "  \u003cVBox fx:id\u003d\"attemptListView\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"grid-pane\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     \u003cpadding\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     \u003c/padding\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     \u003cchildren\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cStackPane fx:id\u003d\"attemptListPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     \u003c/children\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 81
    }
  },
  {
    "path": "src/main/resources/view/test/matchtest/QuestionListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "   \u003cGridPane\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "       \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "         \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "       \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "       \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "       \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "         \u003cLabel text\u003d\"Questions\" GridPane.columnIndex\u003d\"1\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\" styleClass\u003d\"label-bright\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "               \u003cFont name\u003d\"System Bold\" size\u003d\"17.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "         \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "   \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "   \u003cListView fx:id\u003d\"matchTestQuestionListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 31
    }
  },
  {
    "path": "src/main/resources/view/test/matchtest/QuestionView.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003cHBox id\u003d\"questionViewPane\" fx:id\u003d\"questionViewPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                    \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                    \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003cLabel fx:id\u003d\"questionText\" text\u003d\"\\$questionText\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 32
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "  \"addressBookFilePath\" : \"addressbook.xml\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "  \"triviaBundleFilePath\"  : \"triviabundle.xml\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "  \"triviaResultsFilePath\" : \"testresult.xml\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 3,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "  \"addressBookFilePath\" : \"addressbook.xml\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "  \"triviaBundleFilePath\"  : \"triviabundle.xml\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "  \"triviaResultsFilePath\" : \"testresult.xml\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 3,
      "-": 10
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/duplicatePersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ctopic\u003efriends\u003c/topic\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with same identity as Alice Pauline --\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003epauline@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/typicalPersonsAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ctopic\u003efriends\u003c/topic\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eBenson Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e98765432\u003c/phone\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ejohnd@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e311, Clementi Ave 2, #02-25\u003c/address\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ctopic\u003eowesMoney\u003c/topic\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ctopic\u003efriends\u003c/topic\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCarl Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eDaniel Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ctopic\u003efriends\u003c/topic\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eElle Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eFiona Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eGeorge Best\u003c/name\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 4,
      "-": 46
    }
  },
  {
    "path": "src/test/data/XmlSerializableTriviaBundleTest/duplicateCardTriviaBundle.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003ctriviabundle\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003ccards\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cquestion\u003eWhy apple drop from apple tree?\u003c/question\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003canswer\u003eBecause of gravity\u003c/answer\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ctopic\u003ePhysics\u003c/topic\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c/cards\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c!-- Card with same identity as the above card --\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003ccards\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cquestion\u003eWhy apple drop from apple tree?\u003c/question\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003canswer\u003eBecause!\u003c/answer\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c/cards\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c/triviabundle\u003e"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 16
    }
  },
  {
    "path": "src/test/data/XmlSerializableTriviaBundleTest/invalidCardTriviaBundle.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003ctriviabundle\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c!-- Card with invalid answer field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003ccards\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cquestion\u003eWhy is the sky blue?\u003c/question\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003canswer\u003e\u003c/answer\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ctopic\u003ePhysics\u003c/topic\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c/cards\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c/triviabundle\u003e"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 9
    }
  },
  {
    "path": "src/test/data/XmlSerializableTriviaBundleTest/typicalCardsTriviaBundle.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c!-- TriviaBundle save file which contains the same Card values as in TypicalCards#getTypicalTriviaBundle() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003ctriviabundle\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003ccards\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cquestion\u003eWhy is the earth round?\u003c/question\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003canswer\u003eBecause of gravity!\u003c/answer\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ctopic\u003ePhysics\u003c/topic\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c/cards\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003ccards\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cquestion\u003eWhat are the ways to merge to branches?\u003c/question\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003canswer\u003erebase and merge\u003c/answer\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ctopic\u003eGit\u003c/topic\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c/cards\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003ccards\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cquestion\u003eWhat is the formula for force?\u003c/question\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003canswer\u003eforce \u003d mass * acceleration\u003c/answer\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ctopic\u003ePhysics\u003c/topic\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c/cards\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003ccards\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cquestion\u003eName of Singapore\u0027s capital\u003c/question\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003canswer\u003eSingapore\u003c/answer\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ctopic\u003eGeneralKnowledge\u003c/topic\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c/cards\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003ccards\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cquestion\u003eWhich git command will get a copy of an online repository to your computer?\u003c/question\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003canswer\u003egit clone\u003c/answer\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ctopic\u003eGit\u003c/topic\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c/cards\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003ccards\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cquestion\u003eFormula of density\u003c/question\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003canswer\u003edesnity \u003d mass / volume\u003c/answer\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ctopic\u003ePhysics\u003c/topic\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c/cards\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003ccards\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cquestion\u003eTallest building in the world?\u003c/question\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003canswer\u003eBurj Khalifa\u003c/answer\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ctopic\u003eGeneralKnowledge\u003c/topic\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c/cards\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c/triviabundle\u003e"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 39
    }
  },
  {
    "path": "src/test/data/XmlSerializableTriviaResultsTest/invalidResultTriviaResults.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003ctestresult\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c!-- Result with invalid testType field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003cresults\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ctestType\u003eNON_EXISTENT_TEST\u003c/testType\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ctopic\u003ePhysics\u003c/topic\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cdate\u003e01 Jun 2016, 04:13 PM\u003c/date\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cduration\u003e11.5\u003c/duration\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cattempt\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003cattemptedCard\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003cquestion\u003eWill this work?\u003c/question\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003canswer\u003eDefinitely!\u003c/answer\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003ctopic\u003eNoTopic\u003c/topic\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003c/attemptedCard\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003canswer\u003eHmmmmm...\u003c/answer\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003cisCorrect\u003etrue\u003c/isCorrect\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003c/attempt\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c/results\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c!-- Correct result --\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003cresults\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ctestType\u003eMATCH_TEST\u003c/testType\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ctopic\u003ePhysics\u003c/topic\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cdate\u003e01 Jun 2016, 04:13 PM\u003c/date\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cduration\u003e11.5\u003c/duration\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cattempt\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003cattemptedCard\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003cquestion\u003eWill this work?\u003c/question\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003canswer\u003eDefinitely!\u003c/answer\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003ctopic\u003eNoTopic\u003c/topic\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003c/attemptedCard\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003canswer\u003eHmmmmm...\u003c/answer\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003cisCorrect\u003etrue\u003c/isCorrect\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003c/attempt\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c/results\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c/testresult\u003e"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 36
    }
  },
  {
    "path": "src/test/data/XmlSerializableTriviaResultsTest/typicalResultsTriviaResults.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c!-- AddressBook save file which contains the same Person values as in TypicalTriviaResults#getTypicalTriviaResults() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003ctestresult\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003cresults\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ctestType\u003eMATCH_TEST\u003c/testType\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ctopic\u003ePhysics\u003c/topic\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cdate\u003e18 Oct 2018, 11:30 PM\u003c/date\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cduration\u003e20.0\u003c/duration\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cattempt\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003cattemptedCard\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003cquestion\u003eIs earth flat?\u003c/question\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003canswer\u003eNo.\u003c/answer\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003ctopic\u003ePhysics\u003c/topic\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003c/attemptedCard\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003canswer\u003eNo.\u003c/answer\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003cisCorrect\u003etrue\u003c/isCorrect\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003c/attempt\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cattempt\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003cattemptedCard\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003cquestion\u003eWhat is the formula for force?\u003c/question\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003canswer\u003eforce \u003d mass * acceleration\u003c/answer\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003ctopic\u003ePhysics\u003c/topic\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003c/attemptedCard\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003canswer\u003emass * acceleration\u003c/answer\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003cisCorrect\u003etrue\u003c/isCorrect\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003c/attempt\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c/results\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003cresults\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ctestType\u003eMATCH_TEST\u003c/testType\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ctopic\u003ePhysics\u003c/topic\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cdate\u003e18 Oct 2018, 11:30 PM\u003c/date\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cduration\u003e20.0\u003c/duration\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cattempt\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003cattemptedCard\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003cquestion\u003eIs earth flat?\u003c/question\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003canswer\u003eNo.\u003c/answer\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003ctopic\u003ePhysics\u003c/topic\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003c/attemptedCard\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003canswer\u003egit commit -m \u0027whatever you wanna say\u0027\u003c/answer\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003cisCorrect\u003efalse\u003c/isCorrect\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003c/attempt\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cattempt\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003cattemptedCard\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003cquestion\u003eWhat is the formula for force?\u003c/question\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003canswer\u003eforce \u003d mass * acceleration\u003c/answer\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003ctopic\u003ePhysics\u003c/topic\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003c/attemptedCard\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003canswer\u003eLHL\u003c/answer\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003cisCorrect\u003efalse\u003c/isCorrect\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003c/attempt\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c/results\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003cresults\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ctestType\u003eMATCH_TEST\u003c/testType\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ctopic\u003ePhysics\u003c/topic\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cdate\u003e18 Oct 2018, 11:30 PM\u003c/date\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cduration\u003e20.0\u003c/duration\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cattempt\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003cattemptedCard\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003cquestion\u003eIs earth flat?\u003c/question\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003canswer\u003eNo.\u003c/answer\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003ctopic\u003ePhysics\u003c/topic\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003c/attemptedCard\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003canswer\u003egit commit -m \u0027whatever you wanna say\u0027\u003c/answer\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003cisCorrect\u003efalse\u003c/isCorrect\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003c/attempt\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cattempt\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003cattemptedCard\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003cquestion\u003eWhat is the formula for force?\u003c/question\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003canswer\u003eforce \u003d mass * acceleration\u003c/answer\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003ctopic\u003ePhysics\u003c/topic\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003c/attemptedCard\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003canswer\u003emass * acceleration\u003c/answer\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003cisCorrect\u003etrue\u003c/isCorrect\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003c/attempt\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c/results\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c/testresult\u003e"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 79
    }
  },
  {
    "path": "src/test/data/XmlTriviaBundleStorageTest/NotXmlFormatTriviaBundle.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "not xml format!"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 1
    }
  },
  {
    "path": "src/test/data/XmlTriviaBundleStorageTest/invalidAndValidCardTriviaBundle.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003ctriviabundle\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c!-- Valid Card --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003ccards\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cquestion\u003eFormula of force?\u003c/question\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003canswer\u003eforce \u003d mass * acceleration\u003c/answer\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ctag\u003ePhysics\u003c/tag\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c/cards\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c!-- Card with invalid answer field --\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003ccards\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cquestion\u003eBest module in NUS?\u003c/question\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003canswer\u003e\u003c/answer\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ctag\u003eNUS\u003c/tag\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c/cards\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c/triviabundle\u003e"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 15
    }
  },
  {
    "path": "src/test/data/XmlTriviaBundleStorageTest/invalidCardTriviaBundle.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003ctriviabundle\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c!-- Card with invalid question field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003ccards\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cquestion\u003e\u003c/question\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003canswer\u003eWhat question?\u003c/answer\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ctag\u003eNoQuestion\u003c/tag\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c/cards\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c/triviabundle\u003e"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 9
    }
  },
  {
    "path": "src/test/data/XmlTriviaResultsStorageTest/NotXmlFormatTriviaResults.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "not xml format!"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 1
    }
  },
  {
    "path": "src/test/data/XmlTriviaResultsStorageTest/invalidAndValidResultTriviaResults.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003ctriviabundle\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c!-- Valid testResult --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003cresults\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ctestType\u003eMATCH_TEST\u003c/testType\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ctopic\u003ePhysics\u003c/topic\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cdate\u003e01 Jun 2016, 04:13 PM\u003c/date\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cduration\u003e11.5\u003c/duration\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cattempt\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003cattemptedCard\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003cquestion\u003eWill this work?\u003c/question\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003canswer\u003eDefinitely!\u003c/answer\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003ctopic\u003eNoTopic\u003c/topic\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003c/attemptedCard\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003canswer\u003eHmmmmm...\u003c/answer\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003cisCorrect\u003e\u003c/isCorrect\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003c/attempt\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c/results\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c!-- testResult with invalid date field --\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003cresults\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ctestType\u003eMATCH_TEST\u003c/testType\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ctopic\u003ePhysics\u003c/topic\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cdate\u003e01 Jun 2016, 21:13\u003c/date\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cduration\u003e11.5\u003c/duration\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cattempt\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003cattemptedCard\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003cquestion\u003eWill this work?\u003c/question\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003canswer\u003eDefinitely!\u003c/answer\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003ctopic\u003eNoTopic\u003c/topic\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003c/attemptedCard\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003canswer\u003eHmmmmm...\u003c/answer\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003cisCorrect\u003e\u003c/isCorrect\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003c/attempt\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c/results\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c/triviabundle\u003e"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 36
    }
  },
  {
    "path": "src/test/data/XmlTriviaResultsStorageTest/invalidResultTriviaResults.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003ctestresult\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c!-- Card with invalid testType field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003cresults\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ctestType\u003eNON_EXISTENT_TEST\u003c/testType\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ctopic\u003ePhysics\u003c/topic\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cdate\u003e01 Jun 2016, 04:13 PM\u003c/date\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cduration\u003e11.5\u003c/duration\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cattempt\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003cattemptedCard\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003cquestion\u003eWill this work?\u003c/question\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003canswer\u003eDefinitely!\u003c/answer\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u003ctopic\u003eNoTopic\u003c/topic\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003c/attemptedCard\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003canswer\u003eHmmmmm...\u003c/answer\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \u003cisCorrect\u003etrue\u003c/isCorrect\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003c/attempt\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c/results\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c/testresult\u003e"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 19
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidCardField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c!-- Person with an invalid phone field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003ccards\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003cquestion\u003e\u003c/question\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003canswer\u003eBecause of gravity!\u003c/answer\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003ctopic\u003ePhysics\u003c/topic\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c/cards\u003e"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 7
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with an invalid phone field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482asf424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003ctopic\u003efriends\u003c/topic\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 1,
      "-": 8
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingCardField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c!-- Person with missing name field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003ccards\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003canswer\u003eBecause of gravity!\u003c/answer\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003ctopic\u003ePhysics\u003c/topic\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c/cards\u003e"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 6
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with missing name field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003ctopic\u003efriends\u003c/topic\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 1,
      "-": 7
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validCard.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003ccards\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003cquestion\u003eWhy is the earth round?\u003c/question\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003canswer\u003eBecause of gravity!\u003c/answer\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003ctopic\u003ePhysics\u003c/topic\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c/cards\u003e"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 6
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validPerson.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003ctopic\u003efriends\u003c/topic\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 1,
      "-": 7
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validTriviaBundle.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003ctriviabundle\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003ccards\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cquestion\u003eWhy is the earth round?\u003c/question\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003canswer\u003eBecause of gravity!\u003c/answer\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ctopic\u003ePhysics\u003c/topic\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c/cards\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003ccards\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cquestion\u003eWhat are the ways to merge to branches?\u003c/question\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003canswer\u003erebase and merge\u003c/answer\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ctopic\u003eGit\u003c/topic\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c/cards\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003ccards\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cquestion\u003eWhat is the formula for force?\u003c/question\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003canswer\u003eforce \u003d mass * acceleration\u003c/answer\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ctopic\u003ePhysics\u003c/topic\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c/cards\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003ccards\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cquestion\u003eName of Singapore\u0027s capital\u003c/question\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003canswer\u003eSingapore\u003c/answer\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ctopic\u003eGeneralKnowledge\u003c/topic\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c/cards\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003ccards\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cquestion\u003eWhich git command will get a copy of an online repository to your computer?\u003c/question\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003canswer\u003egit clone\u003c/answer\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ctopic\u003eGit\u003c/topic\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c/cards\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003ccards\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cquestion\u003eFormula of density\u003c/question\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003canswer\u003edesnity \u003d mass / volume\u003c/answer\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ctopic\u003ePhysics\u003c/topic\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c/cards\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003ccards\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003cquestion\u003eTallest building in the world?\u003c/question\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003canswer\u003eBurj Khalifa\u003c/answer\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        \u003ctopic\u003eGeneralKnowledge\u003c/topic\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    \u003c/cards\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "\u003c/triviabundle\u003e"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 38
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CardListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * Provides a handle for {@code CardListPanel} containing the list of {@code CardView}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class CardListPanelHandle extends NodeHandle\u003cListView\u003cCard\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String CARD_LIST_VIEW_ID \u003d \"#cardListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardViewPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Optional\u003cCard\u003e lastRememberedSelectedCardView;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public CardListPanelHandle(ListView\u003cCard\u003e cardListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        super(cardListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Returns a handle to the selected {@code CardViewHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public CardViewHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        List\u003cCard\u003e selectedCardList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (selectedCardList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            throw new AssertionError(\"Card list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .map(CardViewHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedCardList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        List\u003cCard\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Navigates the listview to display {@code person}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void navigateToCard(Card card) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (!getRootNode().getItems().contains(card)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            throw new IllegalArgumentException(\"Card does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            getRootNode().scrollTo(card);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Selects the {@code CardView} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Returns the card view handle of a person associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public CardViewHandle getCardViewHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .map(CardViewHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .filter(handle -\u003e handle.equals(getCard(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Card getCard(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Remembers the selected {@code CardView} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void rememberSelectedCardView() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        List\u003cCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            lastRememberedSelectedCardView \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            lastRememberedSelectedCardView \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Returns true if the selected {@code CardView} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * {@code rememberSelectedCardView()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public boolean isSelectedCardViewChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        List\u003cCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            return lastRememberedSelectedCardView.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            return !lastRememberedSelectedCardView.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                    || !lastRememberedSelectedCardView.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 159
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CardViewHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * Provides a handle to a card view in the card list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class CardViewHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String QUESTION_FIELD_ID \u003d \"#question\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String ANSWER_FIELD_ID \u003d \"#answer\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String TOPICS_FIELD_ID \u003d \"#topics\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final Label questionLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final Label answerLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final List\u003cLabel\u003e topicLabels;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public CardViewHandle(Node cardNode) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        questionLabel \u003d getChildNode(QUESTION_FIELD_ID);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        answerLabel \u003d getChildNode(ANSWER_FIELD_ID);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Region topicsContainer \u003d getChildNode(TOPICS_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        topicLabels \u003d topicsContainer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return questionLabel.getText();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public String getAnswer() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return answerLabel.getText();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public List\u003cString\u003e getTopics() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return topicLabels"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Returns true if this handle contains {@code card}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public boolean equals(Card card) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return getQuestion().equals(card.getQuestion().value)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u0026\u0026 getAnswer().equals(card.getAnswer().value)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTopics()).equals(ImmutableMultiset.copyOf(card.getTopics().stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .map(topic -\u003e topic.topicName)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 71
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final CardListPanelHandle cardListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final BrowserPanelHandle browserPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        cardListPanel \u003d new CardListPanelHandle(getChildNode(CardListPanelHandle.CARD_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public CardListPanelHandle getCardListPanel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return cardListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return browserPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 4,
      "-": 47
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to a person card in the person list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if this handle contains {@code person}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Person person) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return getName().equals(person.getName().fullName)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getAddress().equals(person.getAddress().value)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getPhone().equals(person.getPhone().value)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getEmail().equals(person.getEmail().value)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(person.getTags().stream()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                        .map(tag -\u003e tag.topicName)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 1,
      "-": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.ReadOnlyTriviaBundle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.TriviaBundle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaResults;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.storage.XmlSerializableTriviaBundle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final Path ADDRESS_BOOK_SAVE_LOCATION \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final Path TRIVIA_BUNDLE_SAVE_LOCATION \u003d TestUtil.getFilePathInSandboxFolder(\"sampleTriviaData.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final Path TEST_RESULTS_SAVE_LOCATION \u003d TestUtil"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            .getFilePathInSandboxFolder(\"sampleTestResultsData.xml\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    protected Supplier\u003cReadOnlyAddressBook\u003e initialAddressBook \u003d () -\u003e null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    protected Supplier\u003cReadOnlyTriviaBundle\u003e initialTriviaBundle \u003d () -\u003e null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    protected Path addressBookFile \u003d ADDRESS_BOOK_SAVE_LOCATION;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    protected Path triviaBundleFile \u003d TRIVIA_BUNDLE_SAVE_LOCATION;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    protected Path triviaResultsFile \u003d TEST_RESULTS_SAVE_LOCATION;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialAddressBook, Supplier\u003cReadOnlyTriviaBundle\u003e initialTriviaBundle,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                   Path addressBookFile, Path triviaBundleFile) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.initialAddressBook \u003d initialAddressBook;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.addressBookFile \u003d addressBookFile;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.initialTriviaBundle \u003d initialTriviaBundle;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.triviaBundleFile \u003d triviaBundleFile;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (this.initialAddressBook.get() !\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            createDataFileWithData(new XmlSerializableAddressBook(this.initialAddressBook.get()),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                    this.addressBookFile);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (this.initialTriviaBundle.get() !\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            createDataFileWithData(new XmlSerializableTriviaBundle(this.initialTriviaBundle.get()),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                    this.triviaBundleFile);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(1000.0, 1000.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFile);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        userPrefs.setTriviaBundleFilePath(triviaBundleFile);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        userPrefs.setTriviaResultsFilePath(triviaResultsFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook readStorageAddressBook() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook(storage.readAddressBook().get());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Data is not in the AddressBook format.\", dce);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public TriviaBundle readStorageTriviaBundle() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            return new TriviaBundle(storage.readTriviaBundle().get());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            throw new AssertionError(\"Data is not in the trivia bundle format.\", dce);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Returns the file path of address book\u0027s storage file."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Returns the file path of trivia bundle\u0027s storage file."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public Path getTriviaBundleFilePath() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return storage.getTriviaBundleFilePath();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Model copy \u003d new ModelManager((model.getAddressBook()), model.getTriviaBundle(), new TriviaResults(),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        // ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredCardList());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 55,
      "-": 107,
      "hozongsien": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/DateUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class DateUtilTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void formatDate() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        final int yearFrom \u003d 1900;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        int yearToTest \u003d 2006 - yearFrom;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // AM"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(\"31 Jan 2006, 08:30 AM\", DateUtil.format(new Date(yearToTest, 0, 31, 8, 30)));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // PM"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(\"31 Jan 2006, 02:30 PM\", DateUtil.format(new Date(yearToTest, 0, 31, 14, 30)));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // Noon"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(\"31 Jan 2006, 12:30 PM\", DateUtil.format(new Date(yearToTest, 0, 31, 12, 30)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // MidNight"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(\"31 Jan 2006, 12:30 AM\", DateUtil.format(new Date(yearToTest, 0, 31, 0, 30)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void formatStringToDate() throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        final int yearFrom \u003d 1900;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        int yearToTest \u003d 2006 - yearFrom;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // AM"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(DateUtil.parse(\"31 Jan 2006, 08:30 AM\"), new Date(yearToTest, 0, 31, 8, 30));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // PM"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(DateUtil.parse(\"31 Jan 2006, 02:30 PM\"), new Date(yearToTest, 0, 31, 14, 30));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // Noon"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(DateUtil.parse(\"31 Jan 2006, 12:30 PM\"), new Date(yearToTest, 0, 31, 12, 30));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // MidNight"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(DateUtil.parse(\"31 Jan 2006, 12:30 AM\"), new Date(yearToTest, 0, 31, 0, 30));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void test_formatStringParseException() throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        DateUtil.parse(\"31 Jan 2005 8:30AM\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.TriviaBundle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.storage.XmlAdaptedCard;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedPerson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.storage.XmlAdaptedTopic;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.storage.XmlSerializableTriviaBundle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.testutil.TriviaBundleBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.testutil.TypicalCards;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validAddressBook.xml\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final Path VALID_TRIVIA_FILE \u003d TEST_DATA_FOLDER.resolve(\"validTriviaBundle.xml\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingPersonField.xml\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final Path MISSING_CARD_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingCardField.xml\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonField.xml\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final Path INVALID_CARD_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidCardField.xml\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"validPerson.xml\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final Path VALID_CARD_FILE \u003d TEST_DATA_FOLDER.resolve(\"validCard.xml\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final Path TEMP_TRIVIA_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempTriviaBundle.xml\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String INVALID_QUESTION \u003d \"\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"9482424\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"hans@example\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"4th street\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final List\u003cXmlAdaptedTopic\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTopic(\"friends\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String VALID_QUESTION \u003d \"Why is the earth round?\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String VALID_ANSWER \u003d \"Because of gravity!\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final List\u003cXmlAdaptedTopic\u003e VALID_TOPIC \u003d Collections.singletonList(new XmlAdaptedTopic(\"Physics\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(null, AddressBook.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void getDataFromTriviaFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlUtil.getDataFromFile(null, TriviaBundle.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void getDataFromTriviaFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_TRIVIA_FILE, null);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void getDataFromTriviaFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, TriviaBundle.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void getDataFromTriviaFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, TriviaBundle.class);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(9, dataFromFile.getPersonList().size());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void getDataFromTriviaFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        TriviaBundle dataFromFile \u003d XmlUtil.getDataFromFile(VALID_TRIVIA_FILE, XmlSerializableTriviaBundle.class)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .toModelType();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(TypicalCards.getTypicalTriviaBundle(), dataFromFile);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void xmlAdaptedCardFromFile_fileWithMissingCardField_validResult() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlAdaptedCard actualCard \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                MISSING_CARD_FIELD_FILE, XmlAdaptedCardWithRootElement.class);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlAdaptedCard expectedCard \u003d new XmlAdaptedCard(null, VALID_ANSWER, VALID_TOPIC);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(expectedCard, actualCard);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void xmlAdaptedCardFromFile_fileWithInvalidCardField_validResult() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlAdaptedCard actualCard \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                INVALID_CARD_FIELD_FILE, XmlAdaptedCardWithRootElement.class);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlAdaptedCard expectedCard \u003d new XmlAdaptedCard(INVALID_QUESTION, VALID_ANSWER, VALID_TOPIC);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(expectedCard, actualCard);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void xmlAdaptedCardFromFile_fileWithValidCard_validResult() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlAdaptedCard actualCard \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                VALID_CARD_FILE, XmlAdaptedCardWithRootElement.class);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlAdaptedCard expectedCard \u003d new XmlAdaptedCard(VALID_QUESTION, VALID_ANSWER, VALID_TOPIC);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(expectedCard, actualCard);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(null, new AddressBook());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void saveDataToTriviaFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlUtil.saveDataToFile(null, new TriviaBundle());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void saveDataToTriviaFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_TRIVIA_FILE, null);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void saveDataToTriviaFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new TriviaBundle());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        dataToWrite \u003d new XmlSerializableAddressBook("
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                builder.withPerson(new PersonBuilder().build()).build());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void saveDataToTriviaFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        FileUtil.createFile(TEMP_TRIVIA_FILE);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlSerializableTriviaBundle dataToWrite \u003d new XmlSerializableTriviaBundle(new TriviaBundle());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_TRIVIA_FILE, dataToWrite);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlSerializableTriviaBundle dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_TRIVIA_FILE,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                XmlSerializableTriviaBundle.class);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        TriviaBundleBuilder builder \u003d new TriviaBundleBuilder(new TriviaBundle());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        dataToWrite \u003d new XmlSerializableTriviaBundle("
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                builder.withCard(new CardBuilder().build()).build());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_TRIVIA_FILE, dataToWrite);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_TRIVIA_FILE, XmlSerializableTriviaBundle.class);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlRootElement(name \u003d \"person\")"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedCard}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @XmlRootElement(name \u003d \"cards\")"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static class XmlAdaptedCardWithRootElement extends XmlAdaptedCard {}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 115,
      "-": 145
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaResults;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getTriviaBundle(),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new TriviaResults(), new UserPrefs());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 5,
      "-": 121
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalTriviaBundle;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalTriviaResults.getTypicalTriviaResults;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaResults;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalTriviaBundle(), getTypicalTriviaResults(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newCard_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Card validCard \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getTriviaBundle(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new TriviaResults(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addCard(validCard);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitTriviaBundle();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandSuccess(new AddCommand(validCard), model, commandHistory,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validCard), expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicateCard_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Card cardInList \u003d model.getTriviaBundle().getCardList().get(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandFailure(new AddCommand(cardInList), model, commandHistory,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 10,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyTriviaBundle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.TriviaBundle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.state.State;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.Attempt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaResult;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaTest;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_cardAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingCardAdded modelStub \u003d new ModelStubAcceptingCardAdded();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Card validCard \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validCard).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validCard), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validCard), modelStub.cardsAdded);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicateCard_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Card validCard \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validCard);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithCard(validCard);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Card qOnEarthRound \u003d new CardBuilder().withQuestion(\"Why is the earth round?\").build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Card qOnEarthFlat \u003d new CardBuilder().withQuestion(\"Why is the earth flat?\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        AddCommand addEarthRoundCommand \u003d new AddCommand(qOnEarthRound);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        AddCommand addEarthFlatCommand \u003d new AddCommand(qOnEarthFlat);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addEarthRoundCommand.equals(addEarthRoundCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        AddCommand addEarthRoundCommandCopy \u003d new AddCommand(qOnEarthRound);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addEarthRoundCommand.equals(addEarthRoundCommandCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addEarthRoundCommand.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addEarthRoundCommand.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addEarthRoundCommand.equals(addEarthFlatCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addCard(Card card) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyTriviaBundle newData) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError((\"This method should not be called.\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyTriviaBundle getTriviaBundle() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        public void deleteCard(Card target) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            throw new AssertionError("
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                    \"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateCard(Card target, Card editedCard) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cCard\u003e getFilteredCardList() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredCardList(Predicate\u003cCard\u003e predicate) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        public boolean canUndoTriviaBundle() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        public boolean canRedoTriviaBundle() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        public void undoTriviaBundle() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        public void redoTriviaBundle() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitTriviaBundle() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        public void startTriviaTest(TriviaTest test) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        public void stopTriviaTest() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        public TriviaTest getCurrentRunningTest() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        public State getAppState() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        public boolean isInTestingState() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        public boolean matchQuestionAndAnswer(Index questionIndex, Index answerIndex) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        public List\u003cTriviaResult\u003e getTriviaResultList() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        public List\u003cAttempt\u003e getAttemptsByCard(Card card) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * A Model stub that contains a single card."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private class ModelStubWithCard extends ModelStub {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        private final Card card;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        ModelStubWithCard(Card card) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            requireNonNull(card);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            this.card \u003d card;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            requireNonNull(card);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            return this.card.equals(card);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the card being added."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingCardAdded extends ModelStub {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cCard\u003e cardsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(card);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            return cardsAdded.stream().anyMatch(card::equals);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addCard(Card card) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(card);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            cardsAdded.add(card);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitTriviaBundle() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyTriviaBundle getTriviaBundle() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            return new TriviaBundle();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhui2778": 4,
      "JunWei96": 49,
      "-": 240
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalTriviaBundle;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaResults;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalTriviaBundle(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new TriviaResults(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalTriviaBundle(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new TriviaResults(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.resetData(new AddressBook());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 6,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TOPIC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.TriviaBundle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.card.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditCardDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_QUESTION_EARTH_FLAT \u003d \"Is earth flat?\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ANSWER_EARTH_FLAT \u003d \"No.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String VALID_TOPIC_PHYSICS \u003d \"Physics\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_QUESTION_GIT_COMMIT \u003d \"How to commit in git?\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ANSWER_GIT_COMMIT \u003d \"git commit -m \u0027whatever you wanna say\u0027\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String VALID_TOPIC_GIT \u003d \"Git\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String VALID_QUESTION_PM_OF_SG \u003d \"Who is the prime minister of Singapore?\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String VALID_ANSWER_PM_OF_SG \u003d \"LHL\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String VALID_TOPIC_GEN_KNOWLEDGE \u003d \"GeneralKnowledge\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String VALID_TOPIC_NO_TOPIC \u003d \"NoTopic\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String QUESTION_DESC_EARTH_FLAT \u003d \" \" + PREFIX_QUESTION + VALID_QUESTION_EARTH_FLAT;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String QUESTION_DESC_GIT_COMMIT \u003d \" \" + PREFIX_QUESTION + VALID_QUESTION_GIT_COMMIT;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ANSWER_DESC_EARTH_FLAT \u003d \" \" + PREFIX_ANSWER + VALID_ANSWER_EARTH_FLAT;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ANSWER_DESC_GIT_COMMIT \u003d \" \" + PREFIX_ANSWER + VALID_ANSWER_GIT_COMMIT;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String TOPIC_DESC_PHYSICS \u003d \" \" + PREFIX_TOPIC + VALID_TOPIC_PHYSICS;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String TOPIC_DESC_GIT \u003d \" \" + PREFIX_TOPIC + VALID_TOPIC_GIT;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String QUESTION_DESC_PM_OF_SG \u003d \" \" + PREFIX_QUESTION + VALID_QUESTION_PM_OF_SG;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String ANSWER_DESC_PM_OF_SG \u003d \" \" + PREFIX_ANSWER + VALID_ANSWER_PM_OF_SG;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String TOPIC_DESC_GEN_KNOWLEDGE \u003d \" \" + PREFIX_TOPIC + VALID_TOPIC_GEN_KNOWLEDGE;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String TOPIC_DESC_NO_TOPIC \u003d \" \" + PREFIX_TOPIC + VALID_TOPIC_NO_TOPIC;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_QUESTION_DESC \u003d \" \" + PREFIX_QUESTION + \"\"; // empty strings not allowed"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ANSWER_DESC \u003d \" \" + PREFIX_ANSWER + \"  \"; // empty strings not allowed"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String INVALID_TOPIC_DESC \u003d \" \" + PREFIX_TOPIC + \"topics*\"; // \u0027*\u0027 not allowed in topics"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final EditCommand.EditCardDescriptor DESC_EARTH_FLAT;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final EditCommand.EditCardDescriptor DESC_GIT_COMMIT;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final EditCommand.EditCardDescriptor DESC_PM_OF_SG;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        DESC_EARTH_FLAT \u003d new EditCardDescriptorBuilder().withQuestion(VALID_QUESTION_EARTH_FLAT)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .withAnswer(VALID_ANSWER_EARTH_FLAT)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .withTopics(VALID_TOPIC_PHYSICS).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_GIT_COMMIT \u003d new EditCardDescriptorBuilder().withQuestion(VALID_QUESTION_GIT_COMMIT)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAnswer(VALID_ANSWER_GIT_COMMIT)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .withTopics(VALID_TOPIC_GIT).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        DESC_PM_OF_SG \u003d new EditCardDescriptorBuilder().withQuestion(VALID_QUESTION_PM_OF_SG)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .withAnswer(VALID_ANSWER_PM_OF_SG)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .withTopics(VALID_TOPIC_GEN_KNOWLEDGE).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book and the filtered person list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        List\u003cPerson\u003e expectedPersonFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        TriviaBundle expectedTriviaBundle \u003d null;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        List\u003cCard\u003e expectedCardFilteredList \u003d null;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // For addressbook tests that doesn\u0027t account for trivia bundle."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (actualModel.getTriviaBundle() !\u003d null) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            expectedTriviaBundle \u003d new TriviaBundle(actualModel.getTriviaBundle());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            expectedCardFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredCardList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            assertEquals(expectedPersonFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            // For addressbook tests that doesn\u0027t account for trivia bundle."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            if (expectedTriviaBundle !\u003d null) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                assertEquals(expectedTriviaBundle, actualModel.getTriviaBundle());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                assertEquals(expectedCardFilteredList, actualModel.getFilteredCardList());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the card at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s trivia bundle."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showCardAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredCardList().size());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        Card card \u003d model.getFilteredCardList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d card.getQuestion().value.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredCardList(new QuestionContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredCardList().size());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 41,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showCardAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalTriviaBundle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FOURTH_CARD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CARD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaResults;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalTriviaBundle(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            new TriviaResults(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Card cardToDelete \u003d model.getFilteredCardList().get(INDEX_FIRST_CARD.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_CARD_SUCCESS, cardToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getTriviaBundle(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new TriviaResults(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        expectedModel.deleteCard(cardToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        expectedModel.commitTriviaBundle();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCardList().size() + 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        showCardAtIndex(model, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Card cardToDelete \u003d model.getFilteredCardList().get(INDEX_FIRST_CARD.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_CARD_SUCCESS, cardToDelete);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getTriviaBundle(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new TriviaResults(), new UserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        expectedModel.deleteCard(cardToDelete);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        expectedModel.commitTriviaBundle();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        showNoCard(expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        showCardAtIndex(model, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_CARD;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of trivia bundle list"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTriviaBundle().getCardList().size());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Card cardToDelete \u003d model.getFilteredCardList().get(INDEX_FIRST_CARD.getZeroBased());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getTriviaBundle(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new TriviaResults(), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        expectedModel.deleteCard(cardToDelete);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        expectedModel.commitTriviaBundle();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // delete -\u003e first card deleted"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // undo -\u003e reverts triviabundle back to previous state and filtered card list to show all cards"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        expectedModel.undoTriviaBundle();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // redo -\u003e same first card deleted again"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        expectedModel.redoTriviaBundle();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCardList().size() + 1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // execution failed -\u003e trivia bundle state not added into model"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // single trivia bundle state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * 1. Deletes a {@code Card} from a filtered list."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted card in the"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the card object regardless of indexing."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameCardDeleted() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getTriviaBundle(),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new TriviaResults(), new UserPrefs());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        showCardAtIndex(model, INDEX_FOURTH_CARD);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Card cardToDelete \u003d model.getFilteredCardList().get(INDEX_FIRST_CARD.getZeroBased());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        expectedModel.deleteCard(cardToDelete);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        expectedModel.commitTriviaBundle();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // delete -\u003e deletes second card in unfiltered card list / first card in filtered card list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // undo -\u003e reverts triviabundle back to previous state and filtered card list to show all cards"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        expectedModel.undoTriviaBundle();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertNotEquals(cardToDelete, model.getFilteredCardList().get(INDEX_FIRST_CARD.getZeroBased()));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // redo -\u003e deletes same second card in unfiltered card list"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        expectedModel.redoTriviaBundle();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_CARD);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // different card -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private void showNoCard(Model model) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        model.updateFilteredCardList(p -\u003e false);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(model.getFilteredCardList().isEmpty());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhui2778": 4,
      "JunWei96": 67,
      "-": 114
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCardDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_EARTH_FLAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_GIT_COMMIT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_GIT_COMMIT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_GIT_COMMIT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TOPIC_GIT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditCardDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.testutil.EditCardDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class EditCardDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        EditCardDescriptor descriptorWithSameValues \u003d new EditCardDescriptor(DESC_EARTH_FLAT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(DESC_EARTH_FLAT.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(DESC_EARTH_FLAT.equals(DESC_EARTH_FLAT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(DESC_EARTH_FLAT.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(DESC_EARTH_FLAT.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(DESC_EARTH_FLAT.equals(DESC_GIT_COMMIT));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // different question -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        EditCardDescriptor editedEarthFlatQ \u003d new EditCardDescriptorBuilder(DESC_EARTH_FLAT)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .withQuestion(VALID_QUESTION_GIT_COMMIT).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(DESC_EARTH_FLAT.equals(editedEarthFlatQ));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // different answer -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        editedEarthFlatQ \u003d new EditCardDescriptorBuilder(DESC_EARTH_FLAT)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .withAnswer(VALID_ANSWER_GIT_COMMIT).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(DESC_EARTH_FLAT.equals(editedEarthFlatQ));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        editedEarthFlatQ \u003d new EditCardDescriptorBuilder(DESC_EARTH_FLAT)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .withTopics(VALID_TOPIC_GIT).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(DESC_EARTH_FLAT.equals(editedEarthFlatQ));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_EARTH_FLAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_GIT_COMMIT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_GIT_COMMIT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TOPIC_PHYSICS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showCardAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalTriviaBundle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CARD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditCardDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.TriviaBundle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaResults;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.testutil.EditCardDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalTriviaBundle(), new TriviaResults(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void execute_allTriviaFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Card editedCard \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder(editedCard).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CARD_SUCCESS, editedCard);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new TriviaBundle(model.getTriviaBundle()), new TriviaResults(), new UserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        expectedModel.updateCard(model.getFilteredCardList().get(0), editedCard);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        expectedModel.commitTriviaBundle();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void execute_someTriviaFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Index indexLastCard \u003d Index.fromOneBased(model.getFilteredCardList().size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Card lastCard \u003d model.getFilteredCardList().get(indexLastCard.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        CardBuilder cardInList \u003d new CardBuilder(lastCard);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Card editedCard \u003d cardInList.withQuestion(VALID_QUESTION_GIT_COMMIT)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .withTopics(VALID_TOPIC_PHYSICS).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder().withQuestion(VALID_QUESTION_GIT_COMMIT)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .withTopics(VALID_TOPIC_PHYSICS).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastCard, descriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CARD_SUCCESS, editedCard);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new TriviaBundle(model.getTriviaBundle()), new TriviaResults(), new UserPrefs());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        expectedModel.updateCard(lastCard, editedCard);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        expectedModel.commitTriviaBundle();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void execute_noTriviaFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_CARD, new EditCardDescriptor());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Card editedCard \u003d model.getFilteredCardList().get(INDEX_FIRST_CARD.getZeroBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CARD_SUCCESS, editedCard);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new TriviaBundle(model.getTriviaBundle()), new TriviaResults(), new UserPrefs());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        expectedModel.commitTriviaBundle();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void execute_filteredTriviaList_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        showCardAtIndex(model, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Card cardInFilteredList \u003d model.getFilteredCardList().get(INDEX_FIRST_CARD.getZeroBased());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Card editedCard \u003d new CardBuilder(cardInFilteredList).withQuestion(VALID_QUESTION_GIT_COMMIT).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_CARD,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new EditCardDescriptorBuilder().withQuestion(VALID_QUESTION_GIT_COMMIT).build());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CARD_SUCCESS, editedCard);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new TriviaBundle(model.getTriviaBundle()), new TriviaResults(), new UserPrefs());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        expectedModel.updateCard(model.getFilteredCardList().get(0), editedCard);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        expectedModel.commitTriviaBundle();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void execute_duplicateCardUnfilteredList_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Card firstCard \u003d model.getFilteredCardList().get(INDEX_FIRST_CARD.getZeroBased());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder(firstCard).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_CARD, descriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void execute_duplicateCardFilteredList_failure() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        showCardAtIndex(model, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // edit card in filtered list into a duplicate in trivia bundle"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Card cardInList \u003d model.getTriviaBundle().getCardList().get(INDEX_SECOND_CARD.getZeroBased());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_CARD,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new EditCardDescriptorBuilder(cardInList).build());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void execute_invalidCardIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCardList().size() + 1);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder().withQuestion(VALID_QUESTION_GIT_COMMIT).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void execute_invalidCardIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        showCardAtIndex(model, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_CARD;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of trivia bundle list"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTriviaBundle().getCardList().size());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new EditCardDescriptorBuilder().withQuestion(VALID_QUESTION_GIT_COMMIT).build());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    // TODO To enable this after undo/redo command is implemented on trivia."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        // edit -\u003e first person edited"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    // expectedModel);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        // redo -\u003e same first person edited again"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    // expectedModel);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //     * 1. Edits a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //     * 2. Undo the edit."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    // expectedModel);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        // redo -\u003e edits same second person in unfiltered person list"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    // expectedModel);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_CARD, DESC_EARTH_FLAT);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        EditCardDescriptor copyDescriptor \u003d new EditCardDescriptor(DESC_EARTH_FLAT);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_CARD, copyDescriptor);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(standardCommand.equals(1));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_CARD, DESC_EARTH_FLAT)));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_CARD, DESC_GIT_COMMIT)));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 157,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TOPIC_PHYSICS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_FROM_APP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_FROM_TEST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaResults;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.matchtest.MatchTest;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.topic.Topic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.testutil.TypicalCards;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private CommandHistory commandHistory;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), TypicalCards.getTypicalTriviaBundle(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new TriviaResults(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void cleanUp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (model.isInTestingState()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            model.stopTriviaTest();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // during NORMAL AppState"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d new ExitCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(MESSAGE_EXIT_FROM_APP, result.feedbackToUser);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // during TEST/MATCH_TEST AppState"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        MatchTest matchTest \u003d new MatchTest(new Topic(VALID_TOPIC_PHYSICS), model.getTriviaBundle());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        model.startTriviaTest(matchTest);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(model.isInTestingState());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        result \u003d new ExitCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(MESSAGE_EXIT_FROM_TEST, result.feedbackToUser);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 36,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CARDS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.Q_CAPITAL_SG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.Q_EARTH_ROUND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.Q_GIT_MERGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalTriviaBundle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaResults;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalTriviaBundle(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            new TriviaResults(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalTriviaBundle(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            new TriviaResults(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        QuestionContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new QuestionContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        QuestionContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new QuestionContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void execute_zeroKeywords_noCardFound() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CARDS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        QuestionContainsKeywordsPredicate predicate \u003d prepareQuestionPredicate(\" \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        expectedModel.updateFilteredCardList(predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredCardList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void execute_multipleKeywords_multipleCardsFound() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CARDS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        QuestionContainsKeywordsPredicate predicate \u003d prepareQuestionPredicate(\"merge earth capital\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        expectedModel.updateFilteredCardList(predicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(Arrays.asList(Q_EARTH_ROUND, Q_GIT_MERGE, Q_CAPITAL_SG), model.getFilteredCardList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Parses {@code userInput} into a {@code QuestionContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private QuestionContainsKeywordsPredicate prepareQuestionPredicate(String userInput) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return new QuestionContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 28,
      "-": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ImportCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalTriviaBundle;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaResults;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.testutil.FileUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "public class ImportCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalTriviaBundle(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            new TriviaResults(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public void execute_cardsAcceptedByModel_importSuccessful() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        File file \u003d FileUtil.getTypicalImportFile();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        CommandResult commandResult \u003d new ImportCommand(file).execute(model, commandHistory);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        // same success msg"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        assertEquals(String.format(ImportCommand.MESSAGE_SUCCESS, file.getName()), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        // TODO: verify same cards imported"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        // same command history"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public void constructor_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        new ImportCommand(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public void execute_isFile_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        // no such file"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        File noSuchFile \u003d FileUtil.getDummyImportFile();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        ImportCommand importCommand \u003d new ImportCommand(noSuchFile);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        thrown.expectMessage(ImportCommand.MESSAGE_INVALID_FILE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        importCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public void execute_isValidFileType_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        // invalid file type"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        File invalidFile \u003d FileUtil.getInvalidImportFile();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        ImportCommand importCommand \u003d new ImportCommand(invalidFile);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        thrown.expectMessage(ImportCommand.MESSAGE_INVALID_FILE_TYPE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        importCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public void execute_isFileReadable_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        File unreadableFile \u003d FileUtil.getInvalidImportFile();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        unreadableFile.mkdir(); // simulate throwing IO_exception"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        ImportCommand importCommand \u003d new ImportCommand(unreadableFile);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        thrown.expectMessage(ImportCommand.MESSAGE_INVALID_FILE_TYPE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        importCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    // TODO: ignore duplicates found in import file"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    // TODO: compare imported questions and answers to expected"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    // public void equals() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 3,
      "hozongsien": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showCardAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalTriviaBundle;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaResults;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalTriviaBundle(), new TriviaResults(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), model.getTriviaBundle(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new TriviaResults(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        showCardAtIndex(model, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 5,
      "-": 36,
      "hozongsien": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/MatchCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TOPIC_PHYSICS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.Q_EARTH_ROUND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.Q_FORCE_FORMULA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalTriviaBundle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaResults;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.matchtest.MatchTest;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.topic.Topic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.testutil.MatchTestUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class MatchCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private MatchTest matchTest;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private MatchTest expectedMatchTest;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalTriviaBundle(), new TriviaResults(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), getTypicalTriviaBundle(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new TriviaResults(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        matchTest \u003d new MatchTest(new Topic(VALID_TOPIC_PHYSICS), model.getTriviaBundle());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        model.startTriviaTest(matchTest);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        expectedMatchTest \u003d new MatchTest(new Topic(VALID_TOPIC_PHYSICS), model.getTriviaBundle());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        expectedModel.startTriviaTest(expectedMatchTest);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void cleanUp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (model.isInTestingState()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            model.stopTriviaTest();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (expectedModel.isInTestingState()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            expectedModel.stopTriviaTest();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void execute_matchSuccess() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // Matching for the first time"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertMatchCommandSuccess(Q_EARTH_ROUND);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // Matching for the second time"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertMatchCommandSuccess(Q_FORCE_FORMULA);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void execute_matchFailure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Index wrongCardCombiQ \u003d MatchTestUtil.getIndexes(matchTest, Q_EARTH_ROUND)[0];"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Index wrongCardCombiA \u003d MatchTestUtil.getIndexes(matchTest, Q_FORCE_FORMULA)[1];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandFailure(new MatchCommand(wrongCardCombiQ, wrongCardCombiA), model, commandHistory,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                MatchCommand.MESSAGE_MATCH_FAILURE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void execute_matchError() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // Index out of bound"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandFailure(new MatchCommand(Index.fromZeroBased(100), Index.fromZeroBased(105)), model,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                commandHistory, MatchCommand.MESSAGE_INDEX_OUT_OF_BOUND);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Execute the match command using the card\u0027s question and answer to simulate a matching success."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private void assertMatchCommandSuccess(Card cardToMatch) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Index[] expectedCorrectIndexes \u003d MatchTestUtil.getIndexes(expectedMatchTest, cardToMatch);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        expectedModel.matchQuestionAndAnswer(expectedCorrectIndexes[0], expectedCorrectIndexes[1]);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Index[] correctIndexes \u003d MatchTestUtil.getIndexes(matchTest, cardToMatch);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandSuccess(new MatchCommand(correctIndexes[0], correctIndexes[1]), model, commandHistory,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                MatchCommand.MESSAGE_MATCH_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/MatchTestCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TOPIC_NO_TOPIC;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TOPIC_PHYSICS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalTriviaBundle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaResults;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.matchtest.MatchTest;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.topic.Topic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class MatchTestCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalTriviaBundle(), new TriviaResults(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), model.getTriviaBundle(), new TriviaResults(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void cleanUp() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (model.isInTestingState()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            model.stopTriviaTest();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (expectedModel.isInTestingState()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            expectedModel.stopTriviaTest();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void execute_testStartedSuccessfully() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        expectedModel.startTriviaTest(new MatchTest(new Topic(VALID_TOPIC_PHYSICS), expectedModel.getTriviaBundle()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandSuccess(new MatchTestCommand(new Topic(VALID_TOPIC_PHYSICS)), model, commandHistory,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                MatchTestCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void execute_testDidNotStart() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandFailure(new MatchTestCommand(new Topic(VALID_TOPIC_NO_TOPIC)), model, commandHistory,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                MatchTest.MESSAGE_MATCH_TEST_CONSTRAINS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalTriviaBundle;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaResults;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalTriviaBundle(),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            new TriviaResults(), new UserPrefs());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalTriviaBundle(),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            new TriviaResults(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "    TODO do this after deleteFirstPerson is implemented"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        model.undoTriviaBundle();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        model.undoTriviaBundle();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        expectedModel.undoTriviaBundle();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        expectedModel.undoTriviaBundle();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "    */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        expectedModel.redoTriviaBundle();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        expectedModel.redoTriviaBundle();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhui2778": 13,
      "JunWei96": 4,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showCardAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalTriviaBundle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CARD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaResults;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalTriviaBundle(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            new TriviaResults(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalTriviaBundle(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            new TriviaResults(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        Index lastCardIndex \u003d Index.fromOneBased(model.getFilteredCardList().size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        assertExecutionSuccess(lastCardIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredCardList().size() + 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        showCardAtIndex(model, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        showCardAtIndex(expectedModel, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        showCardAtIndex(model, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        showCardAtIndex(expectedModel, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_CARD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getTriviaBundle().getCardList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_CARD);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_CARD_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 5,
      "-": 98,
      "hozongsien": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalTriviaBundle;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaResults;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalTriviaBundle(),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            new TriviaResults(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalTriviaBundle(),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            new TriviaResults(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        model.addCard(new Card(new Question(\"how are you\"), new Answer(\"I am fine\"), new HashSet\u003cTag\u003e()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        model.addCard(new Card(new Question(\"how are you2\"), new Answer(\"I am fine2\"), new HashSet\u003cTag\u003e()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        expectedModel.addCard(new Card(new Question(\"how are you\"), new Answer(\"I am fine\"), new HashSet\u003cTag\u003e()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        expectedModel.addCard(new Card(new Question(\"how are you2\"), new Answer(\"I am fine2\"), new HashSet\u003cTag\u003e()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhui2778"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        model.addCard(Q_FLAT_EARTH);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        model.addCard(Q_GIT_COMMIT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        expectedModel.addCard(Q_FLAT_EARTH);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        expectedModel.addCard(Q_GIT_COMMIT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        expectedModel.undoTriviaBundle();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        expectedModel.undoTriviaBundle();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhui2778"
        },
        "content": "        */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhui2778": 17,
      "JunWei96": 4,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ANSWER_DESC_EARTH_FLAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ANSWER_DESC_GIT_COMMIT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ANSWER_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_QUESTION_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TOPIC_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUESTION_DESC_EARTH_FLAT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUESTION_DESC_GIT_COMMIT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TOPIC_DESC_GIT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TOPIC_DESC_PHYSICS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TOPIC_NO_TOPIC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TOPIC_PHYSICS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.Q_FLAT_EARTH;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Answer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Question;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.topic.Topic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Card expectedCard \u003d new CardBuilder(Q_FLAT_EARTH).withTopics(VALID_TOPIC_PHYSICS).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + QUESTION_DESC_EARTH_FLAT + ANSWER_DESC_EARTH_FLAT"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                + TOPIC_DESC_PHYSICS, new AddCommand(expectedCard));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // multiple questions - last question accepted"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertParseSuccess(parser, QUESTION_DESC_GIT_COMMIT + QUESTION_DESC_EARTH_FLAT"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                + ANSWER_DESC_EARTH_FLAT + TOPIC_DESC_PHYSICS, new AddCommand(expectedCard));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // multiple answers - last answer accepted"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertParseSuccess(parser, QUESTION_DESC_EARTH_FLAT + ANSWER_DESC_GIT_COMMIT + ANSWER_DESC_EARTH_FLAT"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                + TOPIC_DESC_PHYSICS, new AddCommand(expectedCard));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Card expectedPersonMultipleTags \u003d new CardBuilder(Q_FLAT_EARTH).withTopics(VALID_TOPIC_PHYSICS,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                VALID_TOPIC_PHYSICS).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertParseSuccess(parser, QUESTION_DESC_EARTH_FLAT + ANSWER_DESC_EARTH_FLAT"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                + TOPIC_DESC_PHYSICS + TOPIC_DESC_GIT, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Card expectedCard \u003d new CardBuilder(Q_FLAT_EARTH).withTopics().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertParseSuccess(parser, QUESTION_DESC_EARTH_FLAT + ANSWER_DESC_EARTH_FLAT + VALID_TOPIC_NO_TOPIC,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new AddCommand(expectedCard));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // missing question prefix"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertParseFailure(parser, ANSWER_DESC_EARTH_FLAT + TOPIC_DESC_PHYSICS, expectedMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // missing answer prefix"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertParseFailure(parser, QUESTION_DESC_EARTH_FLAT + TOPIC_DESC_PHYSICS, expectedMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // invalid question"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertParseFailure(parser, INVALID_QUESTION_DESC + ANSWER_DESC_EARTH_FLAT + TOPIC_DESC_PHYSICS,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                Question.MESSAGE_QUESTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // invalid answer"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertParseFailure(parser, QUESTION_DESC_EARTH_FLAT + INVALID_ANSWER_DESC + TOPIC_DESC_PHYSICS,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                Answer.MESSAGE_ANSWER_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // invalid topic"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertParseFailure(parser, QUESTION_DESC_EARTH_FLAT + ANSWER_DESC_EARTH_FLAT + INVALID_TOPIC_DESC"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                + VALID_TOPIC_PHYSICS, Topic.MESSAGE_TOPIC_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertParseFailure(parser, INVALID_QUESTION_DESC + INVALID_ANSWER_DESC + TOPIC_DESC_PHYSICS,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                Question.MESSAGE_QUESTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + QUESTION_DESC_EARTH_FLAT + ANSWER_DESC_EARTH_FLAT"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                        + TOPIC_DESC_PHYSICS, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 50,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TOPIC_DESC_GIT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TOPIC_DESC_PHYSICS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TOPIC_PHYSICS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.FileUtil.getImportCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditCardDescriptor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.logic.commands.MatchCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.logic.commands.MatchTestCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.card.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaResults;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.matchtest.MatchTest;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.topic.Topic;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.CardUtil;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditCardDescriptorBuilder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.testutil.FileUtil;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.testutil.TypicalCards;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private AddressBookParser parser;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        model \u003d new ModelManager(new AddressBook(), TypicalCards.getTypicalTriviaBundle(), new TriviaResults(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void cleanUp() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (model.isInTestingState()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            model.stopTriviaTest();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Card card \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        AddCommand command \u003d (AddCommand) parseCommand(CardUtil.getAddCommand(card));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(new AddCommand(card), command);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parseCommand("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Card card \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder(card).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        EditCommand command \u003d (EditCommand) parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_CARD.getOneBased() + \" \" + CardUtil.getEditCardDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_CARD, descriptor), command);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // In NORMAL state"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // In Matching test state"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        model.startTriviaTest(new MatchTest(new Topic(VALID_TOPIC_PHYSICS), model.getTriviaBundle()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        FindCommand command \u003d (FindCommand) parseCommand("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(new FindCommand(new QuestionContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            parseCommand(\"histories\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parseCommand("
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public void parseCommand_import() throws Exception {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        File typicalFile \u003d FileUtil.getTypicalImportFile();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        ImportCommand command \u003d (ImportCommand) parseCommand(getImportCommand(typicalFile));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        assertEquals(new ImportCommand(typicalFile), command);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void parseCommand_matchTest() throws Exception {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(parseCommand(MatchTestCommand.COMMAND_WORD + \" \" + TOPIC_DESC_PHYSICS)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                instanceof MatchTestCommand);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(parseCommand(MatchTestCommand.COMMAND_WORD + \" \" + TOPIC_DESC_GIT)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                instanceof MatchTestCommand);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void parseCommand_match() throws Exception {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        model.startTriviaTest(new MatchTest(new Topic(VALID_TOPIC_PHYSICS),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                model.getTriviaBundle()));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(parseCommand(\"1 2\") instanceof MatchCommand);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // Will only take the first 2"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(parseCommand(\"3 4 5 6\") instanceof MatchCommand);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(parseCommand(\"3 4 5 6\")"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .equals(new MatchCommand(Index.fromOneBased(3), Index.fromOneBased(4))));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        parseCommand(\"\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Command parseCommand(String input) throws ParseException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return parser.parseCommand(input, model.getAppState());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 84,
      "-": 123,
      "hozongsien": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String argsString \u003d \"  some random string /t topic with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ANSWER_DESC_EARTH_FLAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ANSWER_DESC_GIT_COMMIT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ANSWER_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_QUESTION_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TOPIC_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUESTION_DESC_EARTH_FLAT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUESTION_DESC_GIT_COMMIT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TOPIC_DESC_GIT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TOPIC_DESC_PHYSICS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_EARTH_FLAT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_GIT_COMMIT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_EARTH_FLAT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_GIT_COMMIT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TOPIC_GIT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TOPIC_PHYSICS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TOPIC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CARD;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_CARD;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditCardDescriptor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Answer;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Question;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.topic.Topic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.testutil.EditCardDescriptorBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TOPIC;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertParseFailure(parser, VALID_QUESTION_EARTH_FLAT, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertParseFailure(parser, \"-5\" + QUESTION_DESC_GIT_COMMIT, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertParseFailure(parser, \"0\" + QUESTION_DESC_GIT_COMMIT, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_QUESTION_DESC,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                Question.MESSAGE_QUESTION_CONSTRAINTS); // invalid question"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ANSWER_DESC,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                Answer.MESSAGE_ANSWER_CONSTRAINTS); // invalid answer"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TOPIC_DESC, Topic.MESSAGE_TOPIC_CONSTRAINTS); // invalid topic"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // invalid question followed by valid answer"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_QUESTION_DESC + ANSWER_DESC_GIT_COMMIT,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                Question.MESSAGE_QUESTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // valid question followed by invalid question. The test case for invalid question followed by valid phone"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertParseFailure(parser, \"1\" + QUESTION_DESC_EARTH_FLAT + INVALID_QUESTION_DESC,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                Question.MESSAGE_QUESTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // while parsing {@code PREFIX_TOPIC} alone will reset the tags of the {@code Card} being edited,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // parsing it together with a valid topic results in error"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertParseFailure(parser, \"1\" + TOPIC_DESC_PHYSICS + TOPIC_DESC_GIT + TAG_EMPTY,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                Topic.MESSAGE_TOPIC_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertParseFailure(parser, \"1\" + TOPIC_DESC_PHYSICS + TAG_EMPTY + TOPIC_DESC_GIT,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                Topic.MESSAGE_TOPIC_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TOPIC_DESC_PHYSICS + TOPIC_DESC_GIT,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                Topic.MESSAGE_TOPIC_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_QUESTION_DESC + INVALID_ANSWER_DESC + VALID_TOPIC_PHYSICS,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                Question.MESSAGE_QUESTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_CARD;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ANSWER_DESC_EARTH_FLAT + QUESTION_DESC_EARTH_FLAT"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                + TOPIC_DESC_GIT;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder().withQuestion(VALID_QUESTION_EARTH_FLAT)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .withAnswer(VALID_ANSWER_EARTH_FLAT).withTopics(VALID_TOPIC_GIT).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ANSWER_DESC_EARTH_FLAT + TOPIC_DESC_PHYSICS;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder().withAnswer(VALID_ANSWER_EARTH_FLAT)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .withTopics(VALID_TOPIC_PHYSICS).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // question"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_CARD;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + QUESTION_DESC_EARTH_FLAT;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder().withQuestion(VALID_QUESTION_EARTH_FLAT).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // answer"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ANSWER_DESC_EARTH_FLAT;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        descriptor \u003d new EditCardDescriptorBuilder().withAnswer(VALID_ANSWER_EARTH_FLAT).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TOPIC_DESC_PHYSICS;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        descriptor \u003d new EditCardDescriptorBuilder().withTopics(VALID_TOPIC_PHYSICS).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + QUESTION_DESC_EARTH_FLAT + ANSWER_DESC_EARTH_FLAT"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                + QUESTION_DESC_GIT_COMMIT + ANSWER_DESC_GIT_COMMIT + TOPIC_DESC_PHYSICS + TOPIC_DESC_GIT;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder().withQuestion(VALID_QUESTION_GIT_COMMIT)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .withAnswer(VALID_ANSWER_GIT_COMMIT).withTopics(VALID_TOPIC_PHYSICS, VALID_TOPIC_GIT)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_ANSWER_DESC + ANSWER_DESC_GIT_COMMIT;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder().withAnswer(VALID_ANSWER_GIT_COMMIT).build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ANSWER_DESC_GIT_COMMIT + INVALID_QUESTION_DESC"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                + VALID_QUESTION_EARTH_FLAT + TOPIC_DESC_GIT;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        descriptor \u003d new EditCardDescriptorBuilder().withQuestion(VALID_QUESTION_EARTH_FLAT)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .withAnswer(VALID_ANSWER_GIT_COMMIT).withTopics(VALID_TOPIC_GIT).build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_CARD;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        EditCardDescriptor descriptor \u003d new EditCardDescriptorBuilder().withTopics().build();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 81,
      "-": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new FindCommand(new QuestionContainsKeywordsPredicate(Arrays.asList(\"Why\", \"earth\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertParseSuccess(parser, \"Why earth\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertParseSuccess(parser, \" \\n Why \\n \\t earth  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 4,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ImportCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import static seedu.address.testutil.FileUtil.EMPTY_FILE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.testutil.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "public class ImportCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    private ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    // TODO: to implement after setting up FileUtil class"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        File testFile \u003d FileUtil.getEmptyImportFile();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        // normal"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        assertParseSuccess(parser, EMPTY_FILE.toString(), new ImportCommand(testFile));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + EMPTY_FILE.toString(), new ImportCommand(testFile));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_WHITESPACE,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hozongsien": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/MatchCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.logic.commands.MatchCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class MatchCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private MatchCommandParser parser \u003d new MatchCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void test_parseSuccess() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        MatchCommand expectedCommand \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new MatchCommand(Index.fromOneBased(1), Index.fromOneBased(2));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertParseSuccess(parser, \"1 2\", expectedCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertParseSuccess(parser, \"   1 2    \", expectedCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertParseSuccess(parser, \"   1 2  3  \", expectedCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertParseSuccess(parser, \"1 2 3 4 5   \", expectedCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void test_parseFailure() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                MatchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertParseFailure(parser, \"sd sa\", String.format(ParserUtil.MESSAGE_INVALID_INDEX,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                MatchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertParseFailure(parser, \"sd\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                MatchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertParseFailure(parser, \"    sd    \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                MatchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/MatchTestCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TOPIC_DESC_PHYSICS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TOPIC_PHYSICS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.logic.commands.MatchTestCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.topic.Topic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class MatchTestCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private MatchTestCommandParser parser \u003d new MatchTestCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void parse_validArgs_returnsMatchTestCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertParseSuccess(parser, TOPIC_DESC_PHYSICS, new MatchTestCommand(new Topic(VALID_TOPIC_PHYSICS)));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertParseFailure(parser, \"-sdds\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                MatchTestCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TimeLimit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.topic.Topic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String INVALID_TOPIC \u003d \"#topic\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String VALID_TOPIC_1 \u003d \"physics\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String VALID_TOPIC_2 \u003d \"english\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void parseTopic_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        ParserUtil.parseTopic(null);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void parseTopic_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        ParserUtil.parseTopic(INVALID_TOPIC);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void parseTopic_validValueWithoutWhitespace_returnsTopic() throws Exception {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Topic expectedTopic \u003d new Topic(VALID_TOPIC_1);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(expectedTopic, ParserUtil.parseTopic(VALID_TOPIC_1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void parseTopic_validValueWithWhitespace_returnsTrimmedTopic() throws Exception {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String topicWithWhitespace \u003d WHITESPACE + VALID_TOPIC_1 + WHITESPACE;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Topic expectedTopic \u003d new Topic(VALID_TOPIC_1);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(expectedTopic, ParserUtil.parseTopic(topicWithWhitespace));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void parseTopics_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        ParserUtil.parseTopics(null);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void parseTopics_collectionWithInvalidTopics_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        ParserUtil.parseTopics(Arrays.asList(VALID_TOPIC_1, INVALID_TOPIC));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void parseTopics_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(ParserUtil.parseTopics(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void parseTopics_collectionWithValidTopics_returnsTopicSet() throws Exception {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Set\u003cTopic\u003e actualTopicSet \u003d ParserUtil.parseTopics(Arrays.asList(VALID_TOPIC_1, VALID_TOPIC_2));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Set\u003cTopic\u003e expectedTopicSet \u003d new HashSet\u003cTopic\u003e(Arrays.asList(new Topic(VALID_TOPIC_1),"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new Topic(VALID_TOPIC_2)));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(expectedTopicSet, actualTopicSet);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void parseTimeLimit() throws Exception {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(new TimeLimit(\"2\"), ParserUtil.parseTimeLimit(\"  2   \"));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        ParserUtil.parseTimeLimit(\"notTimeLimit\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        ParserUtil.parseTimeLimit(\"-5\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 35,
      "-": 184
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CARDS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.Q_EARTH_ROUND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.Q_GIT_CLONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaResults;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.testutil.TriviaBundleBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.hasPerson(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void hasCard_nullCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        modelManager.hasCard(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void hasCard_cardNotInTriviaBundle_returnsFalse() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(modelManager.hasCard(Q_EARTH_ROUND));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void hasCard_cardInTriviaBundle_returnsTrue() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        modelManager.addCard(Q_EARTH_ROUND);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(modelManager.hasCard(Q_EARTH_ROUND));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void getFilteredCardList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        modelManager.getFilteredCardList().remove(0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        TriviaBundle triviaBundle \u003d new TriviaBundleBuilder().withCard(Q_EARTH_ROUND).withCard(Q_GIT_CLONE).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        TriviaBundle differentTriviaBundle \u003d new TriviaBundle();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, triviaBundle, new TriviaResults(), userPrefs);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, triviaBundle, new TriviaResults(), userPrefs);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, differentTriviaBundle,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new TriviaResults(), userPrefs)));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String[] keywords \u003d Q_EARTH_ROUND.getQuestion().value.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        modelManager.updateFilteredCardList(new QuestionContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, triviaBundle, new TriviaResults(),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                userPrefs)));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        modelManager.updateFilteredCardList(PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, triviaBundle, new TriviaResults(),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                userPrefs)));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(addressBook, triviaBundle, new TriviaResults(),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                differentUserPrefs)));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 49,
      "-": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/model/TriviaBundleTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_GIT_COMMIT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TOPIC_GIT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.Q_CAPITAL_SG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.Q_EARTH_ROUND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalTriviaBundle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.exceptions.DuplicateCardException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class TriviaBundleTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final TriviaBundle triviaBundle \u003d new TriviaBundle();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(Collections.emptyList(), triviaBundle.getCardList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        triviaBundle.resetData(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void resetData_withValidReadOnlyTriviaBundle_replacesData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        TriviaBundle newData \u003d getTypicalTriviaBundle();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        triviaBundle.resetData(newData);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(newData, triviaBundle);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void resetData_withDuplicateCards_throwsDuplicateCardException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // Two cards with the same identity fields"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Card editedEarthRoundQ \u003d new CardBuilder(Q_EARTH_ROUND).withAnswer(VALID_ANSWER_GIT_COMMIT)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .withTopics(VALID_TOPIC_GIT).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        List\u003cCard\u003e newCards \u003d Arrays.asList(Q_EARTH_ROUND, editedEarthRoundQ);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        TriviaBundleStub newData \u003d new TriviaBundleStub(newCards);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(DuplicateCardException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        triviaBundle.resetData(newData);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void hasCard_nullCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        triviaBundle.hasCard(null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void hasCard_cardNotInTriviaBundle_returnsFalse() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(triviaBundle.hasCard(Q_CAPITAL_SG));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void hasCard_cardInTriviaBundle_returnsTrue() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        triviaBundle.addCard(Q_EARTH_ROUND);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(triviaBundle.hasCard(Q_EARTH_ROUND));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void hasCard_cardWithSameIdentityFieldsInTriviaBundle_returnsTrue() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        triviaBundle.addCard(Q_EARTH_ROUND);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Card editedEarthRoundQ \u003d new CardBuilder(Q_EARTH_ROUND).withAnswer(VALID_ANSWER_GIT_COMMIT)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .withTopics(VALID_TOPIC_GIT).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(triviaBundle.hasCard(editedEarthRoundQ));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void getCardList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        triviaBundle.getCardList().remove(0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * A stub ReadOnlyTriviaBundle whose cards list can violate interface constraints."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static class TriviaBundleStub implements ReadOnlyTriviaBundle {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        private final ObservableList\u003cCard\u003e cards \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        TriviaBundleStub(Collection\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            this.cards.setAll(cards);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        public ObservableList\u003cCard\u003e getCardList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            return cards;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        public ObservableList\u003cCard\u003e getListOfCardFilteredByTopic(Predicate\u003cCard\u003e predicate) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            return cards;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedTriviaBundleTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.Q_CAPITAL_SG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.Q_EARTH_ROUND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.Q_GIT_COMMIT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.testutil.TriviaBundleBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class VersionedTriviaBundleTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final ReadOnlyTriviaBundle triviaBundleWithEarthRoundQ \u003d new TriviaBundleBuilder()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            .withCard(Q_EARTH_ROUND).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final ReadOnlyTriviaBundle triviaBundleWithGitCommitQ \u003d new TriviaBundleBuilder()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            .withCard(Q_GIT_COMMIT).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final ReadOnlyTriviaBundle triviaBundleWithCapitalSgQ \u003d new TriviaBundleBuilder()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            .withCard(Q_CAPITAL_SG).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final ReadOnlyTriviaBundle emptyTriviaBundle \u003d new TriviaBundleBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void commit_singleTriviaBundle_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        VersionedTriviaBundle versionedTriviaBundle \u003d prepareAddressBookList(emptyTriviaBundle);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        versionedTriviaBundle.commit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertAddressBookListStatus(versionedTriviaBundle,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                Collections.singletonList(emptyTriviaBundle),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                emptyTriviaBundle,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void commit_multipleTriviaBundlePointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        VersionedTriviaBundle versionedTriviaBundle \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                emptyTriviaBundle, triviaBundleWithEarthRoundQ, triviaBundleWithGitCommitQ);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        versionedTriviaBundle.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertAddressBookListStatus(versionedTriviaBundle,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                Arrays.asList(emptyTriviaBundle, triviaBundleWithEarthRoundQ, triviaBundleWithGitCommitQ),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                triviaBundleWithGitCommitQ,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void commit_multipleTriviaBundlePointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        VersionedTriviaBundle versionedTriviaBundle \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                emptyTriviaBundle, triviaBundleWithEarthRoundQ, triviaBundleWithGitCommitQ);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTriviaBundle, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        versionedTriviaBundle.commit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertAddressBookListStatus(versionedTriviaBundle,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                Collections.singletonList(emptyTriviaBundle),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                emptyTriviaBundle,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Asserts that {@code versionedTriviaBundle} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * states before {@code versionedTriviaBundle#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * and states after {@code versionedTriviaBundle#currentStatePointer} is equal to"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private void assertAddressBookListStatus(VersionedTriviaBundle versionedTriviaBundle,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                                             List\u003cReadOnlyTriviaBundle\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                                             ReadOnlyTriviaBundle expectedCurrentState,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                                             List\u003cReadOnlyTriviaBundle\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(new TriviaBundle(versionedTriviaBundle), expectedCurrentState);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        while (versionedTriviaBundle.canUndo()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            versionedTriviaBundle.undo();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        for (ReadOnlyTriviaBundle expectedTriviaBundle : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            assertEquals(expectedTriviaBundle, new TriviaBundle(versionedTriviaBundle));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            versionedTriviaBundle.redo();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        for (ReadOnlyTriviaBundle expectedTriviaBundle: expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            versionedTriviaBundle.redo();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            assertEquals(expectedTriviaBundle, new TriviaBundle(versionedTriviaBundle));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(versionedTriviaBundle.canRedo());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedTriviaBundle.undo());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Creates and returns a {@code VersionedTriviaBundle} with the {@code triviaBundleStates} added into it, and the"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * {@code VersionedTriviaBundle#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private VersionedTriviaBundle prepareAddressBookList(ReadOnlyTriviaBundle... triviaBundleStates) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(triviaBundleStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        VersionedTriviaBundle versionedTriviaBundle \u003d new VersionedTriviaBundle(triviaBundleStates[0]);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        for (int i \u003d 1; i \u003c triviaBundleStates.length; i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            versionedTriviaBundle.resetData(triviaBundleStates[i]);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            versionedTriviaBundle.commit();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return versionedTriviaBundle;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Shifts the {@code versionedTriviaBundle#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedTriviaBundle versionedTriviaBundle, int count) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            versionedTriviaBundle.undo();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/model/card/AnswerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class AnswerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Question(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String invalidQuestion \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Question(invalidQuestion));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void isValidQuestion() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // null answer"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Question.isValidQuestion(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // invalid answer"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(Question.isValidQuestion(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(Question.isValidQuestion(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // valid answer"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"this is a question\")); // alphabets only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"1234\")); // numbers only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"question 1 2 3  4\")); // alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"Capital Tan?\")); // with capital letters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"*@#*) weird question but still a question\")); // long names"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/card/CardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_GIT_COMMIT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TOPIC_GIT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.Q_EARTH_ROUND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.Q_GIT_CLONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class CardTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Card card \u003d new CardBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        card.getTopics().remove(0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Card earthRoundQCopy \u003d new CardBuilder(Q_EARTH_ROUND).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(Q_EARTH_ROUND.equals(earthRoundQCopy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(Q_EARTH_ROUND.equals(Q_EARTH_ROUND));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(Q_EARTH_ROUND.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(Q_EARTH_ROUND.equals(5));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // different card -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(Q_EARTH_ROUND.equals(Q_GIT_CLONE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // different question -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Card editedEarthRoundQ \u003d new CardBuilder(Q_EARTH_ROUND).withQuestion(VALID_QUESTION_GIT_COMMIT).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(editedEarthRoundQ.equals(Q_EARTH_ROUND));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // different answer -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        editedEarthRoundQ \u003d new CardBuilder(Q_EARTH_ROUND).withQuestion(VALID_QUESTION_GIT_COMMIT).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(editedEarthRoundQ.equals(Q_EARTH_ROUND));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // different tags -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        editedEarthRoundQ \u003d new CardBuilder(Q_EARTH_ROUND).withTopics(VALID_TOPIC_GIT).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(editedEarthRoundQ.equals(Q_EARTH_ROUND));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/model/card/QuestionContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class QuestionContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        QuestionContainsKeywordsPredicate firstPredicate \u003d new"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                QuestionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        QuestionContainsKeywordsPredicate secondPredicate \u003d new"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                QuestionContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        QuestionContainsKeywordsPredicate firstPredicateCopy \u003d new"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                QuestionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void test_questionContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        QuestionContainsKeywordsPredicate predicate \u003d new"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                QuestionContainsKeywordsPredicate(Collections.singletonList(\"Why\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(predicate.test(new CardBuilder().withQuestion(\"Why is the earth round?\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"Why\", \"earth\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(predicate.test(new CardBuilder().withQuestion(\"Why is the earth round?\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"Why\", \"Git\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(predicate.test(new CardBuilder().withQuestion(\"Why is the earth round?\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"wHy\", \"eArtH\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(predicate.test(new CardBuilder().withQuestion(\"Why is the earth round?\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void test_questionDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        QuestionContainsKeywordsPredicate predicate \u003d new QuestionContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(predicate.test(new CardBuilder().withQuestion(\"Why is the earth round?\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"Git\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(predicate.test(new CardBuilder().withQuestion(\"WHy is the earth round?\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // Keywords match answer, but does not match name"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"gravity\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(predicate.test(new CardBuilder().withQuestion(\"Why is the earth round?\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .withAnswer(\"because of gravity\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/model/card/QuestionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class QuestionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Answer(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String invalidAnswer \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Answer(invalidAnswer));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void isValidQuestion() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // null answer"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Answer.isValidAnswer(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // invalid question"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(Answer.isValidAnswer(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(Answer.isValidAnswer(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // valid question"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"answers are great!\")); // alphabets only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"1234\")); // numbers only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"question 1 2 3  4\")); // alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"Capital Tan?\")); // with capital letters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"*@#*) weird answer but still an answer\")); // long names"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/card/TagIsKeywordPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class TagIsKeywordPredicateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void test_cardContainsTag_returnsTrue() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        TopicIsKeywordPredicate predicate \u003d new TopicIsKeywordPredicate(\"Physics\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(predicate.test(new CardBuilder().withTopics(\"Physics\").build()));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // Caps insensitive"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(predicate.test(new CardBuilder().withTopics(\"pHySicS\").build()));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // Works for cards with multiple tags"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(predicate.test(new CardBuilder().withTopics(\"GeneralKnowledge\", \"Physics\").build()));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(predicate.test(new CardBuilder().withTopics(\"Physics\", \"GeneralKnowledge\").build()));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(predicate.test(new CardBuilder().withTopics(\"GeneralKnowledge\", \"Physics\", \"Git\").build()));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void test_cardDoesNotContainTag_returnsFalse() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        TopicIsKeywordPredicate predicate \u003d new TopicIsKeywordPredicate(\"NotATag\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(predicate.test(new CardBuilder().withTopics(\"ATag\").build()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // Works for cards with multiple tags"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(predicate.test(new CardBuilder().withTopics(\"ATag\", \"BTag\").build()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String firstTagKeyword \u003d \"first\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String secondTagKeyword \u003d \"second\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        TopicIsKeywordPredicate firstPredicate \u003d new"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                TopicIsKeywordPredicate(firstTagKeyword);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        TopicIsKeywordPredicate secondPredicate \u003d new"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                TopicIsKeywordPredicate(secondTagKeyword);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        TopicIsKeywordPredicate firstPredicateCopy \u003d new"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                TopicIsKeywordPredicate(firstTagKeyword);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/model/card/UniqueCardListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.model.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_GIT_COMMIT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TOPIC_GIT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.Q_EARTH_ROUND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.Q_GIT_CLONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.exceptions.CardNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.exceptions.DuplicateCardException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class UniqueCardListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private final UniqueCardList uniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void contains_nullCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        uniqueCardList.contains(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void contains_cardNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(uniqueCardList.contains(Q_EARTH_ROUND));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void contains_cardInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        uniqueCardList.add(Q_EARTH_ROUND);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(uniqueCardList.contains(Q_EARTH_ROUND));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void contains_cardWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        uniqueCardList.add(Q_EARTH_ROUND);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Card editedEarthRoundQ \u003d new CardBuilder(Q_EARTH_ROUND).withTopics(VALID_TOPIC_GIT).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(uniqueCardList.contains(editedEarthRoundQ));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void add_nullCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        uniqueCardList.add(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void add_duplicateCard_throwsDuplicateCardException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        uniqueCardList.add(Q_EARTH_ROUND);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(DuplicateCardException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        uniqueCardList.add(Q_EARTH_ROUND);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void setCard_nullTargetCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        uniqueCardList.setCard(null, Q_EARTH_ROUND);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void setCard_nullEditedCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        uniqueCardList.setCard(Q_EARTH_ROUND, null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void setCard_targetCardNotInList_throwsCardNotFoundException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(CardNotFoundException.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        uniqueCardList.setCard(Q_EARTH_ROUND, Q_EARTH_ROUND);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void setCard_editedCardIsSameCard_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        uniqueCardList.add(Q_EARTH_ROUND);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        uniqueCardList.setCard(Q_EARTH_ROUND, Q_EARTH_ROUND);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        expectedUniqueCardList.add(Q_EARTH_ROUND);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(expectedUniqueCardList, uniqueCardList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void setCard_editedCardHasSameIdentity_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        uniqueCardList.add(Q_EARTH_ROUND);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Card editedEarthRoundQ \u003d new CardBuilder(Q_EARTH_ROUND).withAnswer(VALID_ANSWER_GIT_COMMIT)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .withTopics(VALID_TOPIC_GIT).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        uniqueCardList.setCard(Q_EARTH_ROUND, editedEarthRoundQ);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        expectedUniqueCardList.add(editedEarthRoundQ);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(expectedUniqueCardList, uniqueCardList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void setCard_editedCardHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        uniqueCardList.add(Q_EARTH_ROUND);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        uniqueCardList.setCard(Q_EARTH_ROUND, Q_GIT_CLONE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        expectedUniqueCardList.add(Q_GIT_CLONE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(expectedUniqueCardList, uniqueCardList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void setCard_editedCardHasNonUniqueIdentity_throwsDuplicateCardException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        uniqueCardList.add(Q_EARTH_ROUND);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        uniqueCardList.add(Q_GIT_CLONE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(DuplicateCardException.class);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        uniqueCardList.setCard(Q_EARTH_ROUND, Q_GIT_CLONE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void remove_nullCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        uniqueCardList.remove(null);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void remove_cardDoesNotExist_throwsCardNotFoundException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(CardNotFoundException.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        uniqueCardList.remove(Q_EARTH_ROUND);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void remove_existingCard_removesCard() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        uniqueCardList.add(Q_EARTH_ROUND);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        uniqueCardList.remove(Q_EARTH_ROUND);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(expectedUniqueCardList, uniqueCardList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void setCards_nullUniqueCardList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        uniqueCardList.setCards((UniqueCardList) null);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void setCards_uniqueCardList_replacesOwnListWithProvidedUniqueCardList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        uniqueCardList.add(Q_EARTH_ROUND);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        expectedUniqueCardList.add(Q_GIT_CLONE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        uniqueCardList.setCards(expectedUniqueCardList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(expectedUniqueCardList, uniqueCardList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void setCards_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        uniqueCardList.setCards((List\u003cCard\u003e) null);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void setCards_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        uniqueCardList.add(Q_EARTH_ROUND);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        List\u003cCard\u003e personList \u003d Collections.singletonList(Q_GIT_CLONE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        uniqueCardList.setCards(personList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        UniqueCardList expectedUniqueCardList \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        expectedUniqueCardList.add(Q_GIT_CLONE);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(expectedUniqueCardList, uniqueCardList);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void setCards_listWithDuplicateCards_throwsDuplicateCardException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        List\u003cCard\u003e listWithDuplicateCards \u003d Arrays.asList(Q_EARTH_ROUND, Q_EARTH_ROUND);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(DuplicateCardException.class);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        uniqueCardList.setCards(listWithDuplicateCards);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        uniqueCardList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 185
    }
  },
  {
    "path": "src/test/java/seedu/address/model/test/TimeLimitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.model.test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class TimeLimitTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void valid_timeLimit() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(TimeLimit.isValidTimeLimit(\"1\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(TimeLimit.isValidTimeLimit(\"2\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(TimeLimit.isValidTimeLimit(\"100\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void invalid_timeLimit() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(TimeLimit.isValidTimeLimit(\"0\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(TimeLimit.isValidTimeLimit(\"-1\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(TimeLimit.isValidTimeLimit(\"-100\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TimeLimit(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new TimeLimit(\"-1\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new TimeLimit(\"-100\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        TimeLimit timeLimit \u003d new TimeLimit(\"2\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        TimeLimit timeLimitCopy \u003d new TimeLimit(String.valueOf(timeLimit.getValue()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(timeLimit.equals(timeLimitCopy));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(timeLimit.equals(timeLimit));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(timeLimit.equals(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(timeLimit.equals(5));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // different cards being tested -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(timeLimit.equals(new TimeLimit(\"3\")));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/model/test/matchtest/MatchAttemptTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.model.test.matchtest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_EARTH_FLAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_GIT_COMMIT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.Q_FLAT_EARTH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.Q_GIT_COMMIT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class MatchAttemptTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void testIncorrectAttempt() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // two obviously different cards"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(new MatchAttempt(Q_FLAT_EARTH, Q_GIT_COMMIT).isCorrect());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // different question but same answer and topic"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Card editedCard \u003d new CardBuilder(Q_FLAT_EARTH).withQuestion(VALID_QUESTION_GIT_COMMIT).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(new MatchAttempt(Q_FLAT_EARTH, editedCard).isCorrect());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void testCorrectAttempt() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // two obviously same cards"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(new MatchAttempt(Q_FLAT_EARTH, Q_FLAT_EARTH).isCorrect());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // different answer and topic but same question"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Card editedCard \u003d new CardBuilder(Q_GIT_COMMIT).withQuestion(VALID_QUESTION_EARTH_FLAT).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(new MatchAttempt(Q_FLAT_EARTH, editedCard).isCorrect());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        MatchAttempt matchAttempt \u003d new MatchAttempt(Q_FLAT_EARTH, Q_FLAT_EARTH);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        MatchAttempt matchAttemptCopy \u003d new MatchAttempt(Q_FLAT_EARTH, Q_FLAT_EARTH);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(matchAttempt.equals(matchAttemptCopy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(matchAttempt.equals(matchAttempt));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(matchAttempt.equals(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(matchAttempt.equals(5));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // different cards matched being tested -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(matchAttempt.equals(new MatchAttempt(Q_GIT_COMMIT, Q_GIT_COMMIT)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/model/test/matchtest/MatchTestTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.model.test.matchtest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TOPIC_GIT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TOPIC_NO_TOPIC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TOPIC_PHYSICS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.Q_DENSITY_FORMULA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.Q_EARTH_ROUND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.Q_FORCE_FORMULA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TestType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaResults;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.topic.Topic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.testutil.MatchTestUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.testutil.TypicalCards;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class MatchTestTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private ModelManager model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private MatchTest matchTest;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /** The indexes of matching question and answer from the test. */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Index[] earthRoundIndexes;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Index[] forceFormulaIndexes;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Index[] densityFormulaIndexes;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        model \u003d new ModelManager(TypicalPersons.getTypicalAddressBook(), TypicalCards.getTypicalTriviaBundle(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new TriviaResults(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // There will be 3 cards in this matchTest"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        matchTest \u003d new MatchTest(new Topic(VALID_TOPIC_PHYSICS), model.getTriviaBundle());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        earthRoundIndexes \u003d MatchTestUtil.getIndexes(matchTest, Q_EARTH_ROUND);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        forceFormulaIndexes \u003d MatchTestUtil.getIndexes(matchTest, Q_FORCE_FORMULA);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        densityFormulaIndexes \u003d MatchTestUtil.getIndexes(matchTest, Q_DENSITY_FORMULA);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        model.startTriviaTest(matchTest);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void cleanUp() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (model.isInTestingState()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            model.stopTriviaTest();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void invalid_matchTest() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        matchTest \u003d new MatchTest(new Topic(VALID_TOPIC_NO_TOPIC), model.getTriviaBundle());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void test_matchPass() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(model.matchQuestionAndAnswer(earthRoundIndexes[0], earthRoundIndexes[1]));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(model.matchQuestionAndAnswer(forceFormulaIndexes[0], forceFormulaIndexes[1]));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(model.matchQuestionAndAnswer(densityFormulaIndexes[0], densityFormulaIndexes[1]));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(matchTest.getAttempts().size(), 3);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void test_matchFail() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(model.matchQuestionAndAnswer(earthRoundIndexes[0], forceFormulaIndexes[1]));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(model.matchQuestionAndAnswer(forceFormulaIndexes[0], densityFormulaIndexes[1]));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(model.matchQuestionAndAnswer(densityFormulaIndexes[0], earthRoundIndexes[1]));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void test_matchOutOfBoundsIndexes() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        model.matchQuestionAndAnswer(Index.fromOneBased(100), Index.fromOneBased(100));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void test_responseToCorrectMatchAttempt() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // makes sure the cards that are involved in the correct attempts are removed."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        matchTest.respondToCorrectAttempt(new MatchAttempt(Q_EARTH_ROUND, Q_EARTH_ROUND));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(matchTest.getQuestions().size(), 2);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(matchTest.getAnswers().size(), 2);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        matchTest.respondToCorrectAttempt(new MatchAttempt(Q_DENSITY_FORMULA, Q_DENSITY_FORMULA));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        matchTest.respondToCorrectAttempt(new MatchAttempt(Q_FORCE_FORMULA, Q_FORCE_FORMULA));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(matchTest.getAnswers().size(), 0);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(matchTest.getQuestions().size(), 0);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void test_isCompletedFlagFalse() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // if the ongoing test isn\u0027t stopped, isCompleted will be false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(matchTest.isCompleted());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // If there are existing unanswered questions, even if test is stopped, isCompleted flag should be false."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        matchTest.match(earthRoundIndexes[0], earthRoundIndexes[1]);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        model.stopTriviaTest();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(matchTest.isCompleted());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void test_isCompletedFlagTrue() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // If there are no more existing unanswered questions, isCompleted flag should be true."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        matchTest.respondToCorrectAttempt(new MatchAttempt(Q_EARTH_ROUND, Q_EARTH_ROUND));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        matchTest.respondToCorrectAttempt(new MatchAttempt(Q_FORCE_FORMULA, Q_FORCE_FORMULA));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        densityFormulaIndexes \u003d MatchTestUtil.getIndexes(matchTest, Q_DENSITY_FORMULA);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        model.matchQuestionAndAnswer(densityFormulaIndexes[0], densityFormulaIndexes[1]);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        model.stopTriviaTest();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(matchTest.isCompleted());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assert(model.getTriviaResultList().size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void test_assertTestType() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(matchTest.getTestType(), TestType.MATCH_TEST);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        MatchTest matchTestCopy \u003d new MatchTest(matchTest.getTopic(), model.getTriviaBundle());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(matchTest.equals(matchTestCopy));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(matchTest.equals(matchTest));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(matchTest.equals(null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(matchTest.equals(5));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // different cards being tested -\u003e returns false"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(matchTest.equals(new MatchTest(new Topic(VALID_TOPIC_GIT), model.getTriviaBundle())));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 154
    }
  },
  {
    "path": "src/test/java/seedu/address/model/topic/TopicTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.model.topic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class TopicTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Topic(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Topic(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // null topic name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Topic.isValidTopicName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 6,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(1000, 500, 300, 100);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.xml\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        userPrefs.setTriviaBundleFilePath(Paths.get(\"triviabundle.xml\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        userPrefs.setTriviaResultsFilePath(Paths.get(\"testresult.xml\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(1200, 200, 0, 2);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(5, 5, 5, 5);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 2,
      "-": 134
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalTriviaBundle;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalTriviaResults.getTypicalTriviaResults;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.events.model.TriviaBundleChangedEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.events.model.TriviaResultsChangedEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.ReadOnlyTriviaBundle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.TriviaBundle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.ReadOnlyTriviaResults;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaResults;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlTriviaResultsStorage triviaResultStorage \u003d new"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                XmlTriviaResultsStorage(getTempFilePath(\"tr\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlTriviaBundleStorage triviaBundleStorage \u003d new XmlTriviaBundleStorage(getTempFilePath(\"tb\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, triviaBundleStorage,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                triviaResultStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link XmlAddressBookStorage} class."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void triviaBundleSave() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "         * {@link XmlTriviaBundleStorage} class."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlTriviaBundleStorageTest} class."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "         */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        TriviaBundle original \u003d getTypicalTriviaBundle();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        storageManager.saveTriviaBundle(original);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        ReadOnlyTriviaBundle retrieved \u003d storageManager.readTriviaBundle().get();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(original, new TriviaBundle(retrieved));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void triviaResultSave() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "         * {@link XmlTriviaResultsStorage} class."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlTriviaResultsStorageTest} class."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "         */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        ReadOnlyTriviaResults original \u003d getTypicalTriviaResults();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        storageManager.saveTriviaResults(original);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        ReadOnlyTriviaResults retrieved \u003d storageManager.readTriviaResults().get();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(original, new TriviaResults(retrieved));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void getTriviaBundleFilePath() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertNotNull(storageManager.getTriviaBundleFilePath());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void getTriviaResultsFilePath() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertNotNull(storageManager.getTriviaResultsFilePath());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new XmlTriviaStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new XmlTriviaResultsStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void handleTriviaBundleChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new XmlTriviaStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new XmlTriviaResultsStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        storage.handleTriviaBundleChangedEvent(new TriviaBundleChangedEvent(new TriviaBundle()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void handleTriviaResultsChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new XmlTriviaStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new XmlTriviaResultsStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        storage.handleTriviaResultsChangedEvent(new TriviaResultsChangedEvent(new TriviaResults()));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public XmlAddressBookStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    class XmlTriviaStorageExceptionThrowingStub extends XmlTriviaBundleStorage {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        public XmlTriviaStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        public void saveTriviaBundle(ReadOnlyTriviaBundle triviaBundle, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    class XmlTriviaResultsStorageExceptionThrowingStub extends XmlTriviaResultsStorage {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        public XmlTriviaResultsStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        public void saveTriviaResults(ReadOnlyTriviaResults triviaResults, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 103,
      "-": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedAttemptTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.storage.XmlAdaptedAttempt.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalAttempts.FLAT_EARTH_CORRECT_ATTEMPT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.Q_FLAT_EARTH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Answer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class XmlAdaptedAttemptTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String INVALID_CORRECTNESS \u003d \"not correct\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String VALID_CORRECTNESS \u003d String.valueOf(FLAT_EARTH_CORRECT_ATTEMPT.isCorrect());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String VALID_EMPTY_ANSWER \u003d \"\"; // empty strings allowed for attempt"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String VALID_ANSWER \u003d Q_FLAT_EARTH.getAnswer().value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final XmlAdaptedCard VALID_XML_CARD \u003d new XmlAdaptedCard(Q_FLAT_EARTH);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void toModelType_validAttempt_returnsAttempt() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlAdaptedAttempt attempt \u003d new XmlAdaptedAttempt(FLAT_EARTH_CORRECT_ATTEMPT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(FLAT_EARTH_CORRECT_ATTEMPT, attempt.toModelType());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void toModelType_invalidCorrectness_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlAdaptedAttempt attempt \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new XmlAdaptedAttempt(VALID_XML_CARD, VALID_ANSWER, INVALID_CORRECTNESS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_INVALID_BOOLEAN_FOR_ISCORRECT;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, attempt::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void toModelType_nullCorrectness_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlAdaptedAttempt attempt \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new XmlAdaptedAttempt(VALID_XML_CARD, VALID_EMPTY_ANSWER, null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"isCorrect\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, attempt::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void toModelType_nullAnswer_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlAdaptedAttempt attempt \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new XmlAdaptedAttempt(VALID_XML_CARD, null, VALID_CORRECTNESS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Answer.class.getSimpleName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, attempt::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void toModelType_nullAttemptedCard_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlAdaptedAttempt attempt \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new XmlAdaptedAttempt(null, VALID_ANSWER, VALID_CORRECTNESS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Card.class.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, attempt::toModelType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.storage.XmlAdaptedCard.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.Q_FLAT_EARTH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Answer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Question;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class XmlAdaptedCardTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String INVALID_QUESTION \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String INVALID_ANSWER \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String INVALID_TOPIC \u003d \"#topic\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String VALID_QUESTION \u003d Q_FLAT_EARTH.getQuestion().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String VALID_ANSWER \u003d Q_FLAT_EARTH.getAnswer().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final List\u003cXmlAdaptedTopic\u003e VALID_TOPICS \u003d Q_FLAT_EARTH.getTopics().stream()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            .map(XmlAdaptedTopic::new)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void toModelType_validCardDetails_returnsCard() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlAdaptedCard person \u003d new XmlAdaptedCard(Q_FLAT_EARTH);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(Q_FLAT_EARTH, person.toModelType());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void toModelType_invalidQuestion_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlAdaptedCard card \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new XmlAdaptedCard(INVALID_QUESTION, VALID_ANSWER, VALID_TOPICS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String expectedMessage \u003d Question.MESSAGE_QUESTION_CONSTRAINTS;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, card::toModelType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void toModelType_nullQuestion_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlAdaptedCard card \u003d new XmlAdaptedCard(null, VALID_ANSWER, VALID_TOPICS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Question.class.getSimpleName());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, card::toModelType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void toModelType_invalidAnswer_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlAdaptedCard card \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new XmlAdaptedCard(VALID_QUESTION, INVALID_ANSWER, VALID_TOPICS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String expectedMessage \u003d Answer.MESSAGE_ANSWER_CONSTRAINTS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, card::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void toModelType_nullAnswer_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlAdaptedCard card \u003d new XmlAdaptedCard(VALID_QUESTION, null, VALID_TOPICS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Answer.class.getSimpleName());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, card::toModelType);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void toModelType_invalidTopics_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        List\u003cXmlAdaptedTopic\u003e invalidTopics \u003d new ArrayList\u003c\u003e(VALID_TOPICS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        invalidTopics.add(new XmlAdaptedTopic(INVALID_TOPIC));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlAdaptedCard card \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new XmlAdaptedCard(VALID_QUESTION, VALID_ANSWER, invalidTopics);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, card::toModelType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPersonTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final List\u003cXmlAdaptedTopic\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            .map(XmlAdaptedTopic::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        List\u003cXmlAdaptedTopic\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        invalidTags.add(new XmlAdaptedTopic(INVALID_TAG));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 4,
      "-": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedTriviaResultTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TOPIC_PHYSICS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.storage.XmlAdaptedTriviaResult.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalAttempts.FLAT_EARTH_CORRECT_ATTEMPT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalAttempts.FLAT_EARTH_WRONG_ATTEMPT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalTriviaResults.RESULT_ATTEMPT_ALL_CORRECT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TestType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.topic.Topic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class XmlAdaptedTriviaResultTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String INVALID_TEST_TYPE \u003d \"Non existent Test\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String INVALID_TOPIC \u003d \"#what?\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String INVALID_DATE \u003d \"01 Jun 2016, 42:13PM\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String INVALID_DURATION \u003d \"13.2aad\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String VALID_TEST_TYPE \u003d TestType.MATCH_TEST.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String VALID_TOPIC \u003d VALID_TOPIC_PHYSICS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String VALID_DATE \u003d \"01 Jun 2016, 04:13 PM\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final String VALID_DURATION \u003d \"11.5\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final List\u003cXmlAdaptedAttempt\u003e VALID_ATTEMPTS \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            new XmlAdaptedAttempt(FLAT_EARTH_CORRECT_ATTEMPT), new XmlAdaptedAttempt(FLAT_EARTH_WRONG_ATTEMPT)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void toModelType_validResult_returnsTriviaResult() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlAdaptedTriviaResult result \u003d new XmlAdaptedTriviaResult(RESULT_ATTEMPT_ALL_CORRECT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(RESULT_ATTEMPT_ALL_CORRECT, result.toModelType());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void toModelType_invalidTestType_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlAdaptedTriviaResult result \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new XmlAdaptedTriviaResult(INVALID_TEST_TYPE, VALID_TOPIC, VALID_DATE, VALID_DURATION, VALID_ATTEMPTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String expectedMessage \u003d TestType.MESSAGE_TEST_TYPE_CONSTRAINTS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, result::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void toModelType_nullTestType_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlAdaptedTriviaResult result \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new XmlAdaptedTriviaResult(null, VALID_TOPIC, VALID_DATE, VALID_DURATION, VALID_ATTEMPTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, TestType.class.getSimpleName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, result::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void toModelType_invalidTopic_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlAdaptedTriviaResult result \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new XmlAdaptedTriviaResult(VALID_TEST_TYPE, INVALID_TOPIC, VALID_DATE, VALID_DURATION, VALID_ATTEMPTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String expectedMessage \u003d Topic.MESSAGE_TOPIC_CONSTRAINTS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, result::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void toModelType_nullTopic_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlAdaptedTriviaResult result \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new XmlAdaptedTriviaResult(VALID_TEST_TYPE, null, VALID_DATE, VALID_DURATION, VALID_ATTEMPTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Topic.class.getSimpleName());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, result::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlAdaptedTriviaResult result \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new XmlAdaptedTriviaResult(VALID_TEST_TYPE, VALID_TOPIC, INVALID_DATE, VALID_DURATION, VALID_ATTEMPTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String expectedMessage \u003d DateUtil.MESSAGE_DATE_CONSTRAINTS;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, result::toModelType);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void toModelType_nullDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlAdaptedTriviaResult result \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new XmlAdaptedTriviaResult(VALID_TEST_TYPE, VALID_TOPIC, null, VALID_DURATION, VALID_ATTEMPTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, result::toModelType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void toModelType_invalidDuration_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlAdaptedTriviaResult result \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new XmlAdaptedTriviaResult(VALID_TEST_TYPE, VALID_TOPIC, VALID_DATE, INVALID_DURATION, VALID_ATTEMPTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String expectedMessage \u003d \"Duration: \" + NumberFormatException.class.getSimpleName();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, result::toModelType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void toModelType_nullDuration_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlAdaptedTriviaResult result \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                new XmlAdaptedTriviaResult(VALID_TEST_TYPE, VALID_TOPIC, VALID_DATE, null, VALID_ATTEMPTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Duration\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, result::toModelType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSerializableTriviaBundleTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.TriviaBundle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.testutil.TypicalCards;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class XmlSerializableTriviaBundleTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableTriviaBundleTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final Path TYPICAL_CARDS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalCardsTriviaBundle.xml\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final Path INVALID_CARD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidCardTriviaBundle.xml\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final Path DUPLICATE_CARD_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateCardTriviaBundle.xml\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void toModelType_typicalCardsFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlSerializableTriviaBundle dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_CARDS_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                XmlSerializableTriviaBundle.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        TriviaBundle triviaBundleFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        TriviaBundle typicalCardsTriviaBundle \u003d TypicalCards.getTypicalTriviaBundle();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(triviaBundleFromFile, typicalCardsTriviaBundle);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void toModelType_invalidCardFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlSerializableTriviaBundle dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_CARD_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                XmlSerializableTriviaBundle.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlSerializableTriviaBundle dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_CARD_FILE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                XmlSerializableTriviaBundle.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expectMessage(XmlSerializableTriviaBundle.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSerializableTriviaResultsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaResults;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.testutil.TypicalTriviaResults;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class XmlSerializableTriviaResultsTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableTriviaResultsTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final Path TYPICAL_RESULTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalResultsTriviaResults.xml\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final Path INVALID_RESULT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidResultTriviaResults.xml\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void toModelType_typicalResultsFile_success() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlSerializableTriviaResults dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_RESULTS_FILE,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                XmlSerializableTriviaResults.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        TriviaResults triviaBundleFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        TriviaResults typicalCardsTriviaBundle \u003d TypicalTriviaResults.getTypicalTriviaResults();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(triviaBundleFromFile, typicalCardsTriviaBundle);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void toModelType_invalidResultFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlSerializableTriviaResults dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_RESULT_FILE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                XmlSerializableTriviaResults.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlTriviaBundleStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.Q_DENSITY_FORMULA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.Q_FLAT_EARTH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalTriviaBundle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.ReadOnlyTriviaBundle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.TriviaBundle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class XmlTriviaBundleStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlTriviaBundleStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void readTriviaBundle_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        readTriviaBundle(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Optional\u003cReadOnlyTriviaBundle\u003e readTriviaBundle(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return new XmlTriviaBundleStorage(Paths.get(filePath)).readTriviaBundle(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(readTriviaBundle(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        readTriviaBundle(\"NotXmlFormatTriviaBundle.xml\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void readTriviaBundle_invalidCardTriviaBundle_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        readTriviaBundle(\"invalidCardTriviaBundle.xml\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void readTriviaBundle_invalidAndValidCardTriviaBundle_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        readTriviaBundle(\"invalidAndValidCardTriviaBundle.xml\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void readAndSaveTriviaBundle_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempTriviaBundle.xml\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        TriviaBundle original \u003d getTypicalTriviaBundle();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlTriviaBundleStorage xmlTriviaBundleStorage \u003d new XmlTriviaBundleStorage(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        xmlTriviaBundleStorage.saveTriviaBundle(original, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        ReadOnlyTriviaBundle readBack \u003d xmlTriviaBundleStorage.readTriviaBundle(filePath).get();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(original, new TriviaBundle(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        original.addCard(Q_FLAT_EARTH);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        original.removeCard(Q_DENSITY_FORMULA);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        xmlTriviaBundleStorage.saveTriviaBundle(original, filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        readBack \u003d xmlTriviaBundleStorage.readTriviaBundle(filePath).get();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(original, new TriviaBundle(readBack));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        original.addCard(Q_DENSITY_FORMULA);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        xmlTriviaBundleStorage.saveTriviaBundle(original); //file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        readBack \u003d xmlTriviaBundleStorage.readTriviaBundle().get(); //file path not specified"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(original, new TriviaBundle(readBack));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void saveTriviaBundle_nullTriviaBundle_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        saveTriviaBundle(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Saves {@code trivia bundle} at the specified {@code filePath}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private void saveTriviaBundle(ReadOnlyTriviaBundle triviaBundle, String filePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            new XmlTriviaBundleStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                    .saveTriviaBundle(triviaBundle, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void saveTriviaBundle_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        saveTriviaBundle(new TriviaBundle(), null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 126
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlTriviaResultsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalTriviaResults.RESULT_FLAT_EARTH_WRONG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalTriviaResults.RESULT_FORCES_WRONG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalTriviaResults.getTypicalTriviaResults;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.ReadOnlyTriviaResults;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaResults;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class XmlTriviaResultsStorageTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \"XmlTriviaResultsStorageTest\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void readTriviaBundle_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        readTriviaResults(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Optional\u003cReadOnlyTriviaResults\u003e readTriviaResults(String filePath) throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return new XmlTriviaResultsStorage(Paths.get(filePath)).readTriviaResults(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(readTriviaResults(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        readTriviaResults(\"NotXmlFormatTriviaResults.xml\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void readTriviaResults_invalidResult_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        readTriviaResults(\"invalidResultTriviaResults.xml\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void readAddressBook_invalidAndValidResultTriviaResults_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        readTriviaResults(\"invalidAndValidResultTriviaResults.xml\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void readAndSaveTriviaResults_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempTriviaResults.xml\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        TriviaResults original \u003d getTypicalTriviaResults();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        XmlTriviaResultsStorage xmlTriviaResultsStorage \u003d new XmlTriviaResultsStorage(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        xmlTriviaResultsStorage.saveTriviaResults(original, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        ReadOnlyTriviaResults readBack \u003d xmlTriviaResultsStorage.readTriviaResults(filePath).get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(original, new TriviaResults(readBack));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        original.addTriviaResult(RESULT_FORCES_WRONG);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        xmlTriviaResultsStorage.saveTriviaResults(original, filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        readBack \u003d xmlTriviaResultsStorage.readTriviaResults(filePath).get();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(original, new TriviaResults(readBack));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        original.addTriviaResult(RESULT_FLAT_EARTH_WRONG);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        xmlTriviaResultsStorage.saveTriviaResults(original); //file path not specified"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        readBack \u003d xmlTriviaResultsStorage.readTriviaResults().get(); //file path not specified"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(original, new TriviaResults(readBack));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void saveTriviaResults_nullTriviaResults_throwsNullPointerException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        saveTriviaResults(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private void saveTriviaResults(ReadOnlyTriviaResults triviaResults, String filePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            new XmlTriviaResultsStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                    .saveTriviaResults(triviaResults, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        saveTriviaResults(new TriviaResults(), null);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/CardBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.card.Answer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.card.Question;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.topic.Topic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Card objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class CardBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_QUESTION \u003d \"Why is the world round?\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ANSWER \u003d \"Because of gravity!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final List\u003cTopic\u003e DEFAULT_TOPIC \u003d Arrays.asList(new Topic[]{new Topic(\"Physics\")});"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Question question;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Answer answer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Set\u003cTopic\u003e topics;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CardBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        question \u003d new Question(DEFAULT_QUESTION);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        answer \u003d new Answer(DEFAULT_ANSWER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        topics \u003d new HashSet\u003c\u003e(DEFAULT_TOPIC);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the CardBuilder with the data of {@code cardToCopy}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CardBuilder(Card cardToCopy) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        question \u003d cardToCopy.getQuestion();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        answer \u003d cardToCopy.getAnswer();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        topics \u003d new HashSet\u003c\u003e(cardToCopy.getTopics());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code question} of the {@code Card} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public CardBuilder withQuestion(String question) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.question \u003d new Question(question);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Parses the {@code topics} into a {@code Set\u003cTopic\u003e} and set it to the {@code Card} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public CardBuilder withTopics(String ... topics) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.topics \u003d SampleDataUtil.getTopicSet(topics);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Answer} of the {@code Card} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public CardBuilder withAnswer(String answer) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.answer \u003d new Answer(answer);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public Card build() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return new Card(question, answer, topics);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 9,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/CardUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TOPIC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditCardDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.topic.Topic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Card."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class CardUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code card}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Card card) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getCardDetails(card);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code card}\u0027s details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getCardDetails(Card card) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_QUESTION + card.getQuestion().value + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ANSWER + card.getAnswer().value + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        card.getTopics().stream().forEach("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            s -\u003e sb.append(PREFIX_TOPIC + s.topicName + \" \")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditCardDescriptor}\u0027s details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditCardDescriptorDetails(EditCardDescriptor descriptor) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getQuestion().ifPresent(question -\u003e sb.append(PREFIX_QUESTION).append(question.value).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAnswer().ifPresent(answer -\u003e sb.append(PREFIX_ANSWER).append(answer.value).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        if (descriptor.getTopics().isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            Set\u003cTopic\u003e topics \u003d descriptor.getTopics().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            if (topics.isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                sb.append(PREFIX_TOPIC);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                topics.forEach(s -\u003e sb.append(PREFIX_TOPIC).append(s.topicName).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 12,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditCardDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditCardDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.card.Answer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.card.Question;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.topic.Topic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditCardDescriptor objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCardDescriptorBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCardDescriptor descriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCardDescriptorBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditCardDescriptor();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCardDescriptorBuilder(EditCardDescriptor descriptor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditCardDescriptor(descriptor);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditCardDescriptor} with fields containing {@code card}\u0027s details"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCardDescriptorBuilder(Card card) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditCardDescriptor();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setQuestion(card.getQuestion());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAnswer(card.getAnswer());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        descriptor.setTopics(card.getTopics());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Question} of the {@code EditCardDescriptor} that we are building."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCardDescriptorBuilder withQuestion(String question) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setQuestion(new Question(question));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Answer} of the {@code EditAnswerDescriptor} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCardDescriptorBuilder withAnswer(String answer) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAnswer(new Answer(answer));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Parses the {@code topics} into a {@code Set\u003cTopic\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public EditCardDescriptorBuilder withTopics(String... topics) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Set\u003cTopic\u003e topicSet \u003d Stream.of(topics).map(Topic::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        descriptor.setTopics(topicSet);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCardDescriptor build() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 7,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hozongsien"
        },
        "content": " * A utility class to generate files to be used in import tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hozongsien"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public static final Path TYPICAL_FILE \u003d Paths.get(\"src\", \"test\", \"data\", \"TxtFileUtilTest\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "            \"typicalTest.txt\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public static final Path EMPTY_FILE \u003d Paths.get(\"src\", \"test\", \"data\", \"TxtFileUtilTest\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "            \"emptyTest.txt\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public static final Path INVALID_FILE \u003d Paths.get(\"src\", \"test\", \"data\", \"TxtFileUtilTest\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "            \"invalidTest.txt.jpg\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    private static final String INVALID_FILE_NAME \u003d \"noSuchFile\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "     * Returns an import command string for importing the {@code file}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public static String getImportCommand(File file) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        return ImportCommand.COMMAND_WORD + \" \" + file.getPath();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public static File getDummyImportFile() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        return new File(INVALID_FILE_NAME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "     * Returns a typical import file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "     * @return typical import txt file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public static File getTypicalImportFile() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        File file \u003d TYPICAL_FILE.toFile();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        assertTrue(file.isFile());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        return file;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    * Returns an empty valid txt file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    * @return empty txt file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public static File getEmptyImportFile() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        File file \u003d EMPTY_FILE.toFile();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        assertTrue(file.exists());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        assertTrue(file.isFile());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        return file;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "     * Returns an invalid file type."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "     * @return an invalid file type."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public static File getInvalidImportFile() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        File file \u003d INVALID_FILE.toFile();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        assertTrue(file.exists());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        return file;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hozongsien": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/MatchTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.matchtest.MatchTest;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * A utility class for matching test."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class MatchTestUtil {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Used to obtain the base0 indexes of matching question and answer in the test."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @param test The matchTest that is ongoing."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @param card The card that is you want to match."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @return the an array of indexes of size 2. With the first and second indexes representing the question and"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * answer respectively."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static Index[] getIndexes(MatchTest test, Card card) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return new Index[] {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                Index.fromZeroBased(test.getQuestions().indexOf(card.getQuestion())),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                Index.fromZeroBased(test.getAnswers().indexOf(card.getAnswer()))"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        };"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.topic.Topic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Set\u003cTopic\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTopicSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 3,
      "-": 90
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TOPIC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            s -\u003e sb.append(PREFIX_TOPIC + s.topicName + \" \")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 8,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Returns the middle index of the card in the {@code model}\u0027s card list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return Index.fromOneBased(model.getFilteredCardList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return Index.fromOneBased(model.getFilteredCardList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Returns the card in the {@code model}\u0027s card list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static Card getCard(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return model.getFilteredCardList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 7,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TriviaBundleBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.TriviaBundle;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * A utility class to help with building TriviaBundle objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " *     {@code TriviaBundle ab \u003d new TriviaBundleBuilder().withCard(Q_EARTH_ROUND).build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class TriviaBundleBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private TriviaBundle triviaBundle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public TriviaBundleBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        triviaBundle \u003d new TriviaBundle();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public TriviaBundleBuilder(TriviaBundle triviaBundle) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.triviaBundle \u003d triviaBundle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Adds a new {@code Card} to the {@code TriviaBundle} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public TriviaBundleBuilder withCard(Card card) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        triviaBundle.addCard(card);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public TriviaBundle build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return triviaBundle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TriviaResultBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_EARTH_FLAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_PM_OF_SG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.Q_FLAT_EARTH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.Q_GIT_COMMIT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.util.DateUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.Attempt;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TestType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.topic.Topic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * A utility class to build TriviaResult object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class TriviaResultBuilder {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String DEFAULT_TEST_TYPE \u003d \"MATCH_TEST\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String DEFAULT_TOPIC \u003d \"PHYSICS\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"31 Jan 2006, 08:30 AM\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String DEFAULT_DURATION \u003d \"11.5\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final List\u003cAttempt\u003e DEFAULT_ATTEMPTS \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            new Attempt(Q_FLAT_EARTH, VALID_ANSWER_EARTH_FLAT, true),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            new Attempt(Q_GIT_COMMIT, VALID_ANSWER_PM_OF_SG, false)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private TestType testType;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Topic topic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Date testDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private double duration;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private List\u003c? extends Attempt\u003e attempts;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public TriviaResultBuilder() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        testType \u003d TestType.valueOf(DEFAULT_TEST_TYPE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        topic \u003d new Topic(DEFAULT_TOPIC);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        duration \u003d Double.valueOf(DEFAULT_DURATION);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        attempts \u003d DEFAULT_ATTEMPTS;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            testDate \u003d DateUtil.parse(DEFAULT_DATE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            System.out.println(\"Error in parsing default date\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Initializes the TriviaResultBuilder with the data of {@code triviaResultCopy}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public TriviaResultBuilder(TriviaResult triviaResultToCopy) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        testType \u003d triviaResultToCopy.getTestType();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        topic \u003d triviaResultToCopy.getTopic();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        attempts \u003d triviaResultToCopy.getAttempts();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        testDate \u003d triviaResultToCopy.getTestDate();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        duration \u003d triviaResultToCopy.getDuration();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Sets the {@code testType} of the {@code TriviaResult} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public TriviaResultBuilder withTestType(String testType) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            this.testType \u003d TestType.valueOf(testType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            System.out.println(TestType.MESSAGE_TEST_TYPE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Sets the {@code topic} of the {@code TriviaResult} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public TriviaResultBuilder withTopic(String topic) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.topic \u003d new Topic(topic);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Sets the {@code testDate} of the {@code TriviaResult} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public TriviaResultBuilder withTestDate(String testDate) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            this.testDate \u003d DateUtil.parse(testDate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            System.out.println(\"Error in parsing the given date.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Sets the {@code duration} of the {@code TriviaResult} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public TriviaResultBuilder withDuration(String duration) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.duration \u003d Double.valueOf(duration);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Sets the {@code attempts} of the {@code TriviaResult} that we are building."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public TriviaResultBuilder withAttempts(List\u003c? extends Attempt\u003e attempts) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.attempts \u003d attempts;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public TriviaResult build() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return new TriviaResult(testType, topic, testDate, duration, attempts);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 114
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TriviaResultsBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaResults;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * A utility class to build a TriviaResults class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class TriviaResultsBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private TriviaResults triviaResults;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public TriviaResultsBuilder() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        triviaResults \u003d new TriviaResults();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public TriviaResultsBuilder(TriviaResults triviaResults) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        this.triviaResults \u003d triviaResults;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Adds a new {@code TriviaResult} to the {@code TriviaResults} that we are building."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public TriviaResultsBuilder withTriviaResult(TriviaResult triviaResult) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        triviaResults.addTriviaResult(triviaResult);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public TriviaResults build() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return triviaResults;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalAttempts.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_EARTH_FLAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_GIT_COMMIT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_PM_OF_SG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.Q_FLAT_EARTH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.Q_FORCE_FORMULA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.Attempt;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * A utility class containing a list of {@code Attempts} objects to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class TypicalAttempts {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final Attempt FLAT_EARTH_CORRECT_ATTEMPT \u003d new Attempt(Q_FLAT_EARTH,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            VALID_ANSWER_EARTH_FLAT, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final Attempt FLAT_EARTH_WRONG_ATTEMPT \u003d new Attempt(Q_FLAT_EARTH,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            VALID_ANSWER_GIT_COMMIT, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final Attempt FORCE_CORRECT_ATTEMPT \u003d new Attempt(Q_FORCE_FORMULA,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            \"mass * acceleration\", true);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final Attempt FORCE_WRONG_ATTEMPT \u003d new Attempt(Q_FORCE_FORMULA,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            VALID_ANSWER_PM_OF_SG, false);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalCards.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_EARTH_FLAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_GIT_COMMIT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_PM_OF_SG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_EARTH_FLAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_GIT_COMMIT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_PM_OF_SG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TOPIC_GEN_KNOWLEDGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TOPIC_GIT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TOPIC_PHYSICS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.TriviaBundle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Card} objects to be used in tests."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalCards {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Card Q_EARTH_ROUND \u003d new CardBuilder().withQuestion(\"Why is the earth round?\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            .withAnswer(\"Because of gravity!\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            .withTopics(\"Physics\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Card Q_GIT_MERGE \u003d new CardBuilder().withQuestion(\"What are the ways to merge to branches?\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAnswer(\"rebase and merge\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            .withTopics(\"Git\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Card Q_FORCE_FORMULA \u003d new CardBuilder().withQuestion(\"What is the formula for force?\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAnswer(\"force \u003d mass * acceleration\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            .withTopics(\"Physics\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final Card Q_CAPITAL_SG \u003d new CardBuilder().withQuestion(\"Name of Singapore\u0027s capital\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAnswer(\"Singapore\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            .withTopics(\"GeneralKnowledge\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Card Q_GIT_CLONE \u003d new CardBuilder()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .withQuestion(\"Which git command will get a copy of an online repository to your computer?\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAnswer(\"git clone\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            .withTopics(\"Git\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final Card Q_DENSITY_FORMULA \u003d new CardBuilder().withQuestion(\"Formula of density\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            .withAnswer(\"density \u003d mass / volume\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            .withTopics(\"Physics\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Card Q_TALLEST_BUILDING \u003d new CardBuilder()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            .withQuestion(\"Tallest building in the world?\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAnswer(\"Burj Khalifa\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            .withTopics(\"GeneralKnowledge\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final Card Q_RANDOM_QUESTION \u003d new CardBuilder()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            .withQuestion(\"When is my girlfriend\u0027s birthday?\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            .withAnswer(\"7 September?\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            .withTopics().build(); // empty topic"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Card Q_CS2103_PROF \u003d new CardBuilder().withQuestion(\"Who is the prof for CS2103?\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAnswer(\"Prof Da Myth\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            .withTopics(\"GeneralKnowledge\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Card Q_APP_MADE \u003d new CardBuilder().withQuestion(\"When is this trivia app made?\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAnswer(\"In the year 2018\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            .withTopics(\"GeneralKnowledge\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Card\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Card Q_FLAT_EARTH \u003d new CardBuilder().withQuestion(VALID_QUESTION_EARTH_FLAT)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAnswer(VALID_ANSWER_EARTH_FLAT)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            .withTopics(VALID_TOPIC_PHYSICS).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Card Q_GIT_COMMIT \u003d new CardBuilder().withQuestion(VALID_QUESTION_GIT_COMMIT)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAnswer(VALID_ANSWER_GIT_COMMIT)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            .withTopics(VALID_TOPIC_GIT)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final Card Q_PM_OF_SG \u003d new CardBuilder().withQuestion(VALID_QUESTION_PM_OF_SG)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            .withAnswer(VALID_ANSWER_PM_OF_SG)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            .withTopics(VALID_TOPIC_GEN_KNOWLEDGE)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final String KEYWORD_MATCHING_WHAT \u003d \"What\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalCards() {} // prevents instantiation"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code TriviaBundle} with all the typical persons."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static TriviaBundle getTypicalTriviaBundle() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        TriviaBundle triviaBundle \u003d new TriviaBundle();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Card card : getTypicalCards()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            triviaBundle.addCard(card);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return triviaBundle;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cCard\u003e getTypicalCards() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(Q_EARTH_ROUND, Q_GIT_MERGE, Q_FORCE_FORMULA, Q_CAPITAL_SG, Q_GIT_CLONE,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                Q_DENSITY_FORMULA, Q_TALLEST_BUILDING));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 31,
      "-": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_CARD \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_CARD \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_CARD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final Index INDEX_FOURTH_CARD \u003d Index.fromOneBased(4);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 1,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTriviaResults.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalAttempts.FLAT_EARTH_CORRECT_ATTEMPT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalAttempts.FLAT_EARTH_WRONG_ATTEMPT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalAttempts.FORCE_CORRECT_ATTEMPT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalAttempts.FORCE_WRONG_ATTEMPT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaResults;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * A utility class containing a list of {@code TriviaResult} objects to be used in tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class TypicalTriviaResults {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final TriviaResult RESULT_ATTEMPT_ALL_CORRECT \u003d new TriviaResultBuilder().withTestType(\"MATCH_TEST\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            .withTopic(\"Physics\").withTestDate(\"18 Oct 2018, 11:30 PM\").withDuration(\"20.0\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            .withAttempts(Arrays.asList(FLAT_EARTH_CORRECT_ATTEMPT, FORCE_CORRECT_ATTEMPT)).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final TriviaResult RESULT_ATTEMPT_ALL_WRONG \u003d new TriviaResultBuilder().withTestType(\"MATCH_TEST\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            .withTopic(\"Physics\").withTestDate(\"18 Oct 2018, 11:30 PM\").withDuration(\"20.0\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            .withAttempts(Arrays.asList(FLAT_EARTH_WRONG_ATTEMPT, FORCE_WRONG_ATTEMPT)).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final TriviaResult RESULT_ATTEMPT_MIX \u003d new TriviaResultBuilder().withTestType(\"MATCH_TEST\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            .withTopic(\"Physics\").withTestDate(\"18 Oct 2018, 11:30 PM\").withDuration(\"20.0\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            .withAttempts(Arrays.asList(FLAT_EARTH_WRONG_ATTEMPT, FORCE_CORRECT_ATTEMPT)).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final TriviaResult RESULT_FORCES_WRONG \u003d new TriviaResultBuilder().withTestType(\"MATCH_TEST\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            .withTopic(\"Physics\").withTestDate(\"18 Oct 2018, 11:30 PM\").withDuration(\"20.0\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            .withAttempts(Arrays.asList(FORCE_WRONG_ATTEMPT, FORCE_WRONG_ATTEMPT)).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static final TriviaResult RESULT_FLAT_EARTH_WRONG \u003d new TriviaResultBuilder().withTestType(\"MATCH_TEST\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            .withTopic(\"Physics\").withTestDate(\"18 Oct 2018, 11:30 PM\").withDuration(\"20.0\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            .withAttempts(Arrays.asList(FLAT_EARTH_WRONG_ATTEMPT, FLAT_EARTH_WRONG_ATTEMPT)).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private TypicalTriviaResults() {} // prevents instantiation"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Returns an {@code TriviaResults} with all the typical TriviaResultList."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static TriviaResults getTypicalTriviaResults() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        TriviaResults resultList \u003d new TriviaResults();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        for (TriviaResult result : getTypicalTriviaResultList()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            resultList.addTriviaResult(result);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return resultList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static List\u003cTriviaResult\u003e getTypicalTriviaResultList() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(RESULT_ATTEMPT_ALL_CORRECT, RESULT_ATTEMPT_ALL_WRONG, RESULT_ATTEMPT_MIX));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.ui.home.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.ui.home.BrowserPanel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(ALICE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // associated web page of a person"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(selectionChangedEventStub);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedPersonUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + ALICE.getName().fullName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 2,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CardListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import static seedu.address.testutil.TypicalCards.getTypicalCards;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CARD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardViewDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import guitests.guihandles.CardListPanelHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import guitests.guihandles.CardViewHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import seedu.address.storage.XmlSerializableTriviaBundle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.ui.home.CardListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "public class CardListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    private static final ObservableList\u003cCard\u003e TYPICAL_CARDS \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "            FXCollections.observableList(getTypicalCards());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_CARD);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    private CardListPanelHandle cardListPanelHandle;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        initUi(TYPICAL_CARDS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_CARDS.size(); i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "            cardListPanelHandle.navigateToCard(TYPICAL_CARDS.get(i));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "            Card expectedPerson \u003d TYPICAL_CARDS.get(i);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "            CardViewHandle actualCard \u003d cardListPanelHandle.getCardViewHandle(i);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "            assertCardViewDisplay(expectedPerson, actualCard);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        initUi(TYPICAL_CARDS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        CardViewHandle expectedPerson \u003d cardListPanelHandle.getCardViewHandle(INDEX_SECOND_CARD.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        CardViewHandle selectedPerson \u003d cardListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        assertCardEquals(expectedPerson, selectedPerson);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "     * Verifies that creating and deleting large number of persons in {@code PersonListPanel} requires lesser than"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        ObservableList\u003cCard\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        }, \"Creation and deletion of cards views exceeded time limit\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "     * Returns a list of persons containing {@code personCount} persons that is used to populate the"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "     * {@code PersonListPanel}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    private ObservableList\u003cCard\u003e createBackingList(int cardCount) throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithCard(cardCount);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        XmlSerializableTriviaBundle xmlTrivialBundle \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "                XmlUtil.getDataFromFile(xmlFile, XmlSerializableTriviaBundle.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        return FXCollections.observableArrayList(xmlTrivialBundle.toModelType().getCardList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "     * Returns a .xml file containing {@code personCount} persons. This file will be deleted when the JVM terminates."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    private Path createXmlFileWithCard(int cardCount) throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        builder.append(\"\u003ctriviabundle\u003e\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        for (int i \u003d 0; i \u003c cardCount; i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "            builder.append(\"\u003ccards\u003e\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "            builder.append(\"\u003cquestion\u003e\").append(i).append(\"a\u003c/question\u003e\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "            builder.append(\"\u003canswer\u003e21\u003c/answer\u003e\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            builder.append(\"\u003ctopic\u003ePhysics\u003c/topic\u003e\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "            builder.append(\"\u003c/cards\u003e\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        builder.append(\"\u003c/triviabundle\u003e\\n\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        Path manyCardsFile \u003d Paths.get(TEST_DATA_FOLDER + \"manyCards.xml\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        FileUtil.createFile(manyCardsFile);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        FileUtil.writeToFile(manyCardsFile, builder.toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        manyCardsFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        return manyCardsFile;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "     * Initializes {@code personListPanelHandle} with a {@code PersonListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code PersonListPanel}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    private void initUi(ObservableList\u003cCard\u003e backingList) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        CardListPanel cardListPanel \u003d new CardListPanel(backingList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        uiPartRule.setUiPart(cardListPanel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        cardListPanelHandle \u003d new CardListPanelHandle(getChildNode(cardListPanel.getRoot(),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "                CardListPanelHandle.CARD_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 2,
      "hozongsien": 126
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.core.AsyncEventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A GUI unit test class for AddressBook."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        AsyncEventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 2,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PersonCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.ui.home.PersonCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Person personWithNoTopics \u003d new PersonBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        PersonCard personCard \u003d new PersonCard(personWithNoTopics, 1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCardDisplay(personCard, personWithNoTopics, 1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personWithTags \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        personCard \u003d new PersonCard(personWithTags, 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplay(personCard, personWithTags, 2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard personCard \u003d new PersonCard(person, 0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // same person, same index -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard copy \u003d new PersonCard(person, 0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(personCard.equals(copy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(personCard.equals(personCard));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(0));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person, same index -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Person differentPerson \u003d new PersonBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(new PersonCard(differentPerson, 0)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same person, different index -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(new PersonCard(person, 1)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCardDisplay(PersonCard personCard, Person expectedPerson, int expectedId) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle personCardHandle \u003d new PersonCardHandle(personCard.getRoot());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", personCardHandle.getId());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify person details are displayed correctly"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplaysPerson(expectedPerson, personCardHandle);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 4,
      "-": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/UiPartTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.getRoot().toURI().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFilePathInView + \" does not exist.\", testFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@code VALID_FILE_PATH}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 1,
      "-": 117
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import guitests.guihandles.CardListPanelHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import guitests.guihandles.CardViewHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    public static void assertCardEquals(CardViewHandle expectedCard, CardViewHandle actualCard) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        assertEquals(expectedCard.getQuestion(), actualCard.getQuestion());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        assertEquals(expectedCard.getAnswer(), actualCard.getAnswer());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(expectedCard.getTopics(), actualCard.getTopics());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.topicName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedCard}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static void assertCardViewDisplay(Card expectedCard, CardViewHandle actualCard) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(expectedCard.getQuestion().value, actualCard.getQuestion());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(expectedCard.getAnswer().value, actualCard.getAnswer());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(expectedCard.getTopics().stream().map(topic -\u003e topic.topicName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                actualCard.getTopics());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.length; i++) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Asserts that the list in {@code cardListPanelHandle} displays the details of {@code cards} correctly and"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static void assertListMatching(CardListPanelHandle cardListPanelHandle, Card... cards) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        for (int i \u003d 0; i \u003c cards.length; i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            cardListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            assertCardViewDisplay(cards[i], cardListPanelHandle.getCardViewHandle(i));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static void assertListMatching(CardListPanelHandle cardListPanelHandle, List\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertListMatching(cardListPanelHandle, cards.toArray(new Card[0]));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOfPeople \u003d personListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 34,
      "-": 73,
      "hozongsien": 9
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ANSWER_DESC_EARTH_FLAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ANSWER_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_QUESTION_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TOPIC_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUESTION_DESC_EARTH_FLAT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUESTION_DESC_GIT_COMMIT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TOPIC_DESC_PHYSICS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_GIT_COMMIT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_GIT_COMMIT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TOPIC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.KEYWORD_MATCHING_WHAT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.Q_APP_MADE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.Q_CS2103_PROF;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.Q_FLAT_EARTH;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.Q_RANDOM_QUESTION;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Answer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Question;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.topic.Topic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.testutil.CardUtil;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class AddCommandSystemTest extends AppSystemTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: add a card to a non-empty trivia bundle, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Card toAdd \u003d Q_FLAT_EARTH;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + QUESTION_DESC_EARTH_FLAT + \"  \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                + ANSWER_DESC_EARTH_FLAT + \" \" + TOPIC_DESC_PHYSICS + \" \";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: undo adding Q_FLAT_EARTH to the list -\u003e Q_FLAT_EARTH deleted */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: redo adding Q_FLAT_EARTH to the list -\u003e Q_FLAT_EARTH added again */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        model.addCard(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: add a card with all fields same as another card in the trivia bundle except question -\u003e added */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        toAdd \u003d new CardBuilder(Q_FLAT_EARTH).withQuestion(VALID_QUESTION_GIT_COMMIT).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + QUESTION_DESC_GIT_COMMIT + ANSWER_DESC_EARTH_FLAT"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                + TOPIC_DESC_PHYSICS;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandSuccess(Q_RANDOM_QUESTION);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // TODO To enable this after clear command is implemented on trivia."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        //        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        //        deleteAllPersons();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        //        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // TODO To enable this after clear command is implemented on trivia."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: add a card with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        //        toAdd \u003d Q_GIT_COMMIT;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        //        command \u003d AddCommand.COMMAND_WORD + TOPIC_DESC_GIT + QUESTION_DESC_GIT_COMMIT + ANSWER_DESC_GIT_COMMIT"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        //                + TOPIC_DESC_PHYSICS;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        //        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: filters the card list before adding -\u003e added */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        showCardsWithQuestion(KEYWORD_MATCHING_WHAT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandSuccess(Q_CS2103_PROF);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* ------------------------ Perform add operation while a card is selected --------------------------- */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: selects first card in the card list, add a card -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        selectCard(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandSuccess(Q_APP_MADE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: add a duplicate card -\u003e rejected */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        command \u003d CardUtil.getAddCommand(Q_FLAT_EARTH);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: add a duplicate card except with different question -\u003e rejected */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        toAdd \u003d new CardBuilder(Q_FLAT_EARTH).withQuestion(VALID_QUESTION_GIT_COMMIT).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        command \u003d CardUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: add a duplicate card except with different answer -\u003e rejected */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        toAdd \u003d new CardBuilder(Q_FLAT_EARTH).withAnswer(VALID_ANSWER_GIT_COMMIT).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        command \u003d CardUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: add a duplicate cards except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        command \u003d CardUtil.getAddCommand(Q_FLAT_EARTH) + \" \" + PREFIX_TOPIC.getPrefix() + \"Time\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: missing question -\u003e rejected */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + ANSWER_DESC_EARTH_FLAT + TOPIC_DESC_PHYSICS;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: missing answer -\u003e rejected */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + QUESTION_DESC_EARTH_FLAT + TOPIC_DESC_PHYSICS;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        command \u003d \"adds \" + CardUtil.getCardDetails(toAdd);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: invalid question -\u003e rejected */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_QUESTION_DESC + ANSWER_DESC_EARTH_FLAT + TOPIC_DESC_PHYSICS;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandFailure(command, Question.MESSAGE_QUESTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: invalid answer -\u003e rejected */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + QUESTION_DESC_EARTH_FLAT + INVALID_ANSWER_DESC + TOPIC_DESC_PHYSICS;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandFailure(command, Answer.MESSAGE_ANSWER_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: invalid topic -\u003e rejected */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + QUESTION_DESC_EARTH_FLAT + ANSWER_DESC_EARTH_FLAT"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                + INVALID_TOPIC_DESC;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandFailure(command, Topic.MESSAGE_TOPIC_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * 4. {@code Storage} and {@code CardListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * {@code AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @see AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private void assertCommandSuccess(Card toAdd) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandSuccess(CardUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Card)}. Executes {@code command}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Card)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private void assertCommandSuccess(String command, Card toAdd) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        expectedModel.addCard(toAdd);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Card)} except asserts that"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * 2. {@code Storage} and {@code CardListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Card)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertSelectedCardViewUnchanged();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * 4. {@code Storage} and {@code CardListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * {@code AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @see AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertSelectedCardViewUnchanged();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 98,
      "-": 110
    }
  },
  {
    "path": "src/test/java/systemtests/AppSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.ui.home.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import guitests.guihandles.CardListPanelHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.commons.core.AsyncEventsCenter;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.TriviaBundle;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.testutil.TypicalCards;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.ui.home.BrowserPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": " * A system test class for the application, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public abstract class AppSystemTest {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getAddressBookData, this::getTriviaBundleData,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                getAddressBookFile(), getTriviaBundleFile());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        AsyncEventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getAddressBookFile()}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    protected AddressBook getAddressBookData() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getAddressBookFile()}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    protected TriviaBundle getTriviaBundleData() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return TypicalCards.getTypicalTriviaBundle();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    protected Path getAddressBookFile() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return TestApp.ADDRESS_BOOK_SAVE_LOCATION;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    protected Path getTriviaBundleFile() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return TestApp.TRIVIA_BUNDLE_SAVE_LOCATION;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public CardListPanelHandle getCardListPanel() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return mainWindowHandle.getCardListPanel();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Displays all cards in the trivia bundle."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    protected void showAllCards() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(getModel().getTriviaBundle().getCardList().size(), getModel().getFilteredCardList().size());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Displays all cards with any parts of their question matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    protected void showCardsWithQuestion(String keyword) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(getModel().getFilteredCardList().size() \u003c getModel().getTriviaBundle().getCardList().size());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Selects the card at {@code index} of the displayed list."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    protected void selectCard(Index index) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(index.getZeroBased(), getCardListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(new TriviaBundle(expectedModel.getTriviaBundle()), testApp.readStorageTriviaBundle());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertListMatching(getCardListPanel(), expectedModel.getFilteredCardList());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        getCardListPanel().rememberSelectedCardView();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * of the previously selected person."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(getCardListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        getCardListPanel().navigateToCard(getCardListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String selectedCardQuestion \u003d getCardListPanel().getHandleToSelectedCard().getQuestion();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardQuestion"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                    .replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getCardListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(getCardListPanel().isSelectedCardViewChanged());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card view in the panel remain unchanged."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @see CardListPanelHandle#isSelectedCardViewChanged()"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    protected void assertSelectedCardViewUnchanged() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(getCardListPanel().isSelectedCardViewChanged());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getAddressBookFilePath()).toString(),"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 62,
      "-": 261
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.test.TriviaResults;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.testutil.TypicalCards;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class ClearCommandSystemTest extends AppSystemTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private ModelManager modelManagerWithClearedAddressBook \u003d new ModelManager(new AddressBook(),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            TypicalCards.getTypicalTriviaBundle(), new TriviaResults(), new UserPrefs());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        // TODO enable this after clear command is set up for trivia."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        // assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        // assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        // TODO enable this after clear command is set up for trivia."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        // String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        // String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        // assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        // assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        // TODO enable this after clear command is set up for trivia."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        // command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        // expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        // assertCommandSuccess(command, expectedResultMessage, modelManagerWithClearedAddressBook);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        // assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in person list and clears address book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        // TODO enable this after clear command is set up for trivia."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        // executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        // selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        // assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        // assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // TODO enable this after clear command is set up for trivia."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        //        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        //        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        //        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        //        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * {@code AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @see AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, modelManagerWithClearedAddressBook);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * {@code AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @see AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 21,
      "-": 68,
      "hozongsien": 18
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_CARD_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TestUtil.getCard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.KEYWORD_MATCHING_WHAT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class DeleteCommandSystemTest extends AppSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: delete the first card in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_CARD.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Card deletedCard \u003d removeCard(expectedModel, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_CARD_SUCCESS, deletedCard);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: delete the last card in the list -\u003e deleted */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Index lastCardIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandSuccess(lastCardIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: undo deleting the last card in the list -\u003e last card restored */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: redo deleting the last card in the list -\u003e last card deleted again */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        removeCard(modelBeforeDeletingLast, lastCardIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: delete the middle card in the list -\u003e deleted */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Index middleCardIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandSuccess(middleCardIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: filtered card list, delete index within bounds of trivia bundle and card list -\u003e deleted */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        showCardsWithQuestion(KEYWORD_MATCHING_WHAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Index index \u003d INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredCardList().size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: filtered card list, delete index within bounds of trivia bundle but out of bounds of card list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        showCardsWithQuestion(KEYWORD_MATCHING_WHAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        int invalidIndex \u003d getModel().getTriviaBundle().getCardList().size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* --------------------- Performing delete operation while a card is selected ------------------------ */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: delete the selected card -\u003e card list panel selects the card before the deleted card */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        showAllCards();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        selectCard(selectedIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        deletedCard \u003d removeCard(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_CARD_SUCCESS, deletedCard);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "               getModel().getTriviaBundle().getCardList().size() + 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Removes the {@code Card} at the specified {@code index} in {@code model}\u0027s triviabundle."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @return the removed card"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private Card removeCard(Model model, Index index) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Card targetCard \u003d getCard(model, index);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        model.deleteCard(targetCard);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return targetCard;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Deletes the card at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Card deletedCard \u003d removeCard(expectedModel, toDelete);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_CARD_SUCCESS, deletedCard);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * {@code AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @see AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @see AppSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * {@code AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @see AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 51,
      "-": 142
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ANSWER_DESC_EARTH_FLAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ANSWER_DESC_GIT_COMMIT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ANSWER_DESC_PM_OF_SG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ANSWER_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_QUESTION_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TOPIC_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUESTION_DESC_EARTH_FLAT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUESTION_DESC_GIT_COMMIT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUESTION_DESC_PM_OF_SG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TOPIC_DESC_GEN_KNOWLEDGE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TOPIC_DESC_GIT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TOPIC_DESC_PHYSICS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ANSWER_EARTH_FLAT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUESTION_GIT_COMMIT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TOPIC_NO_TOPIC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TOPIC;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CARDS;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.KEYWORD_MATCHING_WHAT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.Q_FLAT_EARTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.Q_PM_OF_SG;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CARD;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Answer;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Question;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.topic.Topic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.testutil.CardUtil;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class EditCommandSystemTest extends AppSystemTest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Index index \u003d INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + QUESTION_DESC_EARTH_FLAT"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                + \"  \" + ANSWER_DESC_EARTH_FLAT + \" \" + TOPIC_DESC_PHYSICS + \" \";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Card editedCard \u003d new CardBuilder(Q_FLAT_EARTH).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandSuccess(command, index, editedCard);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: undo editing the last card in the list -\u003e last card restored */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: redo editing the last card in the list -\u003e last card edited again */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        model.updateCard("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "               getModel().getFilteredCardList().get(INDEX_FIRST_CARD.getZeroBased()), editedCard);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: edit a card with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + QUESTION_DESC_EARTH_FLAT"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                + ANSWER_DESC_EARTH_FLAT + TOPIC_DESC_PHYSICS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandSuccess(command, index, Q_FLAT_EARTH);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: edit a card with new values same as another card\u0027s values but with different question -\u003e edited */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(getModel().getTriviaBundle().getCardList().contains(Q_FLAT_EARTH));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        index \u003d INDEX_SECOND_CARD;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertNotEquals(getModel().getFilteredCardList().get(index.getZeroBased()), Q_FLAT_EARTH);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + QUESTION_DESC_GIT_COMMIT"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                + ANSWER_DESC_EARTH_FLAT + TOPIC_DESC_PHYSICS;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        editedCard \u003d new CardBuilder(Q_FLAT_EARTH).withQuestion(VALID_QUESTION_GIT_COMMIT).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandSuccess(command, index, editedCard);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        index \u003d INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TOPIC.getPrefix();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Card cardToEdit \u003d getModel().getFilteredCardList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        editedCard \u003d new CardBuilder(cardToEdit).withTopics(VALID_TOPIC_NO_TOPIC).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandSuccess(command, index, editedCard);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: filtered card list, edit index within bounds of trivia bundle and card list -\u003e edited */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        showCardsWithQuestion(KEYWORD_MATCHING_WHAT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        index \u003d INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredCardList().size());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + ANSWER_DESC_EARTH_FLAT;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        cardToEdit \u003d getModel().getFilteredCardList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        editedCard \u003d new CardBuilder(cardToEdit).withAnswer(VALID_ANSWER_EARTH_FLAT).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandSuccess(command, index, editedCard);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: filtered card list, edit index within bounds of trivia bundle but out of bounds of card list"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        showCardsWithQuestion(KEYWORD_MATCHING_WHAT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        int invalidIndex \u003d getModel().getTriviaBundle().getCardList().size();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + QUESTION_DESC_EARTH_FLAT,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* --------------------- Performing edit operation while a card is selected -------------------------- */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: selects first card in the card list, edit a card -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        showAllCards();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        index \u003d INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        selectCard(index);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + QUESTION_DESC_PM_OF_SG"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                + ANSWER_DESC_PM_OF_SG + TOPIC_DESC_GEN_KNOWLEDGE;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // browser\u0027s url is updated to reflect the new card\u0027s question"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandSuccess(command, index, Q_PM_OF_SG, index);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + QUESTION_DESC_EARTH_FLAT,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + QUESTION_DESC_EARTH_FLAT,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredCardList().size() + 1;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + QUESTION_DESC_EARTH_FLAT,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + QUESTION_DESC_EARTH_FLAT,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CARD.getOneBased(),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: invalid question -\u003e rejected */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CARD.getOneBased()"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                + INVALID_QUESTION_DESC, Question.MESSAGE_QUESTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: invalid answer -\u003e rejected */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CARD.getOneBased()"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                + INVALID_ANSWER_DESC, Answer.MESSAGE_ANSWER_CONSTRAINTS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: invalid topic -\u003e rejected */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CARD.getOneBased()"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                + INVALID_TOPIC_DESC, Topic.MESSAGE_TOPIC_CONSTRAINTS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: edit a card with new values same as another card\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        executeCommand(CardUtil.getAddCommand(Q_FLAT_EARTH));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertTrue(getModel().getTriviaBundle().getCardList().contains(Q_FLAT_EARTH));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        index \u003d INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(getModel().getFilteredCardList().get(index.getZeroBased()).equals(Q_FLAT_EARTH));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + QUESTION_DESC_EARTH_FLAT"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                + ANSWER_DESC_EARTH_FLAT + TOPIC_DESC_PHYSICS;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: edit a card with new values same as another card\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + QUESTION_DESC_EARTH_FLAT"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                + ANSWER_DESC_EARTH_FLAT + TOPIC_DESC_GIT;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: edit a card with new values same as another card\u0027s values but with different answer -\u003e rejected */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + QUESTION_DESC_EARTH_FLAT"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                + ANSWER_DESC_GIT_COMMIT + TOPIC_DESC_PHYSICS;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Card, Index)} except that"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Card, Index)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Card editedCard) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedCard, null);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the card at index {@code toEdit} being"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * updated to values specified {@code editedCard}.\u003cbr\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Card editedCard,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        expectedModel.updateCard(expectedModel.getFilteredCardList().get(toEdit.getZeroBased()), editedCard);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        expectedModel.updateFilteredCardList(PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_CARD_SUCCESS, editedCard), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * {@code AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @see AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @see AppSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        expectedModel.updateFilteredCardList(PREDICATE_SHOW_ALL_CARDS);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            assertSelectedCardViewUnchanged();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * {@code AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @see AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertSelectedCardViewUnchanged();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 130,
      "-": 135
    }
  },
  {
    "path": "src/test/java/systemtests/ErrorDialogGuiTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postLater;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_STAGE_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.AlertDialogHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class ErrorDialogGuiTest extends AppSystemTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException IO_EXCEPTION_STUB \u003d new IOException(\"Stub\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showErrorDialogs() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        postLater(new DataSavingExceptionEvent(IO_EXCEPTION_STUB));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.waitForEvent(() -\u003e guiRobot.isWindowShown(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        AlertDialogHandle alertDialog \u003d new AlertDialogHandle(guiRobot.getStage(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, alertDialog.getHeaderText());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE + \":\\n\" + IO_EXCEPTION_STUB.toString(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                alertDialog.getContentText());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CARDS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.KEYWORD_MATCHING_WHAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.Q_EARTH_ROUND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.Q_FORCE_FORMULA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.Q_GIT_MERGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalCards.Q_TALLEST_BUILDING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.topic.Topic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class FindCommandSystemTest extends AppSystemTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: find multiple cards in trivia bundle, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "         * -\u003e 4 cards found"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_WHAT + \"   \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // questions has a what in it"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, Q_GIT_MERGE, Q_FORCE_FORMULA);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertSelectedCardViewUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: repeat previous find command where card list is displaying the cards we are finding"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "         * -\u003e 2 cards found"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_WHAT;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertSelectedCardViewUnchanged();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: find card where card list is not displaying the card we are finding -\u003e 1 card found */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Why\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, Q_EARTH_ROUND);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertSelectedCardViewUnchanged();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: find multiple cards in trivia bundle, 2 keywords -\u003e 2 cards found */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" earth merge\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, Q_EARTH_ROUND, Q_GIT_MERGE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertSelectedCardViewUnchanged();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: find multiple cards in trivia bundle, 2 keywords in reversed order -\u003e 2 cards found */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" merge earth\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertSelectedCardViewUnchanged();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: find multiple cards in trivia bundle, 2 keywords with 1 repeat -\u003e 2 cards found */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" earth merge earth\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertSelectedCardViewUnchanged();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: find multiple cards in trivia bundle, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "         * -\u003e 2 cards found"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" earth merge NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertSelectedCardViewUnchanged();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: find same cards in trivia bundle after deleting 1 of them -\u003e 1 card found */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(getModel().getTriviaBundle().getCardList().contains(Q_EARTH_ROUND));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_WHAT;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, Q_GIT_MERGE, Q_FORCE_FORMULA);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: find card in trivia bundle, keyword is same as name but of different case -\u003e 1 card found */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" wHaT\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, Q_GIT_MERGE, Q_FORCE_FORMULA);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertSelectedCardViewUnchanged();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: find card in trivia bundle, keyword is substring of question -\u003e 0 cards found */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" wha\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertSelectedCardViewUnchanged();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: find card in trivia bundle, question is substring of keyword -\u003e 0 cards found */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" whatssup\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertSelectedCardViewUnchanged();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: find card not in trivia bundle -\u003e 0 cards found */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" NotInTriviaBundle\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertSelectedCardViewUnchanged();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: find answer of card in trivia bundle -\u003e 0 cards found */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + Q_TALLEST_BUILDING.getAnswer().value;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertSelectedCardViewUnchanged();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: find tags of card in trivia bundle -\u003e 0 cards found */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        List\u003cTopic\u003e tags \u003d new ArrayList\u003c\u003e(Q_EARTH_ROUND.getTopics());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).topicName;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertSelectedCardViewUnchanged();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: find while a card is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        showAllCards();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        selectCard(Index.fromOneBased(2));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertFalse(getCardListPanel().getHandleToSelectedCard().getQuestion()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                .equals(Q_GIT_MERGE.getQuestion().value));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" merge\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, Q_GIT_MERGE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // TODO To enable this after clear command is implemented on trivia."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in empty address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        //        deleteAllPersons();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        //        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        //        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        //        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        //        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        //        assertSelectedCardViewUnchanged();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * box displays {@code Messages#MESSAGE_CARDS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * {@code AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @see AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                MESSAGE_CARDS_LISTED_OVERVIEW, expectedModel.getFilteredCardList().size());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * {@code AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @see AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertSelectedCardViewUnchanged();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 81,
      "-": 109
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.ui.home.BrowserPanel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class HelpCommandSystemTest extends AppSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        getCardListPanel().click();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CARD.getOneBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertListMatching(getCardListPanel(), getModel().getFilteredCardList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CARD.getOneBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 7,
      "-": 100
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static final Predicate\u003cCard\u003e PREDICATE_MATCHING_NO_CARDS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cCard\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Optional\u003cPredicate\u003cCard\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        model.updateFilteredCardList(predicate.orElse(PREDICATE_MATCHING_NO_CARDS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public static void setFilteredList(Model model, Card... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Card} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    private static Predicate\u003cCard\u003e getPredicateMatching(Card other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return card -\u003e card.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 9,
      "-": 30
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.TriviaBundle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.card.Card;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class SampleDataTest extends AppSystemTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getAddressBookFile()}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    protected AddressBook getAddressBookData() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getTriviaBundleFile()}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    protected TriviaBundle getTriviaBundleData() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    protected Path getAddressBookFile() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    protected Path getTriviaBundleFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public void triviaBundle_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        Card[] expectedList \u003d SampleDataUtil.getSampleCards();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        assertListMatching(getCardListPanel(), expectedList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 27,
      "-": 43
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_CARD_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import static seedu.address.testutil.TypicalCards.KEYWORD_MATCHING_WHAT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CARD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "public class SelectCommandSystemTest extends AppSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        /* Case: select the first card in the card list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CARD.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_CARD);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: select the last card in the card list -\u003e selected */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        Index cardCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + cardCount.getOneBased();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        assertCommandSuccess(command, cardCount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        /* Case: select the middle card in the card list -\u003e selected */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: filtered card list, select index within bounds of trivia bundle but out of bounds of card list"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunWei96"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        showCardsWithQuestion(KEYWORD_MATCHING_WHAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        int invalidIndex \u003d getModel().getTriviaBundle().getCardList().size();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "                MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "                MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        /* Case: filtered card list, select index within bounds of trivia bundle and card list -\u003e selected */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredCardList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        /* Case: invalid index (-0) -\u003e rejected */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredCardList().size() + 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hozongsien"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "        // TODO To enable this after delete command is implemented on trivia."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select from empty address book -\u003e rejected */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        // deleteAllPersons();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        // assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        //        MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected card.\u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * 4. {@code Storage} and {@code CardListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * {@code AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @see AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @see AppSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "                MESSAGE_SELECT_CARD_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hozongsien"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getCardListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * 4. {@code Storage} and {@code CardListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * {@code AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "     * @see AppSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 14,
      "-": 119,
      "hozongsien": 28
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "import seedu.address.model.ReadOnlyTriviaBundle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyAddressBook\u003e addressBook,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                                    Supplier\u003cReadOnlyTriviaBundle\u003e triviaBundle,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                                    Path addressBookFile, Path triviaBundleFile) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(addressBook, triviaBundle,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunWei96"
        },
        "content": "                    addressBookFile, triviaBundleFile));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunWei96": 6,
      "-": 72
    }
  }
]
