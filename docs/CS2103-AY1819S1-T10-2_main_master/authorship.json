[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Health Book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S1-T10-2/main[image:https://travis-ci.org/CS2103-AY1819S1-T10-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/elroyhaw/main/branch/master[image:https://ci.appveyor.com/api/projects/status/o0tls33cceuwbwew/branch/master?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S1-T10-2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S1-T10-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy badge]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* This is a desktop Health Book application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* It is a Java sample application intended for students learning Software Engineering while using Java as the main programming language."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* It is *written in OOP fashion*. It provides a *reasonably well-written* code example that is *significantly bigger* (around 6 KLoC)than what students usually write in beginner-level SE modules."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* The Health Book application targets clinic receptionists who need to manage a significant number of appointments"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* The Health Book application is most effective when user has preference for CLI and is able to type fast rather than mouse input"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* The original source code was taken from https://github.com/se-edu/addressbook-level4/[AddressBook-Level4] project, created by SE-EDU initiative."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "elroyhaw": 4
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "      \"githubId\": \"florafong97\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "      \"displayName\": \"FONG ...FLORA\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "      \"authorNames\": [\"florafong97\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "      \"githubId\": \"giamjuxian\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "      \"displayName\": \"GIAM ... XIAN\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "      \"authorNames\": [\"giamjuxian\", \"Giam\", \"giam_ju_xian\", \"qolas\", \"giam\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "      \"githubId\": \"elroyhaw\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "      \"displayName\": \"HAW Z...ELROY\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "      \"authorNames\": [\"elroyhaw\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "      \"githubId\": \"YangYafei1998\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "      \"displayName\": \"YANG ...YAFEI\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "      \"authorNames\": [\"YangYafei1998\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 2,
      "elroyhaw": 24
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    compile \u0027com.google.api-client:google-api-client:1.23.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    compile \u0027com.google.oauth-client:google-oauth-client-jetty:1.23.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    compile \u0027com.google.apis:google-api-services-calendar:v3-rev355-1.25.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    archiveName \u003d \u0027healthbook.jar\u0027"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level4\u0027,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level4\u0027,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 4,
      "-": 245
    }
  },
  {
    "path": "config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "  \"appTitle\" : \"Health Book\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "  \"logLevel\" : \"INFO\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "  \"userPrefsFilePath\" : \"preferences.json\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elroyhaw": 5
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "HealthBook was developed by CS2103 T10-2 team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "\u003d\u003d\u003d Haw Zhe Hao Elroy"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "image::elroyhaw.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "{empty} [https://github.com/elroyhaw[github]]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "Role: Team Lead"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "\u003d\u003d\u003d Giam Ju Xian"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "image::giamjuxian.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "{empty}[http://github.com/giamjuxian[github]]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "Role: Developer and Testing +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "Responsibilities: Ensures the testing of the project is done properly and on time."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "\u003d\u003d\u003d Fong Mei Yee Flora"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "image::florafong97.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "{empty}[http://github.com/florafong97[github]]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "Role: Documentation and Code Quality +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "Responsibilities: Looks after code quality, ensures adherence to coding standards, and the quality of various project documents."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "\u003d\u003d\u003d Yang Yafei"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "image::YangYafei1998.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "{empty}[http://github.com/YangYafei1998[github]]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "Role: Deliverables and Deadlines +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "Responsibilities: Ensure project deliverables are done on time and in the right format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "elroyhaw": 19
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "\u003d HealthBook - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `CS2103 T10-2`      Since: `Aug 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "image::ModelComponentClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "image::StorageComponentClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "* can save the Health Book data in xml format and read it back."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "\u003d\u003d\u003d Delete Patient and Doctor Feature"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "The delete patient and doctor features are facilitated by `DeletePatientCommand` and `DeleteDoctorCommand`. Both extends"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "`DeleteCommand` such that it is able to delete a specific class of `Person` (i.e. `Patient` or `Doctor`) instead. Additionally,"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "instead of deletion by index, deletion by name is used in this implementation."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ".Delete Patient Sequence Diagram"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "image::DeletePatientSequenceDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ".Delete Doctor Sequence Diagram"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "image::DeleteDoctorSequenceDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "Step 1. The user types in `delete-patient` or `delete-doctor` in the command box followed by the parameters `n/John Doe p/12345678`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "Step 2. Upon hitting enter, the `Patient` or `Doctor` will be removed from the system"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Algorithm to find `Patient` or `Doctor` to delete"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* Alternative 1 (current choice):  Loop through `model.getFilteredPersonList()` to find `Patient` or `Doctor` to delete"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "** Pros: Easy to implement"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "** Cons: If size of list grows unusually large (unusual because of our target audience), it may take awhile to retrieve the"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "`Patient` or `Doctor`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* Alternative 2: Use a Map that maps name to `Patient` or `Doctor`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "** Pros: Fast retrieval"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "** Cons: Will have to change a lot of lines of code"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "\u003d\u003d\u003d Register Patient Feature"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "The register patient are facilitated by `RegisterPatientCommand` and `RegisterPatientCommandParser`. This command extends"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "the `AddCommand` and `AddCommandParser` such that it is able to create a `Patient` object. The Patient object is"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "automatically tagged as `Patient`."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ".Register Patient Sequence Diagram"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "image::RegisterPatientSequenceDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "Patient model contains a PriorityQueue of upcoming appointment and ArrayList of past appointments. We implemented"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "the patient model in this way to allow ease of addition of new upcoming appointment to the patient."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "Step 1. The user types in `register-patient` in the command box followed by the parameters `n/John Doe p/91234567"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "e/test@test.com a/123 Clementi Road`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "Command Exception will be thrown if any of the information is missing or invalid. All fields are mandatory."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "Step 2. Upon hitting enter, the `Patient` will be created and added to the storage of the system"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "Patient is saved in the storage as person. However, when we retrieve the patient object from storage, it will be"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "created as a patient as determined by their tag."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data Structure of Upcoming and Past Appointments"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "* Alternative 1 (Current Choice): Upcoming Appointments stored within a PriorityQueue and Past Appointments stored within an"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "ArrayList. This allows the appointments to be added in a non-chronological order. Past appointments can also be iterated"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "through easily when required."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "* Alternative 2 (Previous Implementation): Upcoming Appointments stored within a Queue and Past Appointments stored within a"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "Stack."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "\u003d\u003d\u003d Register Doctor Feature"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "The register doctor are facilitated by `RegisterDoctorCommand` and `RegisterDoctorCommandParser`. This command extends"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "the `AddCommand` and `AddCommandParser` such that it is able to create a `Doctor` object. The Doctor object is"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "automatically tagged as `Doctor`."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ".Register Patient Sequence Diagram"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "image::RegisterDoctorSequenceDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "Step 1. The user types in `register-doctor` in the command box followed by the parameters `n/John Doe p/91234567 e/test@test.com a/123 Clementi Road`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "Command Exception will be thrown if any of the information is missing or invalid. All fields are mandatory."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "Step 2. Upon hitting enter, a browser will be opened for user to login to google to register their Google Calendar."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ".Google Login Page"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "image::GoogleLoginPage.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "Step 3. Simultaneously, the `Doctor` will be created and added to the storage of the system. In the case that the user"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "does not login to google, subsequent access to their google calendar will be denied. However, doctor object will still"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "be created."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "Doctor is saved in the storage as person. However, when we retrieve the doctor object from storage, it will be"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "created as a doctor as determined by their tag."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Presenting Google Calendar Login to Doctors"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "* Alternative 1 (Current Choice): Implement Google Calendar login with a popped up browser. This allow the data transfer"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " for the Google login to be simplified. No additional parsing will be required. In addition, the pop up of the browser"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " will capture the users attention, decreasing the chance of user missing this login procedure."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "* Alternative 2 (Alternative Choice): Implement Google Calendar login with the browser panel instead."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "Instead of having an additional browser, we load the login page into the Browser Panel. This will facilitate a seamless"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "login for the login but user might miss the login compared to having a popped up browser."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Saving Doctor with respect to Google Login"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "* Alternative 1 (Current Choice): Allow doctor to still be created with or without the Google Login. Since the Google"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "Calendar acts as an add-on, it should not interfere with the main function of the HealthBook. As such, we implemented"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "register-doctor to have Google Login as optional. However, subsequent calls of Calendar related functions will still"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "prompt the user to login."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "* Alternative 2 (Alternative Choice): Doctor object will not be created if Google Login is unsuccessful, instead throw"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "an exception. This will make Google Calendar mandatory for all doctors."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "florafong97"
        },
        "content": "\u003d\u003d\u003d Remark Command"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "florafong97"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "florafong97"
        },
        "content": "Remark command allows user to input any information into Doctor/Patient object with no restrictions. This command can"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "florafong97"
        },
        "content": "only be called after person is created."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "florafong97"
        },
        "content": ".Sequence Diagram for Remark Command"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "florafong97"
        },
        "content": "image::RemarkCommandSequenceDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "florafong97"
        },
        "content": "Step 1. The user types in `remark` in the command box followed by the parameters `index r/some remark`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "florafong97"
        },
        "content": "Step 2. Upon hitting enter, the new remark will be visible in the Doctor/Patient\u0027s contact. If input was empty, the"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "florafong97"
        },
        "content": "previous remark will be deleted."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "florafong97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Easier access to remark"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "florafong97"
        },
        "content": "* Alternative 1 (Current choice): Currently, the remark command is only accessible via index. We will change it to be"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "florafong97"
        },
        "content": "accessible via name as this allows the receptionist to edit the remark without looking for the index beforehand."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "\u003d\u003d\u003d Add Medical History Feature"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "The add medical history feature is facilitated by `AddMedicalHistoryCommand` and `AddMedicalHistoryCommandParser`. This"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "command is implemented such that it is able to add `allergies` AND/OR `conditions` to `MedicalHistory` object for a specific"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "`Patient` specified by index."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ".Add Medical History Sequence Diagram"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "image::AddMedicalHistorySequenceDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "Step 1. The user types in `add-medical-history` in the command box followed by the parameter `INDEX al/penicillin,milk"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "c/sub-healthy,hyperglycemia`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "For multiple inputs in the same field, use comma `,` to separate. Do not append blank after `,`."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "You must provide both prefixes of allergy and condition, but can leave at most one input blank."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "Step 2. Upon hitting enter, the `allergies` AND `conditions` of `MedicalHistory` will get added"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "Exception will be thrown if inputs for both field are blank."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Support different types of input"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "* Alternative 1 (Current choice): `AddMedicalHistoryCommand` allow user to fill in one or more allergies and conditions"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "(separated by comma). It is also supported to leave EITHER field blank."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "\u003d\u003d\u003d Delete Medical History Feature"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "The delete medical history feature is facilitated by `DeleteMedicalHistoryCommand` and"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "`DeleteMedicalHistoryCommandParser`. This command is implemented such that it is able to delete `allergy` AND/OR"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "`condition` from `MedicalHistory` object for a specific `Patient` specified by index."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ".Delete Medical History Sequence Diagram"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "image::DeleteMedicalHistorySequenceDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "Step 1. The user types in `delete-medical-history` in the command box followed by the parameter `INDEX"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "al/penicillin,milk c/sub-healthy,hyperglycemia`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "For multiple inputs in the same field, use comma `,` to separate. Do not append blank after `,`."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "You must provide both prefixes of allergy and condition, but can leave at most one input blank."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "Step 2. Upon hitting enter, the `allergies` AND `conditions` of `MedicalHistory` will get deleted"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "Exception will be thrown if inputs for both field are blank."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "Exception will be thrown if given input is not in the original medical history."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Support different types of input"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "* Alternative 1 (Current choice): `DeleteMedicalHistoryCommand` allow user to fill in one or more allergies and"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "conditions (separated by comma). It is also supported to leave EITHER field blank."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "\u003d\u003d\u003d Filter Patient and Filter Doctor Feature"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "This feature help to filter all patients/doctors in health book"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ".Filter Patient Sequence Diagram"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "image::FilterPatientSequenceDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "Step 1. The user types `filter-patient` or `filter-doctor` in the command box"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "Step 2. Upon hitting enter, all persons who are tagged as \"Patient\" or \"Doctor\" would appear on the panel"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new Xml field for `Remark`."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* Clinic Receptionists"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* has a need to manage a significant number of appointments"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* has a need to keep track of history of patients, appointments and prescriptions"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "*Value proposition*:"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "Our platform will allow the clinic receptionist to easily manage patient’s medical information"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "and appointments with the doctors. This will allow appointments to be efficiently managed and"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "information transfer to be more seamless."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "|`* * *` |receptionist |register accounts for patients or doctors |keep track of their appointments and other information"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "|`* * *` |receptionist |delete an account for patients or doctors |remove accounts that are not in use or invalid"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "|`* * *` |receptionist |view patient’s upcoming appointments, recent visits and follow-ups requests on the landing page |easily look through the patients information"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "|`* * *` |receptionist |add prescription to patient after appointment |keep their latest completed appointment updated"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "|`* * *` |receptionist |delete prescription to patient after appointment |remove any discrepancies found"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "|`* * *` |receptionist |edit prescription to patient after appointment |amend any discrepancies found"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "|`* * *` |receptionist |check prescription provided by doctor |follow up with the patients if they wish to check their prescription"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "|`* * *` |receptionist |add patient details (especially medical history) to patient’s profile |allow the doctors to find the patients records easily"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "|`* * *` |receptionist |delete patient details (especially medical history) from patient\u0027s profile |allow the doctors to find the most updated patients records"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "|`* * *` |receptionist |view patient’s details prior to appointment |provide information to the doctor, allowing them to know the full extent of patient’s health condition"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "|`* * *` |receptionist |remind a particular patient of their next appointment |prevent him/her from forgetting their appointments"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "|`* * *` |receptionist |remind all patients of their next appointment |prevent them from forgetting their appointments"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "|`* * *` |receptionist |book an doctor’s appointment for patient |reserve an appointment with doctor for the patient"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "|`* * *` |receptionist |edit an doctor’s appointment for patient |edit a reserve slot for an appointment with doctor for the patient"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "|`* * *` |receptionist |delete an doctor’s appointment for patient |remove a reserve slot for an appointment with doctor for the patient"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "(For all use cases below, the *System* is the `HealthBook` and the *Actor* is the `receptionist`, unless specified otherwise)"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete person"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "2.  AddressBook shows a list of persons"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "4.  AddressBook deletes the person"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "YangYafei1998": 57,
      "giamjuxian": 66,
      "elroyhaw": 51,
      "-": 893,
      "florafong97": 13
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "\u003d HealthBook - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-T10-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team CS2103-AY1819S1-T10-2`      Since: `Aug 2018`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "HealthBook is for clinic receptionist who *prefer to use a desktop app for managing doctors and patients information and appointments*."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "HealthBook is *optimized for receptionist who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "If you can type fast, HealthBook can help you maintain a clean and concise information management of your doctors and patients more efficiently compared traditional GUI apps."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ".  Download the latest `healthbook.jar` link: https://github.com/CS2103-AY1819S1-T10-2/main/releases."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your HealthBook."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all patients and doctors"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* **`register-patient`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : registers a patient named `John Doe` to the HealthBook."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* **`delete-patient`**`n/John Doe` : deletes patient named John Doe"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `register-patient n/NAME`, `NAME` is a parameter which can be used as `register-patient n/John Doe`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [al/ALLERGIES]` can be used as `n/John Doe al/milk` or as `n/John Doe`."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "\u003d\u003d\u003d Registering a patient: `register-patient`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "Registers a patient to the HealthBook. Patient is automatically tagged as a \"Patient\". +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "Format: `register-patient n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "* `register-patient n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "\u003d\u003d\u003d Registering a doctor: `register-doctor`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "Registers a doctor to the HealthBook. Doctor is automatically tagged as a \"Doctor\". +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "Format: `register-doctor n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* `register-doctor n/Mary Jane p/98765432 e/maryj@example.com a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "\u003d\u003d\u003d Deleting a patient: `delete-patient`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "Deletes a patient from the HealthBook by name. +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "Format: `delete-patient n/NAME`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* `delete-patient n/John Doe`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "\u003d\u003d\u003d Deleting a doctor: `delete-doctor`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "Deletes a doctor from the HealthBook by name. +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "Format: `delete-doctor n/NAME`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* `delete-doctor n/Mary Jane`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "\u003d\u003d\u003d Viewing a patient: `view-patient`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "Views a landing page of a patient on the HealthBook. This will display all information of the patient onto the HealthBook"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "including their medical history, upcoming appointment and their past appointments. +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "Format: `view-patient n/NAME`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "* Views the patient and loads the information page of the patient with the specified `NAME`."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "* The name refers to the name that the patient is registered under."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "* The name must have been registered into the HealthBook."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "* `view-patient n/John Doe`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "\u003d\u003d\u003d Viewing a doctor: `view-doctor`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "Views a landing page of a doctor on the HealthBook. This will display the doctor\u0027s upcoming appointments. +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "Format: `view-doctor n/NAME`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "****"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* Views the doctor\u0027s upcoming appointments with the specified `NAME`."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* The name refers to the name that the doctor is registered under."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* The name must have been registered into the HealthBook."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "****"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* `view-doctor n/Mary Jane`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "\u003d\u003d\u003d Listing all patients and doctors : `list`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "Shows a list of all patients and doctors in the HealthBook. +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "\u003d\u003d\u003d Booking an appointment: `add-appointment`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "Book a doctor\u0027s appointment for the patient. An ID of this appointment will be generated. +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "Format: `add-appointment n/PATIENT_NAME doc/DOCTOR_NAME dt/DATE_TIME`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* Date and time should be in the format `yyyy-MM-dd HH:mm`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* `add-appointment np/John Doe np/Mary Jane d/2018-10-17 15:00`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "\u003d\u003d\u003d Deleting an appointment `delete-appointment`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "Delete a doctor\u0027s appointment for the patient by its ID. +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "Format: `delete-appointment APPOINTMENT_ID`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* `delete-appointment 10001`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "\u003d\u003d\u003d Completing an appointment `complete-appointment`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "Complete an appointment. +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "Format: `complete-appointment APPOINTMENT_ID`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* `complete-appointment 10001`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "\u003d\u003d\u003d Adding prescriptions to a patient\u0027s appointment: `add-prescription`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "Adds a prescription to the patient\u0027s appointment with details of medicine name, dosage and number of times to consume"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "in a day. +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "Format: `add-prescription pi/APPOINTMENT_ID pn/MEDICINE_NAME pd/DOSAGE pc/CONSUMPTION_PER_DAY`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* `add-prescription pi/10001 pn/Paracetamol pd/2 pc/3`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* Each prescription is tied to an appointment."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "* There cannot be a duplicate of drug name for that particular appointment."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "\u003d\u003d\u003d Adding prescriptions to a patient\u0027s appointment: `delete-prescription`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "Delete a prescription to the patient\u0027s appointment by appointment ID and medicine name. +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "Format: `delete-prescription pi/APPOINTMENT_ID pn/MEDICINE_NAME`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* `delete-prescription pi/10001 pn/Paracetamol`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "\u003d\u003d\u003d Adding medical condition or allergy to patient: `add-medical-history`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "Add a condition or allergy to the patient\u0027s medical history. This will then be displayed on the users information page. +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "Format: `add-medical-history n/NAME al/ALLERGIES c/CONDITIONS`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* `add-medical-history n/John Doe al/penicillin,milk c/sub-healthy,hyperglycemia`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "* Either condition or allergy must be non-blank value."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "\u003d\u003d\u003d Deleting medical condition or allergy to patient: `delete-medical-history`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "Delete a condition or allergy to the patient\u0027s medical history. This will then be removed on the patient\u0027s information page. +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "Format: `delete-medical-history n/NAME al/ALLERGIES c/CONDITIONS`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* `delete-medical-history n/John Doe al/penicillin,milk c/sub-healthy,hyperglycemia`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "****"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "* Either condition or allergy must be non-blank value."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "* Condition and allergy indicated must be present in the patient\u0027s records"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "****"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "Restores the HealthBook to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "Undoable commands: those commands that modify the HealthBook\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* `delete-patient 10001` +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "`undo` (reverses the `delete-patient 10001` command) +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* `view-patient n/John Doe` +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* `delete-patient 10001` +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "`undo` (reverses the `delete-patient 10001` command) +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* `delete-patient 10001` +"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "`undo` (reverses the `delete-patient 10001` command) +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "`redo` (reapplies the `delete-patient 10001` command) +"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* `delete-patient 10001` +"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* `delete-patient 10001` +"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "`undo` (reverses the `delete-patient 10001` command) +"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "`redo` (reapplies the `delete-patient 10001` command) +"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "Clears all entries from the HealthBook. +"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "HealthBook data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "\u003d\u003d\u003d Tab to autocomplete commands"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "In the command box, user can type the first few characters of the command and tab to autocomplete it."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "\u003d\u003d\u003d Remind patient on their upcoming appointment `[coming soon in v2.0]`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "Remind a patient on their upcoming appointment. This will send a message to the patient via an external platform to inform"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "them about their appointment."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "\u003d\u003d\u003d Remind all patient on their upcoming appointment `[coming soon in v2.0]`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "Remind all patient will upcoming appointment this week. This will send a message to the patient via an external platform to"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "inform them about their upcoming appointment."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous HealthBook folder."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* *Register patient* `register-patient n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS` +"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "e.g. `register-patient n/John Doe p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* *Register doctor* `register-patient n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS` +"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "e.g. `register-doctor n/Mary Jane p/12224444 e/maryjane@example.com a/12, Clementi Rd, 1234665`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* *Delete patient* : `delete-patient n/NAME` +"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "e.g. `delete-patient n/John Doe`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* *Delete doctor* : `delete-doctor n/NAME` +"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "e.g. `delete-doctor n/Mary Jane`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* *View patient* : `view-patient n/NAME` +"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "e.g. `view-patient n/John Doe`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* *View doctor* : `view-doctor n/NAME` +"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "e.g. `view-doctor n/Mary Jane`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* *Book appointment* : `add-appointment n/PATIENT_NAME doc/DOCTOR_NAME dt/DATE_TIME` +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "e.g. `add-appointment np/John Doe np/Mary Jane d/2018-10-17 15:00`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* *Delete appointment* : `delete-appointment APPOINTMENT_ID`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "e.g. `delete-appointment 10001`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* *Complete appointment* : `complete-appointment APPOINTMENT_ID`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "e.g. `complete-appointment 10001`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* *Add prescriptions* : `add-prescription pi/APPOINTMENT_ID pn/MEDICINE_NAME pd/DOSAGE pc/CONSUMPTION_PER_DAY``add-prescription pi/10001 pn/Paracetamol pd/2 pc/3`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "e.g. `add-prescription pi/10001 pn/Paracetamol pd/2 pc/3`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* *Delete prescriptions* : `delete-prescription pi/APPOINTMENT_ID pn/MEDICINE_NAME`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "e.g. `delete-prescription pi/10001 pn/Paracetamol`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* *Add allergies or conditions* : `add-medical-history n/NAME al/ALLERGIES c/CONDITIONS`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "e.g. `add-medical-history n/John Doe al/penicillin, milk c/sub-healthy, hyperglycemia`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* *Delete allergies or conditions* : `delete-medical-history n/NAME al/ALLERGIES c/CONDITIONS`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "e.g. `delete-medical-history n/John Doe al/penicillin, milk c/sub-healthy, hyperglycemia`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "* *Exit* : `exit`"
      }
    ],
    "authorContributionMap": {
      "YangYafei1998": 4,
      "giamjuxian": 63,
      "-": 163,
      "elroyhaw": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing HealthBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e healthBookOptional;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            healthBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            if (!healthBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            initialData \u003d healthBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 5,
      "-": 202,
      "elroyhaw": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/calendar/GoogleCalendar.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "package seedu.address.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.security.GeneralSecurityException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import com.google.api.client.auth.oauth2.Credential;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import com.google.api.client.http.javanet.NetHttpTransport;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * The API of the Calendar component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "public interface GoogleCalendar {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Creates an authorized Credential object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * @param httpTransport The network HTTP Transport."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * @return An authorized Credential object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * @throws IOException If the credentials.json file cannot be found."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public Credential getCredentials(final NetHttpTransport httpTransport, String userName) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Register the oAuth token for the respective doctors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /** */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void registerDoctor(String userName) throws IOException, GeneralSecurityException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Adds an appointment event to the primary calendar of the respective doctors."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * This includes an encoded calendar event Id based on the {@code appointment}\u0027s id"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /** */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void addAppointment(String userName, Appointment appointment) throws IOException, GeneralSecurityException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Delete an appointment event to the primary calendar of the respective doctors."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Delete using an encoded calendar event Id based on the {@code appointment}\u0027s id"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void deleteAppointment(String userName, Appointment appointment) throws IOException,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            GeneralSecurityException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/calendar/GoogleCalendarManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "package seedu.address.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.security.GeneralSecurityException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.time.ZonedDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import com.google.api.client.auth.oauth2.Credential;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import com.google.api.client.googleapis.json.GoogleJsonResponseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import com.google.api.client.http.javanet.NetHttpTransport;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import com.google.api.client.json.JsonFactory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import com.google.api.client.json.jackson2.JacksonFactory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import com.google.api.client.util.DateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import com.google.api.client.util.store.FileDataStoreFactory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import com.google.api.services.calendar.Calendar;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import com.google.api.services.calendar.CalendarScopes;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import com.google.api.services.calendar.model.Event;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import com.google.api.services.calendar.model.EventDateTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import com.google.common.base.Charsets;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import com.google.common.io.BaseEncoding;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * Manages all information transaction between doctor\u0027s google calendar and HealthBook."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "public class GoogleCalendarManager implements GoogleCalendar {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private static final String APPLICATION_NAME \u003d \"HealthBook\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private static final JsonFactory JSON_FACTORY \u003d JacksonFactory.getDefaultInstance();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private static final String TOKENS_DIRECTORY_PATH \u003d \"tokens\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Global instance of the scopes required by this quickstart."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * If modifying these scopes, delete your previously saved tokens/ folder."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private static final List\u003cString\u003e SCOPES \u003d Collections.singletonList(CalendarScopes.CALENDAR_EVENTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private static final String CREDENTIALS_FILE_PATH \u003d \"credentials.json\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public Credential getCredentials(final NetHttpTransport httpTransport, String userName) throws IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        /// Load client secrets."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        InputStream in \u003d getClass().getClassLoader().getResourceAsStream(CREDENTIALS_FILE_PATH);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        InputStreamReader inStreamReader \u003d new InputStreamReader(in);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        GoogleClientSecrets clientSecrets \u003d GoogleClientSecrets.load(JSON_FACTORY, inStreamReader);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // Build flow and trigger user authorization request."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        GoogleAuthorizationCodeFlow flow \u003d new GoogleAuthorizationCodeFlow.Builder("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            httpTransport, JSON_FACTORY, clientSecrets, SCOPES)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            .setDataStoreFactory(new FileDataStoreFactory(new java.io.File(TOKENS_DIRECTORY_PATH)))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            .setAccessType(\"offline\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        LocalServerReceiver receiver \u003d new LocalServerReceiver.Builder().setPort(8888).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return new AuthorizationCodeInstalledApp(flow, receiver).authorize(userName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void registerDoctor(String userName) throws IOException, GeneralSecurityException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        final NetHttpTransport httpTransport \u003d GoogleNetHttpTransport.newTrustedTransport();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Calendar service \u003d new Calendar.Builder(httpTransport, JSON_FACTORY, getCredentials(httpTransport, userName))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                .setApplicationName(APPLICATION_NAME)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void addAppointment(String userName, Appointment appointment) throws IOException, GeneralSecurityException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        final NetHttpTransport httpTransport \u003d GoogleNetHttpTransport.newTrustedTransport();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Calendar service \u003d new Calendar.Builder(httpTransport, JSON_FACTORY, getCredentials(httpTransport, userName))"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                .setApplicationName(APPLICATION_NAME)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // Configure Start Date and Time"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        LocalDateTime appointmentDateTime \u003d appointment.getDateTime();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        ZonedDateTime zdt \u003d appointmentDateTime.atZone(ZoneId.systemDefault());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Date startOutput \u003d Date.from(zdt.toInstant());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Date endOutput \u003d new Date(startOutput.getTime() + 3600 * 1000);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        EventDateTime startDateTime \u003d new EventDateTime();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        startDateTime.setDateTime(new DateTime(startOutput));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        EventDateTime endDateTime \u003d new EventDateTime();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        endDateTime.setDateTime(new DateTime(endOutput));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // Configure Event Id"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        String eventId \u003d \"healthbook\" + Integer.toString(appointment.getAppointmentId());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        String eventIdEncoded \u003d BaseEncoding.base32Hex().encode(eventId.getBytes(Charsets.US_ASCII)).toLowerCase();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // Configure Event"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Event appointmentToAdd \u003d new Event();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        appointmentToAdd.setStart(startDateTime);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        appointmentToAdd.setEnd(endDateTime);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        appointmentToAdd.setId(eventIdEncoded);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        appointmentToAdd.setDescription(\"Comments: \" + appointment.getComments());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        appointmentToAdd.setSummary(\"Appointment with \" + appointment.getPatient());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // Find existing event with same eventId. Deleted eventId is not deleted entirely but cancelled and hidden"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Event event \u003d null;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            event \u003d service.events().get(\"primary\", eventIdEncoded).execute();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        } catch (GoogleJsonResponseException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            if (e.getDetails().getCode() \u003d\u003d 400) { // No Event Found"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                event \u003d null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        if (event \u003d\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            // Insert new Event"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            service.events().insert(\"primary\", appointmentToAdd).execute();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            service.events().update(\"primary\", eventIdEncoded, appointmentToAdd).execute();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void deleteAppointment(String userName, Appointment appointment)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throws IOException, GeneralSecurityException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        final NetHttpTransport httpTransport \u003d GoogleNetHttpTransport.newTrustedTransport();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Calendar service \u003d new Calendar.Builder(httpTransport, JSON_FACTORY, getCredentials(httpTransport, userName))"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                .setApplicationName(APPLICATION_NAME)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // Configure Event Id"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        String eventId \u003d \"healthbook\" + Integer.toString(appointment.getAppointmentId());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        String eventIdEncoded \u003d BaseEncoding.base32Hex().encode(eventId.getBytes(Charsets.US_ASCII)).toLowerCase();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            // Delete Event"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            service.events().delete(\"primary\", eventIdEncoded).execute();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        } catch (GoogleJsonResponseException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            if (e.getDetails().getCode() \u003d\u003d 410) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 146
    }
  },
  {
    "path": "src/main/java/seedu/address/calendar/exceptions/AppointmentAlreadyRemovedOnCalendarException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "package seedu.address.calendar.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "public class AppointmentAlreadyRemovedOnCalendarException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public AppointmentAlreadyRemovedOnCalendarException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        super(\"Appointment already removed on the google calendar.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private String appTitle \u003d \"Health Book\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 73,
      "elroyhaw": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/PersonPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a selection change in the Person List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person newSelection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonPanelSelectionChangedEvent(Person newSelection) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public PersonPanelSelectionChangedEvent() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        this.newSelection \u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person getNewSelection() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "elroyhaw": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.calendar.GoogleCalendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.calendar.GoogleCalendarManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private final GoogleCalendar googleCalendar;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        googleCalendar \u003d new GoogleCalendarManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            return command.execute(model, history, googleCalendar);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 5,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddAppointmentCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOCTOR_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.security.GeneralSecurityException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.calendar.GoogleCalendar;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.appointment.exceptions.InvalidInputOutputException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.appointment.exceptions.InvalidSecurityAccessException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " * Adds a patient\u0027s appointment to the health book."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "public class AddAppointmentCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-appointment\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a patient\u0027s appointment to the health book. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            + PREFIX_PATIENT_NAME + \"PATIENT_NAME \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            + PREFIX_DOCTOR_NAME + \"DOCTOR_NAME \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            + PREFIX_DATE_TIME + \"DATE_TIME \\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            + PREFIX_PATIENT_NAME + \"John Doe \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            + PREFIX_DOCTOR_NAME + \"Mary Jane \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            + PREFIX_DATE_TIME + \"2018-10-17 15:00 \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New appointment added\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final String MESSAGE_INVALID_PATIENT \u003d \"This patient does not exist in the HealthBook\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final String MESSAGE_INVALID_DOCTOR \u003d \"This doctor does not exist in the HealthBook\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public static final String MESSAGE_DOCTOR_CLASH_APPOINTMENT \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            \"This doctor already have an appointment in that time slot.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public static final String MESSAGE_PATIENT_CLASH_APPOINTMENT \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            \"This patient already have an appointment in that time slot.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    // TODO - add messages for various cases (e.g. conflict in schedule) here when google calendar is up"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private final Name patientName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private final Name doctorName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private final LocalDateTime dateTime;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Creates an AddAppointmentCommand to add the specified {@code Appointment}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public AddAppointmentCommand(Name patientName, Name doctorName, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        requireAllNonNull(patientName, doctorName, dateTime);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        this.patientName \u003d patientName;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        this.doctorName \u003d doctorName;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, GoogleCalendar googleCalendar)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        Patient patient \u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        Doctor doctor \u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        for (Person person : lastShownList) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            if (person.getName().equals(patientName) \u0026\u0026 person instanceof Patient) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                patient \u003d (Patient) person;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            if (person.getName().equals(doctorName) \u0026\u0026 person instanceof Doctor) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                doctor \u003d (Doctor) person;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            if (patient !\u003d null \u0026\u0026 doctor !\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        if (patient \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_PATIENT);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        if (doctor \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_DOCTOR);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment appointment \u003d new Appointment(model.getAppointmentCounter(), doctor.getName().toString(),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                patient.getName().toString(), dateTime);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            googleCalendar.addAppointment(doctor.getName().toString(), appointment);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        } catch (GeneralSecurityException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new InvalidSecurityAccessException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new InvalidInputOutputException();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        if (doctor.hasClashForAppointment(appointment)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new CommandException(MESSAGE_DOCTOR_CLASH_APPOINTMENT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        if (patient.hasClashForAppointment(appointment)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new CommandException(MESSAGE_PATIENT_CLASH_APPOINTMENT);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        doctor.addUpcomingAppointment(appointment);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        patient.addUpcomingAppointment(appointment);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        model.incrementAppointmentCounter();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        model.addAppointment(appointment);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        EventsCenter.getInstance().post(new PersonPanelSelectionChangedEvent(patient));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                || (other instanceof AddAppointmentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                \u0026\u0026 patientName.equals(((AddAppointmentCommand) other).patientName)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                \u0026\u0026 doctorName.equals(((AddAppointmentCommand) other).doctorName)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                \u0026\u0026 dateTime.equals(((AddAppointmentCommand) other).dateTime));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 41,
      "elroyhaw": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.calendar.GoogleCalendar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, GoogleCalendar googleCalendar)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 4,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddMedicalHistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONDITION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.calendar.GoogleCalendar;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.patient.MedicalHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": " * add medical history for a patient specified by index in healthbook"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "public class AddMedicalHistoryCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-medical-history\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            + \": Adds medical history for a person to the address book. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            + PREFIX_ALLERGY + \"ALLERGIES (separated by comma) \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            + PREFIX_CONDITION + \"CONDITIONS (separated by comma) \\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            + PREFIX_ALLERGY + \"penicillin, milk \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            + PREFIX_CONDITION + \"sub-healthy, hyperglycemia \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String MESSAGE_ADD_MEDICAL_HISTORY_SUCCESS \u003d \"Medical history added for: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String MESSAGE_INVALID_ADD_MEDICAL_HISTORY \u003d \"This command is only for patients\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String MESSAGE_INVALID_ADD_MEDICAL_HISTORY_DUPLICATE \u003d \": already existed\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String MESSAGE_INVALID_ADD_MEDICAL_HISTORY_NO_INFO \u003d \"Please provide valid info\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String MESSAGE_INVALID_ADD_MEDICAL_HISTORY_NO_MATCH_NAME \u003d \" does not exist in the healthbook\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    private String allergy;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    private String condition;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    private MedicalHistory medicalHistory \u003d new MedicalHistory();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     * Creates an AddMedicalHistoryCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public AddMedicalHistoryCommand(Name name, String allergy, String condition) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        this.condition \u003d condition;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        this.allergy \u003d allergy;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, GoogleCalendar googleCalendar)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        Person personToEdit \u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        boolean personExist \u003d false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        for (Person person : lastShownList) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            if (person.getName().equals(name)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                personToEdit \u003d person;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                personExist \u003d true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        if (!personExist) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_ADD_MEDICAL_HISTORY_NO_MATCH_NAME);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        if (!(personToEdit.getTags().contains(new Tag(\"Patient\")))) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_ADD_MEDICAL_HISTORY);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        Patient patientToEdit \u003d (Patient) personToEdit;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        if (allergy.equals(\"\") \u0026\u0026 condition.equals(\"\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_ADD_MEDICAL_HISTORY_NO_INFO);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        ArrayList\u003cString\u003e newAllergies \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        ArrayList\u003cString\u003e newConditions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        if (!(allergy.equals(\"\"))) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            newAllergies \u003d new ArrayList\u003c\u003e(Arrays.asList(allergy.split(\",\")));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            if (!(patientToEdit.getMedicalHistory().getAllergies().equals(null))) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                for (int i \u003d 0; i \u003c newAllergies.size(); i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                    if (patientToEdit.getMedicalHistory().getAllergies().contains(newAllergies.get(i))) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                        throw new CommandException(newAllergies.get(i) + MESSAGE_INVALID_ADD_MEDICAL_HISTORY_DUPLICATE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        if (!(condition.equals(\"\"))) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            newConditions \u003d new ArrayList\u003c\u003e(Arrays.asList(condition.split(\",\")));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            if (!(patientToEdit.getMedicalHistory().getConditions().equals(null))) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                for (int i \u003d 0; i \u003c newConditions.size(); i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                    if (patientToEdit.getMedicalHistory().getConditions().contains(newConditions.get(i))) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                        throw new CommandException(newConditions.get(i)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                                + MESSAGE_INVALID_ADD_MEDICAL_HISTORY_DUPLICATE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        ArrayList\u003cString\u003e allergies \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        ArrayList\u003cString\u003e conditions \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        if (!(patientToEdit.getMedicalHistory().getAllergies().equals(null))) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            allergies.addAll(patientToEdit.getMedicalHistory().getAllergies());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        if (!(allergy.equals(\"\"))) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            allergies.addAll(newAllergies);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        if (!(patientToEdit.getMedicalHistory().getAllergies().equals(null))) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            conditions.addAll(patientToEdit.getMedicalHistory().getConditions());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        if (!(condition.equals(\"\"))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            conditions.addAll(newConditions);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        medicalHistory.setAllergies(allergies);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        medicalHistory.setConditions(conditions);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        Patient editedPatient \u003d new Patient(patientToEdit.getName(), patientToEdit.getPhone(), patientToEdit.getEmail(),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                patientToEdit.getAddress(), patientToEdit.getRemark(), patientToEdit.getTags(),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                patientToEdit.getTelegramId(), patientToEdit.getUpcomingAppointments(),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                patientToEdit.getPastAppointments());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        editedPatient.setMedicalHistory(medicalHistory);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        model.updatePerson(patientToEdit, editedPatient);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        EventsCenter.getInstance().post(new PersonPanelSelectionChangedEvent(editedPatient));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_MEDICAL_HISTORY_SUCCESS, patientToEdit));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        if (o \u003d\u003d this) { //if same object"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        } else if (!(o instanceof AddMedicalHistoryCommand)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            AddMedicalHistoryCommand r \u003d (AddMedicalHistoryCommand) o;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            return name.equals(r.name) \u0026\u0026 allergy.equals(r.allergy) \u0026\u0026 condition.equals(r.condition);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangYafei1998": 154,
      "giamjuxian": 2,
      "elroyhaw": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddPrescriptionCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florafong97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONSUMPTION_PER_DAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOSAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICINE_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.calendar.GoogleCalendar;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.AppointmentId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.Prescription;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "florafong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florafong97"
        },
        "content": " * Adds a prescription to an appointment"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florafong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florafong97"
        },
        "content": "public class AddPrescriptionCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-prescription\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a prescription to an appointment. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            + \"APPOINTMENT_ID \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            + PREFIX_MEDICINE_NAME + \"MEDICINE_NAME \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            + PREFIX_DOSAGE + \"DOSAGE \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            + PREFIX_CONSUMPTION_PER_DAY + \"CONSUMPTION_PER_DAY \\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            + \"10005 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            + PREFIX_MEDICINE_NAME + \"Paracetamol \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            + PREFIX_DOSAGE + \"2 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            + PREFIX_CONSUMPTION_PER_DAY + \"3 \";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Prescription added: %1$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PRESCRIPTION \u003d \"This prescription already exists in the appointment\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String MESSAGE_APPOINTENT_DOES_NOT_EXIST \u003d \"This appointment does not exist\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    private final Prescription prescriptionToAdd;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Creates an AddPrescriptionCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public AddPrescriptionCommand(int id, Prescription prescription) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        requireAllNonNull(prescription);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        prescriptionToAdd \u003d prescription;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, GoogleCalendar googleCalendar)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        List\u003cAppointment\u003e appointmentList \u003d model.getFilteredAppointmentList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // check if appointment exists"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Appointment appointmentToEdit \u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        for (Appointment appointment : appointmentList) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            if (appointment.getAppointmentId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                appointmentToEdit \u003d appointment;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // if appointment does not exist"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        if (appointmentToEdit \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_APPOINTENT_DOES_NOT_EXIST));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // check if prescription already exists in appointment"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        if (appointmentToEdit.getPrescriptions().contains(prescriptionToAdd)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_PRESCRIPTION));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // adding prescription"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        ArrayList\u003cPrescription\u003e allPrescriptions \u003d new ArrayList\u003cPrescription\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        allPrescriptions.addAll(appointmentToEdit.getPrescriptions());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Appointment editedAppointment \u003d new Appointment(new AppointmentId(appointmentToEdit.getAppointmentId()),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                appointmentToEdit.getDoctor(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                appointmentToEdit.getPatient(),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                appointmentToEdit.getDateTime(),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                appointmentToEdit.getStatus(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                appointmentToEdit.getComments(),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                allPrescriptions);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        editedAppointment.addPrescription(prescriptionToAdd);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        model.updateAppointment(appointmentToEdit, editedAppointment);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        List\u003cPerson\u003e personList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Doctor doctorToEdit \u003d null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Patient patientToEdit \u003d null;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        for (Person person : personList) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            if (person instanceof Doctor) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                if (appointmentToEdit.getDoctor().equals(person.getName().toString())) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                    doctorToEdit \u003d (Doctor) person;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            if (person instanceof Patient) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                if (appointmentToEdit.getPatient().equals(person.getName().toString())) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                    patientToEdit \u003d (Patient) person;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            if (doctorToEdit !\u003d null \u0026\u0026 patientToEdit !\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        if (doctorToEdit \u003d\u003d null || patientToEdit \u003d\u003d null) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            throw new CommandException(MESSAGE_APPOINTENT_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        //TODO update google calendar"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Patient editedPatient \u003d new Patient(patientToEdit.getName(), patientToEdit.getPhone(),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                patientToEdit.getEmail(), patientToEdit.getAddress(), patientToEdit.getRemark(),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                patientToEdit.getTags(), patientToEdit.getTelegramId(), patientToEdit.getUpcomingAppointments(),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                patientToEdit.getPastAppointments(), patientToEdit.getMedicalHistory());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Doctor editedDoctor \u003d new Doctor(doctorToEdit.getName(), doctorToEdit.getPhone(), doctorToEdit.getEmail(),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                doctorToEdit.getAddress(), doctorToEdit.getRemark(), doctorToEdit.getTags(),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                doctorToEdit.getUpcomingAppointments());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        editedPatient.setAppointment(appointmentToEdit, editedAppointment);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        editedDoctor.setAppointment(appointmentToEdit, editedAppointment);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        model.updatePerson(patientToEdit, editedPatient);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        model.updatePerson(doctorToEdit, editedDoctor);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        EventsCenter.getInstance().post(new PersonPanelSelectionChangedEvent(editedPatient));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, prescriptionToAdd.getMedicineName()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        if (!(o instanceof AddPrescriptionCommand)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        AddPrescriptionCommand e \u003d (AddPrescriptionCommand) o;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return id \u003d\u003d e.id"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                \u0026\u0026 prescriptionToAdd.equals(e.prescriptionToAdd);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "florafong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 3,
      "elroyhaw": 8,
      "florafong97": 155
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.calendar.GoogleCalendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, GoogleCalendar googleCalendar) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        model.resetData(new AddressBook());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 2,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.calendar.GoogleCalendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public abstract CommandResult execute(Model model, CommandHistory history, GoogleCalendar googleCalendar)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throws CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CompleteAppointmentCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.security.GeneralSecurityException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.calendar.GoogleCalendar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.appointment.exceptions.InvalidInputOutputException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.appointment.exceptions.InvalidSecurityAccessException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * Completes a patient\u0027s appointment in the health book."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "public class CompleteAppointmentCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"complete-appointment\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            + \": Completes a patient\u0027s appointment in the health book. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            + \"APPOINTMENT_ID \\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            + \"10001 \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Appointment completed\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public static final String MESSAGE_INVALID_APPOINTMENT_INDEX \u003d \"AppointmentId is invalid\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private final int appointmentId;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Creates an CompleteAppointmentCommand to add the specified {@code Appointment}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public CompleteAppointmentCommand(int appointmentId) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        requireAllNonNull(appointmentId);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        this.appointmentId \u003d appointmentId;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, GoogleCalendar googleCalendar)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        List\u003cAppointment\u003e appointmentList \u003d model.getFilteredAppointmentList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        List\u003cPerson\u003e personList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Patient patient \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Doctor doctor \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment appointment \u003d appointmentList.stream()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                .filter(appt -\u003e appt.getAppointmentId() \u003d\u003d appointmentId)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                .orElse(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        if (appointment \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_APPOINTMENT_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        for (Person person : personList) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            if (person instanceof Patient) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                Iterator\u003cAppointment\u003e iterator \u003d ((Patient) person).getUpcomingAppointments().iterator();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                while (iterator.hasNext()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                    if (iterator.next().getAppointmentId() \u003d\u003d appointmentId) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                        patient \u003d (Patient) person;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            if (person instanceof Doctor) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                Iterator\u003cAppointment\u003e itr \u003d ((Doctor) person).getUpcomingAppointments().iterator();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                while (itr.hasNext()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                    if (itr.next().getAppointmentId() \u003d\u003d appointmentId) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                        doctor \u003d (Doctor) person;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            if (patient !\u003d null \u0026\u0026 doctor !\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        if (patient \u003d\u003d null || doctor \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_APPOINTMENT_INDEX);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            googleCalendar.deleteAppointment(doctor.getName().toString(), appointment);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        } catch (GeneralSecurityException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new InvalidSecurityAccessException();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new InvalidInputOutputException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        model.completeAppointment(appointment, patient, doctor);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        EventsCenter.getInstance().post(new PersonPanelSelectionChangedEvent(patient));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, appointment));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                || (other instanceof AddAppointmentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                \u0026\u0026 (appointmentId \u003d\u003d ((CompleteAppointmentCommand) other).appointmentId));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 111,
      "elroyhaw": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteAppointmentCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.security.GeneralSecurityException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.calendar.GoogleCalendar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.appointment.exceptions.InvalidInputOutputException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.appointment.exceptions.InvalidSecurityAccessException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * Deletes a patient\u0027s appointment to the health book."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "public class DeleteAppointmentCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-appointment\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            + \": Deletes a patient\u0027s appointment in the health book. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            + \"APPOINTMENT_ID \\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            + \"3 \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Appointment deleted\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final String MESSAGE_INVALID_APPOINTMENT_INDEX \u003d \"AppointmentId is invalid\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private final int appointmentId;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Creates an DeleteAppointmentCommand to add the specified {@code Appointment}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public DeleteAppointmentCommand(int appointmentId) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        requireAllNonNull(appointmentId);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        this.appointmentId \u003d appointmentId;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, GoogleCalendar googleCalendar)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        List\u003cAppointment\u003e appointmentList \u003d model.getFilteredAppointmentList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        List\u003cPerson\u003e personList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        Patient patient \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        Doctor doctor \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        Appointment appointment \u003d appointmentList.stream()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                .filter(appt -\u003e appt.getAppointmentId() \u003d\u003d appointmentId)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                .orElse(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        if (appointment \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_APPOINTMENT_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        for (Person person : personList) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            if (person instanceof Patient) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                Iterator\u003cAppointment\u003e iterator \u003d ((Patient) person).getUpcomingAppointments().iterator();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                while (iterator.hasNext()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                    if (iterator.next().getAppointmentId() \u003d\u003d appointmentId) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                        patient \u003d (Patient) person;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            if (person instanceof Doctor) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                Iterator\u003cAppointment\u003e itr \u003d ((Doctor) person).getUpcomingAppointments().iterator();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                while (itr.hasNext()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                    if (itr.next().getAppointmentId() \u003d\u003d appointmentId) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                        doctor \u003d (Doctor) person;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            if (patient !\u003d null \u0026\u0026 doctor !\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        if (patient \u003d\u003d null || doctor \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_APPOINTMENT_INDEX);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            googleCalendar.deleteAppointment(doctor.getName().toString(), appointment);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        } catch (GeneralSecurityException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new InvalidSecurityAccessException();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new InvalidInputOutputException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        patient.deleteAppointment(appointment);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        doctor.deleteAppointment(appointment);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        model.deleteAppointment(appointment, patient, doctor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        EventsCenter.getInstance().post(new PersonPanelSelectionChangedEvent(patient));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, appointment));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                || (other instanceof DeleteAppointmentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                \u0026\u0026 (appointmentId \u003d\u003d ((DeleteAppointmentCommand) other).appointmentId));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 24,
      "elroyhaw": 90,
      "florafong97": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteDoctorCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " * Deletes a doctor from health book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "public class DeleteDoctorCommand extends DeletePersonCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-doctor\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            + \": Deletes the doctor identified by name. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            + PREFIX_NAME + \"NAME \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            + PREFIX_NAME + \"John Doe \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Creates an DeleteDoctorCommand to add the specified {@code Doctor}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public DeleteDoctorCommand(Name name) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        super(name, new Tag(\"Doctor\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elroyhaw": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteMedicalHistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONDITION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.calendar.GoogleCalendar;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.patient.MedicalHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": " * delete medical history for a patient specified by index in healthbook"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "public class DeleteMedicalHistoryCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-medical-history\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            + \": delete medical history for a person to the address book. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            + PREFIX_ALLERGY + \"ALLERGIES (separated by comma) \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            + PREFIX_CONDITION + \"CONDITIONS (separated by comma) \\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            + PREFIX_ALLERGY + \"penicillin,milk \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            + PREFIX_CONDITION + \"sub-healthy,hyperglycemia \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String MESSAGE_DELETE_MEDICAL_HISTORY_SUCCESS \u003d \"Medical history deleted for: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String MESSAGE_INVALID_DELETE_MEDICAL_HISTORY_WRONG_TYPE \u003d \"This command is only for patients\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String MESSAGE_INVALID_DELETE_MEDICAL_HISTORY_NO_ALLERGY \u003d \"Non Exist Allergy: \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String MESSAGE_INVALID_DELETE_MEDICAL_HISTORY_NO_CONDITION \u003d \"Non Exist Condition: \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String MESSAGE_INVALID_DELETE_MEDICAL_HISTORY_NO_INFO \u003d \"Please provide valid info\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String MESSAGE_INVALID_DELETE_MEDICAL_HISTORY_NO_MATCH_NAME \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            \" does not exist in the healthbook\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    private String allergy;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    private String condition;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     * Creates an DeleteMedicalHistoryCommand for the specified {@code Person}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public DeleteMedicalHistoryCommand(Name name, String allergy, String condition) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        this.condition \u003d condition;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        this.allergy \u003d allergy;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, GoogleCalendar googleCalendar)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        Person personToEdit \u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        boolean personExist \u003d false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        for (Person person : lastShownList) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            if (person.getName().equals(name)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                personToEdit \u003d person;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                personExist \u003d true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        if (!personExist) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_DELETE_MEDICAL_HISTORY_NO_MATCH_NAME);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        if (!(personToEdit.getTags().contains(new Tag(\"Patient\")))) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_DELETE_MEDICAL_HISTORY_WRONG_TYPE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        Patient patientToEdit \u003d (Patient) personToEdit;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        MedicalHistory editedMedicalHistory \u003d new MedicalHistory(patientToEdit.getMedicalHistory());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        if (allergy.equals(\"\") \u0026\u0026 condition.equals(\"\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_DELETE_MEDICAL_HISTORY_NO_INFO);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        if (!(allergy.equals(\"\"))) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            ArrayList\u003cString\u003e allergiesToDelete \u003d new ArrayList\u003c\u003e(Arrays.asList(allergy.split(\",\")));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            for (int index \u003d 0; index \u003c allergiesToDelete.size(); index++) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                if (editedMedicalHistory.getAllergies().contains(allergiesToDelete.get(index))) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                    editedMedicalHistory.getAllergies().remove(allergiesToDelete.get(index));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                    throw new CommandException(MESSAGE_INVALID_DELETE_MEDICAL_HISTORY_NO_ALLERGY"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                            + allergiesToDelete.get(index));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        if (!(condition.equals(\"\"))) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            ArrayList\u003cString\u003e conditionsToDelete \u003d new ArrayList\u003c\u003e(Arrays.asList(condition.split(\",\")));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            for (int index \u003d 0; index \u003c conditionsToDelete.size(); index++) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                if (editedMedicalHistory.getConditions().contains(conditionsToDelete.get(index))) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                    editedMedicalHistory.getConditions().remove(conditionsToDelete.get(index));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                    throw new CommandException(MESSAGE_INVALID_DELETE_MEDICAL_HISTORY_NO_CONDITION"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                            + conditionsToDelete.get(index));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        Patient editedPatient \u003d new Patient(patientToEdit.getName(), patientToEdit.getPhone(), patientToEdit.getEmail(),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                patientToEdit.getAddress(), patientToEdit.getRemark(), patientToEdit.getTags(),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                patientToEdit.getTelegramId(), patientToEdit.getUpcomingAppointments(),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                patientToEdit.getPastAppointments(), editedMedicalHistory);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        model.updatePerson(patientToEdit, editedPatient);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        EventsCenter.getInstance().post(new PersonPanelSelectionChangedEvent(editedPatient));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_MEDICAL_HISTORY_SUCCESS, patientToEdit));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        if (o \u003d\u003d this) { //if same object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        } else if (!(o instanceof DeleteMedicalHistoryCommand)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            DeleteMedicalHistoryCommand r \u003d (DeleteMedicalHistoryCommand) o;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            return name.equals(r.name) \u0026\u0026 allergy.equals(r.allergy) \u0026\u0026 condition.equals(r.condition);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangYafei1998": 132,
      "giamjuxian": 2,
      "elroyhaw": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeletePatientCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " * Deletes a patient from health book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "public class DeletePatientCommand extends DeletePersonCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-patient\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            + \": Deletes the patient identified by name. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            + PREFIX_NAME + \"NAME \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            + PREFIX_NAME + \"John Doe \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Creates an DeletePatientCommand to add the specified {@code Patient}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public DeletePatientCommand(Name name) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        super(name, new Tag(\"Patient\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elroyhaw": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeletePersonCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.calendar.GoogleCalendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " * Deletes a patient from health book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "public class DeletePersonCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final String MESSAGE_INVALID_DELETE_PERSON \u003d \"This %1$s does not exist in the HealthBook\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private final Tag tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public DeletePersonCommand(Name name, Tag tag) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public Tag getTag() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        return tag;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, GoogleCalendar googleCalendar)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        Person personToDelete \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        for (Person person : lastShownList) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            if (person.getName().equals(name) \u0026\u0026 person.getTags().contains(tag)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                personToDelete \u003d person;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        if (personToDelete \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_DELETE_PERSON, tag.tagName));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        EventsCenter.getInstance().post(new PersonPanelSelectionChangedEvent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                || (other instanceof DeletePersonCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                \u0026\u0026 name.equals(((DeletePersonCommand) other).name)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                \u0026\u0026 tag.equals(((DeletePersonCommand) other).tag)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 2,
      "-": 36,
      "elroyhaw": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeletePrescriptionCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florafong97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICINE_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.calendar.GoogleCalendar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.AppointmentId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.MedicineName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.Prescription;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florafong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florafong97"
        },
        "content": " * Deletes a prescription from health book"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florafong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "florafong97"
        },
        "content": "public class DeletePrescriptionCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-prescription\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes a prescription to an appointment. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            + \"APPOINTMENT ID \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            + PREFIX_MEDICINE_NAME + \"MEDICINE_NAME \\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            + \"10005 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            + PREFIX_MEDICINE_NAME + \"Paracetamol \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String MESSAGE_DELETE_PRESCRIPTION_SUCCESS \u003d \"Deleted Prescription: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String MESSAGE_INVALID_DELETE_PRESCRIPTION \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            \"This prescription does not exist in the HealthBook\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String MESSAGE_APPOINTMENT_DOES_NOT_EXIST \u003d \"This appointment does not exist\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    private final MedicineName medicineName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public DeletePrescriptionCommand(int id, MedicineName medicineName) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        this.medicineName \u003d medicineName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, GoogleCalendar googleCalendar)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        List\u003cAppointment\u003e appointmentList \u003d model.getFilteredAppointmentList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // check if appointment exists"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Appointment appointmentToEdit \u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        for (Appointment appointment : appointmentList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            if (appointment.getAppointmentId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                appointmentToEdit \u003d appointment;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // appointment does not exist"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        if (appointmentToEdit \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_APPOINTMENT_DOES_NOT_EXIST));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // check if prescription exists"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Prescription prescriptionToBeDeleted \u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        for (Prescription prescription : appointmentToEdit.getPrescriptions()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            if (prescription.getMedicineName().equals(medicineName)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                prescriptionToBeDeleted \u003d prescription;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // prescription does not exist in appointment"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        if (prescriptionToBeDeleted \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_DELETE_PRESCRIPTION));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // deleting prescription"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        ArrayList\u003cPrescription\u003e allPrescriptions \u003d new ArrayList\u003cPrescription\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        allPrescriptions.addAll(appointmentToEdit.getPrescriptions());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Appointment editedAppointment \u003d new Appointment(new AppointmentId(appointmentToEdit.getAppointmentId()),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                appointmentToEdit.getDoctor(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                appointmentToEdit.getPatient(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                appointmentToEdit.getDateTime(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                appointmentToEdit.getStatus(),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                appointmentToEdit.getComments(),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                allPrescriptions);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        editedAppointment.deletePrescription(medicineName.toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        model.updateAppointment(appointmentToEdit, editedAppointment);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        model.updateFilteredAppointmentList(Model.PREDICATE_SHOW_ALL_APPOINTMENTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        //editing persons"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        List\u003cPerson\u003e personList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Doctor doctorToEdit \u003d null;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Patient patientToEdit \u003d null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        for (Person person : personList) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            if (person instanceof Doctor) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                if (appointmentToEdit.getDoctor().equals(person.getName().toString())) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                    doctorToEdit \u003d (Doctor) person;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            if (person instanceof Patient) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                if (appointmentToEdit.getPatient().equals(person.getName().toString())) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                    patientToEdit \u003d (Patient) person;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            if (doctorToEdit !\u003d null \u0026\u0026 patientToEdit !\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        if (doctorToEdit \u003d\u003d null || patientToEdit \u003d\u003d null) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            throw new CommandException(MESSAGE_APPOINTMENT_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        //TODO update google calendar"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Patient editedPatient \u003d new Patient(patientToEdit.getName(), patientToEdit.getPhone(),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                patientToEdit.getEmail(), patientToEdit.getAddress(), patientToEdit.getRemark(),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                patientToEdit.getTags(), patientToEdit.getTelegramId(), patientToEdit.getUpcomingAppointments(),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                patientToEdit.getPastAppointments(), patientToEdit.getMedicalHistory());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Doctor editedDoctor \u003d new Doctor(doctorToEdit.getName(), doctorToEdit.getPhone(), doctorToEdit.getEmail(),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                doctorToEdit.getAddress(), doctorToEdit.getRemark(), doctorToEdit.getTags(),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                doctorToEdit.getUpcomingAppointments());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        editedPatient.setAppointment(appointmentToEdit, editedAppointment);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        editedDoctor.setAppointment(appointmentToEdit, editedAppointment);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        model.updatePerson(patientToEdit, editedPatient);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        model.updatePerson(doctorToEdit, editedDoctor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        EventsCenter.getInstance().post(new PersonPanelSelectionChangedEvent(editedPatient));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PRESCRIPTION_SUCCESS, medicineName.toString()));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        if (!(o instanceof DeletePrescriptionCommand)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        DeletePrescriptionCommand e \u003d (DeletePrescriptionCommand) o;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return medicineName.equals(e.medicineName);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "florafong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elroyhaw": 1,
      "florafong97": 163
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.calendar.GoogleCalendar;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, GoogleCalendar googleCalendar)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Remark updatedRemark \u003d personToEdit.getRemark(); //currently edit does not support remark"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedRemark, updatedTags);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 3,
      "-": 226,
      "florafong97": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.calendar.GoogleCalendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, GoogleCalendar googleCalendar) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 2,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FilterDoctorCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.calendar.GoogleCalendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.tag.TagContainsDoctorPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": " * Finds and lists all persons in health book who are tagged as patient."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "public class FilterDoctorCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter-doctor\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons who are tagged as Doctor. \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    private final TagContainsDoctorPredicate predicate \u003d new TagContainsDoctorPredicate();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, GoogleCalendar googleCalendar) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        EventsCenter.getInstance().post(new PersonPanelSelectionChangedEvent());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                || (other instanceof FilterDoctorCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                \u0026\u0026 predicate.equals(((FilterDoctorCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangYafei1998": 35,
      "giamjuxian": 2,
      "elroyhaw": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FilterPatientCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.calendar.GoogleCalendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.tag.TagContainsPatientPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": " * Finds and lists all persons in health book who are tagged as patient."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "public class FilterPatientCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter-patient\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons who are tagged as Patient. \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    private final TagContainsPatientPredicate predicate \u003d new TagContainsPatientPredicate();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, GoogleCalendar googleCalendar) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        EventsCenter.getInstance().post(new PersonPanelSelectionChangedEvent());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                || (other instanceof FilterPatientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                \u0026\u0026 predicate.equals(((FilterPatientCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangYafei1998": 35,
      "giamjuxian": 2,
      "elroyhaw": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.calendar.GoogleCalendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, GoogleCalendar googleCalendar) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 2,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.calendar.GoogleCalendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, GoogleCalendar googleCalendar) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ShowHelpRequestEvent());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 2,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.calendar.GoogleCalendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, GoogleCalendar googleCalendar) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e previousCommands \u003d history.getHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 2,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.calendar.GoogleCalendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, GoogleCalendar googleCalendar) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 2,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.calendar.GoogleCalendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, GoogleCalendar googleCalendar)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canRedoAddressBook()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        model.redoAddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 3,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RegisterDoctorCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.security.GeneralSecurityException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.calendar.GoogleCalendar;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * Adds a doctor to the health book."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "public class RegisterDoctorCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"register-doctor\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Register a doctor to the HealthBook. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New doctor registered: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            \"There exists a patient/doctor with this name in the HealthBook\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public static final String MESSAGE_WRONG_INPUT \u003d \"Wrong input provided. Please try again\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public static final String MESSAGE_SECURTIY_BREACH \u003d \"Unable to create doctor due to security breach\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private final Doctor doctorToRegister;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Creates an AddDoctorCommand to add the specified {@code Doctor}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public RegisterDoctorCommand(Doctor doctor) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        requireNonNull(doctor);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        doctorToRegister \u003d doctor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, GoogleCalendar googleCalendar)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        if (model.hasPerson(doctorToRegister)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            googleCalendar.registerDoctor(doctorToRegister.getName().toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new CommandException(MESSAGE_WRONG_INPUT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        } catch (GeneralSecurityException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new CommandException(MESSAGE_SECURTIY_BREACH);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        model.addDoctor(doctorToRegister);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        EventsCenter.getInstance().post(new PersonPanelSelectionChangedEvent());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, doctorToRegister));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                || (other instanceof RegisterDoctorCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                \u0026\u0026 doctorToRegister.equals(((RegisterDoctorCommand) other).doctorToRegister));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 79,
      "elroyhaw": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RegisterPatientCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.calendar.GoogleCalendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " * Adds a patient to the health book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "public class RegisterPatientCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"register-patient\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Register a patient to the HealthBook. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New patient registered: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            \"There exists a patient/doctor with this name in the HealthBook\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private final Patient patientToRegister;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Creates an RegisterPatientCommand to add the specified {@code Patient}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public RegisterPatientCommand(Patient patient) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        patientToRegister \u003d patient;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, GoogleCalendar googleCalendar)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        if (model.hasPerson(patientToRegister)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        model.addPatient(patientToRegister);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        EventsCenter.getInstance().post(new PersonPanelSelectionChangedEvent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, patientToRegister));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                || (other instanceof RegisterPatientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                \u0026\u0026 patientToRegister.equals(((RegisterPatientCommand) other).patientToRegister));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 63,
      "elroyhaw": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RemarkCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florafong97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.calendar.GoogleCalendar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florafong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florafong97"
        },
        "content": " * edits remark of index of person in addressbook"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florafong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florafong97"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits remark of the patient. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            + PREFIX_PATIENT_NAME + \"PATIENT_NAME \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            + PREFIX_REMARK + \"REMARK \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            + PREFIX_PATIENT_NAME + \"John Doe \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            + PREFIX_REMARK + \"Has chronic heart disease \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Deleted remark of %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String MESSAGE_INVALID_PATIENT_FAILURE \u003d \"This patient does not exist in HealthBook\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    private final Name patientName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * @param patientName of the patient in the filtered person list to edit remark"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * @param remark to be updated"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public RemarkCommand(Name patientName, Remark remark) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        requireAllNonNull(patientName, remark);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        this.patientName \u003d patientName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, GoogleCalendar googleCalendar)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Patient patientToEdit \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        for (Person person : lastShownList) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            if (person.getName().equals(patientName) \u0026\u0026 person instanceof Patient) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                patientToEdit \u003d (Patient) person;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        if (patientToEdit \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_PATIENT_FAILURE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Patient editedPatient \u003d new Patient(patientToEdit.getName(), patientToEdit.getPhone(), patientToEdit.getEmail(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                patientToEdit.getAddress(), remark, patientToEdit.getTags(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                patientToEdit.getTelegramId(), patientToEdit.getUpcomingAppointments(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                patientToEdit.getPastAppointments(), patientToEdit.getMedicalHistory());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        model.updatePerson(patientToEdit, editedPatient);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "florafong97"
        },
        "content": "         * Remark is deleted if input field is empty"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "florafong97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return !(remark.value.isEmpty()) ? new CommandResult(String.format(MESSAGE_ADD_REMARK_SUCCESS, editedPatient))"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                : new CommandResult(String.format(MESSAGE_DELETE_REMARK_SUCCESS, editedPatient));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        if (o \u003d\u003d this) { //if same object"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        } else if (!(o instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            RemarkCommand r \u003d (RemarkCommand) o;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            return patientName.equals(r.patientName) \u0026\u0026 remark.equals(r.remark);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "florafong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 3,
      "florafong97": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.calendar.GoogleCalendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Selects a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Selects the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, GoogleCalendar googleCalendar)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredPersonList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 3,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.calendar.GoogleCalendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, GoogleCalendar googleCalendar)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canUndoAddressBook()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 3,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewDoctorCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.calendar.GoogleCalendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " * View a doctor\u0027s upcoming appointments."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "public class ViewDoctorCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view-doctor\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            + \": Views the doctor identified by the name.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            + PREFIX_NAME + \"NAME \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            + PREFIX_NAME + \"John Doe \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Viewing Doctor: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final String MESSAGE_INVALID_DOCTOR \u003d \"This doctor does not exist in the HealthBook\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public ViewDoctorCommand(Name name) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, GoogleCalendar googleCalendar)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        List\u003cPerson\u003e personList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        Doctor doctor \u003d (Doctor) personList.stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                .filter(person -\u003e person.getName().equals(name) \u0026\u0026 person instanceof Doctor)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                .orElse(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        if (doctor \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_DOCTOR);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        EventsCenter.getInstance().post(new PersonPanelSelectionChangedEvent(doctor));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, doctor.getName()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                || (other instanceof ViewDoctorCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                \u0026\u0026 name.equals(((ViewDoctorCommand) other).name)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elroyhaw": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewPatientCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.calendar.GoogleCalendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " * View a patient\u0027s information."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "public class ViewPatientCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view-patient\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            + \": Views the patient identified by the name.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            + PREFIX_NAME + \"NAME \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            + PREFIX_NAME + \"John Doe \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Viewing Patient: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final String MESSAGE_INVALID_PATIENT \u003d \"This patient does not exist in the HealthBook\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public ViewPatientCommand(Name name) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history, GoogleCalendar googleCalendar)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        List\u003cPerson\u003e personList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        Patient patient \u003d (Patient) personList.stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                .filter(person -\u003e person.getName().equals(name) \u0026\u0026 person instanceof Patient)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                .orElse(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        if (patient \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_PATIENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        EventsCenter.getInstance().post(new PersonPanelSelectionChangedEvent(patient));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, patient.getName()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                || (other instanceof ViewPatientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                \u0026\u0026 name.equals(((ViewPatientCommand) other).name)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 3,
      "elroyhaw": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddAppointmentCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_TIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOCTOR_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.logic.commands.AddAppointmentCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " * Parses input arguments and creates a new AddAppointmentCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "public class AddAppointmentCommandParser implements Parser\u003cAddAppointmentCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddAppointmentCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * and returns an AddAppointmentCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public AddAppointmentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_PATIENT_NAME, PREFIX_DOCTOR_NAME, PREFIX_DATE_TIME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PATIENT_NAME, PREFIX_DOCTOR_NAME, PREFIX_DATE_TIME)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                    AddAppointmentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        Name patientName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_PATIENT_NAME).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        Name doctorName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_DOCTOR_NAME).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        LocalDateTime dateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATE_TIME).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        return new AddAppointmentCommand(patientName, doctorName, dateTime);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 8,
      "elroyhaw": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Remark remark \u003d new Remark(\"\"); //currently add doesn\u0027t support remark"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, remark, tagList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 59,
      "florafong97": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddMedicalHistoryCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONDITION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.logic.commands.AddMedicalHistoryCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": " * Parses input arguments and creates a new AddMedicalHistoryCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "public class AddMedicalHistoryCommandParser implements Parser\u003cAddMedicalHistoryCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddMedicalHistoryCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     * and returns an AddMedicalHistoryCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public AddMedicalHistoryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ALLERGY, PREFIX_CONDITION, PREFIX_NAME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ALLERGY) || !arePrefixesPresent(argMultimap, PREFIX_CONDITION)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                || !arePrefixesPresent(argMultimap, PREFIX_NAME)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                    AddMedicalHistoryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        String nameStr \u003d argMultimap.getValue(PREFIX_NAME).get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        String allergy \u003d argMultimap.getValue(PREFIX_ALLERGY).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        String condition \u003d argMultimap.getValue(PREFIX_CONDITION).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        Name name \u003d new Name(nameStr);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        return new AddMedicalHistoryCommand(name, allergy, condition);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangYafei1998": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddPrescriptionCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florafong97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONSUMPTION_PER_DAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICINE_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.logic.commands.AddPrescriptionCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.ConsumptionPerDay;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.Dosage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.MedicineName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.Prescription;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florafong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florafong97"
        },
        "content": " * Parses input arguments and creates a new AddPrescriptionCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florafong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florafong97"
        },
        "content": "public class AddPrescriptionCommandParser implements Parser\u003cAddPrescriptionCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddPrescriptionCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * and returns an AddPrescriptionCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public AddPrescriptionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MEDICINE_NAME, PREFIX_DOSAGE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                        PREFIX_CONSUMPTION_PER_DAY);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        int id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            id \u003d ParserUtil.parseId(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                    AddPrescriptionCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MEDICINE_NAME, PREFIX_DOSAGE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                PREFIX_CONSUMPTION_PER_DAY) || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                    AddPrescriptionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        MedicineName medicineName \u003d ParserUtil.parseMedicineName(argMultimap.getValue(PREFIX_MEDICINE_NAME).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Dosage dosage \u003d ParserUtil.parseDosage(argMultimap.getValue(PREFIX_DOSAGE).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        ConsumptionPerDay consumptionPerDay \u003d ParserUtil.parseConsumptionPerDay("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                argMultimap.getValue(PREFIX_CONSUMPTION_PER_DAY).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Prescription prescription \u003d new Prescription(id, medicineName, dosage, consumptionPerDay);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return new AddPrescriptionCommand(id, prescription);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "florafong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florafong97": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.logic.commands.AddAppointmentCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.logic.commands.AddMedicalHistoryCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.logic.commands.AddPrescriptionCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.logic.commands.CompleteAppointmentCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.logic.commands.DeleteAppointmentCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.logic.commands.DeleteDoctorCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.logic.commands.DeleteMedicalHistoryCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.logic.commands.DeletePatientCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.logic.commands.DeletePrescriptionCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.logic.commands.FilterDoctorCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.logic.commands.FilterPatientCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.logic.commands.RegisterDoctorCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.logic.commands.RegisterPatientCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.logic.commands.ViewDoctorCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.logic.commands.ViewPatientCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        case RegisterDoctorCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            return new RegisterDoctorCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        case RegisterPatientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            return new RegisterPatientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        case AddPrescriptionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            return new AddPrescriptionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        case DeletePrescriptionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            return new DeletePrescriptionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        case DeleteDoctorCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            return new DeleteDoctorCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        case DeletePatientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            return new DeletePatientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        case RemarkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            return new RemarkCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        case AddMedicalHistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            return new AddMedicalHistoryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        case DeleteMedicalHistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            return new DeleteMedicalHistoryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        case FilterPatientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            return new FilterPatientCommand();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        case FilterDoctorCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            return new FilterDoctorCommand();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        case AddAppointmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            return new AddAppointmentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        case DeleteAppointmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            return new DeleteAppointmentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        case CompleteAppointmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            return new CompleteAppointmentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        case ViewPatientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            return new ViewPatientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        case ViewDoctorCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            return new ViewDoctorCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangYafei1998": 15,
      "giamjuxian": 11,
      "-": 91,
      "elroyhaw": 22,
      "florafong97": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final Prefix PREFIX_ALLERGY \u003d new Prefix(\"al/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final Prefix PREFIX_CONDITION \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final Prefix PREFIX_PATIENT_NAME \u003d new Prefix(\"np/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final Prefix PREFIX_DOCTOR_NAME \u003d new Prefix(\"nd/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final Prefix PREFIX_DATE_TIME \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"pi/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final Prefix PREFIX_MEDICINE_NAME \u003d new Prefix(\"pn/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final Prefix PREFIX_DOSAGE \u003d new Prefix(\"pd/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final Prefix PREFIX_CONSUMPTION_PER_DAY \u003d new Prefix(\"pc/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangYafei1998": 2,
      "-": 16,
      "elroyhaw": 3,
      "florafong97": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CompleteAppointmentCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.logic.commands.CompleteAppointmentCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * Parses input arguments and creates a new DeleteAppointmentCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "public class CompleteAppointmentCommandParser implements Parser\u003cCompleteAppointmentCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteAppointmentCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * and returns an AddAppointmentCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public CompleteAppointmentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            int appointmentId \u003d ParserUtil.parseId(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            return new CompleteAppointmentCommand(appointmentId);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CompleteAppointmentCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteAppointmentCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.logic.commands.DeleteAppointmentCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " * Parses input arguments and creates a new DeleteAppointmentCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "public class DeleteAppointmentCommandParser implements Parser\u003cDeleteAppointmentCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteAppointmentCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * and returns an AddAppointmentCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public DeleteAppointmentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            int appointmentId \u003d ParserUtil.parseId(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            return new DeleteAppointmentCommand(appointmentId);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteAppointmentCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 3,
      "elroyhaw": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteDoctorCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.logic.commands.DeleteDoctorCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " * Parses input arguments and creates a new DeleteDoctorCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "public class DeleteDoctorCommandParser implements Parser\u003cDeleteDoctorCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteDoctorCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * and returns an DeleteDoctorCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public DeleteDoctorCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteDoctorCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        return new DeleteDoctorCommand(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elroyhaw": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteMedicalHistoryCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONDITION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.logic.commands.DeleteMedicalHistoryCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": " * Parses input arguments and creates a new DeleteMedicalHistoryCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "public class DeleteMedicalHistoryCommandParser implements Parser\u003cDeleteMedicalHistoryCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteMedicalHistoryCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     * and returns an DeleteMedicalHistoryCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public DeleteMedicalHistoryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ALLERGY, PREFIX_CONDITION);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ALLERGY) || !arePrefixesPresent(argMultimap, PREFIX_CONDITION)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                || !arePrefixesPresent(argMultimap, PREFIX_NAME)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                    DeleteMedicalHistoryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        String nameStr \u003d argMultimap.getValue(PREFIX_NAME).get();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        String allergy \u003d argMultimap.getValue(PREFIX_ALLERGY).get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        String condition \u003d argMultimap.getValue(PREFIX_CONDITION).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        Name name \u003d new Name(nameStr);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        return new DeleteMedicalHistoryCommand(name, allergy, condition);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangYafei1998": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeletePatientCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.logic.commands.DeletePatientCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " * Parses input arguments and creates a new DeletePatientCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "public class DeletePatientCommandParser implements Parser\u003cDeletePatientCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeletePatientCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * and returns an DeletePatientCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public DeletePatientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePatientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        return new DeletePatientCommand(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elroyhaw": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeletePrescriptionCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florafong97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICINE_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.logic.commands.DeletePrescriptionCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.MedicineName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florafong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florafong97"
        },
        "content": " * Parses input arguments and creates a new DeletePrescriptionCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florafong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florafong97"
        },
        "content": "public class DeletePrescriptionCommandParser implements Parser\u003cDeletePrescriptionCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeletePrescriptionCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * and returns a DeleteAppointmentCommand object for execution"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public DeletePrescriptionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        ArgumentMultimap argMultiMap \u003d ArgumentTokenizer.tokenize(args, PREFIX_MEDICINE_NAME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        int id;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            id \u003d ParserUtil.parseId(argMultiMap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                    DeletePrescriptionCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        if (!arePrefixesPresent(argMultiMap, PREFIX_MEDICINE_NAME)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                || argMultiMap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                    DeletePrescriptionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        MedicineName medicineName \u003d ParserUtil.parseMedicineName(argMultiMap.getValue(PREFIX_MEDICINE_NAME).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return new DeletePrescriptionCommand(id, medicineName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "florafong97"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "florafong97": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.ConsumptionPerDay;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.Dosage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.MedicineName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String MESSAGE_INVALID_ID \u003d \"Appointment does not exist.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Parses a {@code String remark} into a {@code Remark}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static Remark parseRemark(String remark) throws ParseException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        String trimmedRemark \u003d remark.trim();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return new Remark(trimmedRemark);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Parses a {@code String dateTime} into a {@code LocalDateTime}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * @throws ParseException if the given {@code dateTime} format is invalid."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static LocalDateTime parseDateTime(String dateTime) throws ParseException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        String trimmedDateTime \u003d dateTime.trim();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        String format \u003d \"yyyy-MM-dd HH:mm\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        LocalDateTime localDateTime \u003d null;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            localDateTime \u003d LocalDateTime.parse(trimmedDateTime, DateTimeFormatter.ofPattern(format));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            throw new ParseException(\"DateTime should be in this format: \" + format);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        return localDateTime;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Parses a {@code String id} into a {@code int}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * @throws ParseException if the given {@code id} format is invalid."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static int parseId(String id) throws ParseException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        String trimmedId \u003d id.trim();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedId)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_ID);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        return Integer.parseInt(trimmedId);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Parses a {@code String medicineName} into a {@code MedicineName}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * @throws ParseException if the given {@code medicineName} format is invalid."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static MedicineName parseMedicineName(String medicineName) throws ParseException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        requireNonNull(medicineName);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        String trimmedMedicineName \u003d medicineName.trim();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        if (!MedicineName.isValidMedicineName(trimmedMedicineName)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            throw new ParseException(MedicineName.MESSAGE_MEDICINE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return new MedicineName(trimmedMedicineName);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Parses a {@code String dosage} into a {@code Dosage}."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * @throws ParseException if the given {@code dosage} format is invalid."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static Dosage parseDosage(String dosage) throws ParseException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        requireNonNull(dosage);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        String trimmedDosage \u003d dosage.trim();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        if (!Dosage.isValidDosage(trimmedDosage)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            throw new ParseException(Dosage.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return new Dosage(trimmedDosage);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Parses a {@code String consumptionPerDay} into a {@code ConsumptionPerDay}."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * @throws ParseException if the given {@code consumptionPerDay} format is invalid."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static ConsumptionPerDay parseConsumptionPerDay(String consumptionPerDay) throws ParseException {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        requireNonNull(consumptionPerDay);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        String trimmedConsumptionPerDay \u003d consumptionPerDay.trim();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        if (!ConsumptionPerDay.isValidConsumptionPerDay(trimmedConsumptionPerDay)) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            throw new ParseException(ConsumptionPerDay.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return new ConsumptionPerDay(trimmedConsumptionPerDay);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 124,
      "elroyhaw": 37,
      "florafong97": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RegisterDoctorCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.logic.commands.RegisterDoctorCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * Parses input arguments and creates a new AddDoctorCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "public class RegisterDoctorCommandParser implements Parser\u003cRegisterDoctorCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddDoctorCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * and returns an AddDoctorCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public RegisterDoctorCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                    RegisterDoctorCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Remark remark \u003d new Remark(\"\"); //register doctor currently doesn\u0027t support register remark"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        tagList.add(new Tag(\"Doctor\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Doctor doctor \u003d new Doctor(name, phone, email, address, remark, tagList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return new RegisterDoctorCommand(doctor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RegisterPatientCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.logic.commands.RegisterPatientCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * Parses input arguments and creates a new AddPatientCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "public class RegisterPatientCommandParser implements Parser\u003cRegisterPatientCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddPatientCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * and returns an AddPatientCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public RegisterPatientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                    RegisterPatientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Remark remark \u003d new Remark(\"\"); //register patient currently doesn\u0027t support register remark"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        tagList.add(new Tag(\"Patient\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        String telegramId \u003d \"123123\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Patient person \u003d new Patient(name, phone, email, address, remark, tagList, telegramId);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return new RegisterPatientCommand(person);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 62,
      "florafong97": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RemarkCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florafong97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florafong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florafong97"
        },
        "content": " * Parses input arguments and creates a new RemarkCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florafong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florafong97"
        },
        "content": "public class RemarkCommandParser implements Parser\u003cRemarkCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RemarkCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * and returns an RemarkCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PATIENT_NAME, PREFIX_REMARK);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PATIENT_NAME, PREFIX_REMARK)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                    RemarkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Name patientName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_PATIENT_NAME).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Remark patientRemark \u003d ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return new RemarkCommand(patientName, patientRemark);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "florafong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florafong97": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewDoctorCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.logic.commands.ViewDoctorCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " * Parses input arguments and creates a new ViewDoctorCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "public class ViewDoctorCommandParser implements Parser\u003cViewDoctorCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewDoctorCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * and returns an ViewDoctorCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public ViewDoctorCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewDoctorCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        return new ViewDoctorCommand(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elroyhaw": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewPatientCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.logic.commands.ViewPatientCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " * Parses input arguments and creates a new ViewPatientCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "public class ViewPatientCommandParser implements Parser\u003cViewPatientCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewPatientCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * and returns an ViewPatientCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public ViewPatientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewPatientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        return new ViewPatientCommand(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elroyhaw": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.appointment.UniqueAppointmentList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private final UniqueAppointmentList appointments;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private int appointmentCounter;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        appointments \u003d new UniqueAppointmentList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        appointmentCounter \u003d 10000;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public AddressBook() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void setAppointments(List\u003cAppointment\u003e appointments) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        this.appointments.setAppointments(appointments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Replaces the contents of the appointment counter with {@code appointmentCounter}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void setAppointmentCounter(int appointmentCounter) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        this.appointmentCounter \u003d appointmentCounter;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        setAppointments(newData.getAppointmentList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        setAppointmentCounter(newData.getAppointmentCounter());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Adds a patient to the address book."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void addPatient(Patient p) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Adds a doctor to the address book."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void addDoctor(Doctor d) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        persons.add(d);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Replaces the given appointment {@code target} in the list with {@code editedAppointment}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * The appointment identity of {@code editedAppointment} must not be the same as another existing appointment"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * in the address book."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public void updateAppointment(Appointment target, Appointment editedAppointment) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        requireNonNull(editedAppointment);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        appointments.setAppointment(target, editedAppointment);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Adds appointment to patient {@code patient, appointment} to this {@code HealthBook}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * {@code patient} must exist in the health book."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void addAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        appointments.add(appointment);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Deletes a patient\u0027s {@code appointment} from this {@code HealthBook}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void deleteAppointment(Appointment appointment, Patient patient, Doctor doctor) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Patient targetPatient \u003d persons.findPatient(patient);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Doctor targetDoctor \u003d persons.findDoctor(doctor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        patient.deleteAppointment(appointment);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        doctor.deleteAppointment(appointment);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        persons.setPerson(targetPatient, patient);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        persons.setPerson(targetDoctor, doctor);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        appointments.remove(appointment);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Completes a patient\u0027s {@code appointment} from this {@code HealthBook}."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void completeAppointment(Appointment appointment, Patient patient, Doctor doctor) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Patient targetPatient \u003d persons.findPatient(patient);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Doctor targetDoctor \u003d persons.findDoctor(doctor);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        patient.completeUpcomingAppointment(appointment);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        doctor.completeUpcomingAppointment(appointment);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        persons.setPerson(targetPatient, patient);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        persons.setPerson(targetDoctor, doctor);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        appointments.setToComplete(appointment);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public ObservableList\u003cAppointment\u003e getAppointmentList() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return appointments.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public int getAppointmentCounter() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return appointmentCounter;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons))"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                \u0026\u0026 (other instanceof AddressBook"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                \u0026\u0026 appointments.equals(((AddressBook) other).appointments))"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                \u0026\u0026 (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                \u0026\u0026 appointmentCounter \u003d\u003d (((AddressBook) other).appointmentCounter));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 76,
      "-": 118,
      "elroyhaw": 16,
      "florafong97": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    Predicate\u003cAppointment\u003e PREDICATE_SHOW_ALL_APPOINTMENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Clears existing backing model and replaces with the provided new data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * The person must exist in the health book."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * {@code person} must not already exist in the health book."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Adds the given patient."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * {@code patient} must not already exist in the health book."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    void addPatient(Patient patient);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Adds the given doctor."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * {@code doctor} must not already exist in the health book."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    void addDoctor(Doctor doctor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * {@code target} must exist in the health book."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the health book."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    void updatePerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Replaces the given appointment {@code target} with {@code editedAppointment}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * {@code target} must exist in the health book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * The appointment identity of {@code editedAppointment} must not be the same as another existing appointment"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * in the health book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    void updateAppointment(Appointment target, Appointment editedAppointment);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Returns an unmodifiable view of the filtered appointment list"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Updates the filter of the filtered appointment list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Returns current appointmentCounter"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    int getAppointmentCounter();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Increase the Appointment Counter"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    void incrementAppointmentCounter();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Returns true if the model has previous health book states to restore."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Returns true if the model has undone health book states to restore."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Restores the model\u0027s health book to its previous state."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Restores the model\u0027s health book to its previously undone state."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Adds appointment."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    void addAppointment(Appointment appointment);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Deletes appointment."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    void deleteAppointment(Appointment appointment, Patient patient, Doctor doctor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Completes appointment."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    void completeAppointment(Appointment appointment, Patient patient, Doctor doctor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 50,
      "-": 66,
      "elroyhaw": 24,
      "florafong97": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private final FilteredList\u003cAppointment\u003e filteredAppointment;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private int appointmentCounter;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        filteredAppointment \u003d new FilteredList\u003c\u003e(versionedAddressBook.getAppointmentList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        appointmentCounter \u003d versionedAddressBook.getAppointmentCounter();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Raises an event to indicate the model has changed"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void addPatient(Patient patient) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        versionedAddressBook.addPatient(patient);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void addDoctor(Doctor doctor) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        versionedAddressBook.addDoctor(doctor);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public void updateAppointment(Appointment target, Appointment editedAppointment) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        requireAllNonNull(target, editedAppointment);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        versionedAddressBook.updateAppointment(target, editedAppointment);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void addAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        requireAllNonNull(appointment);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        versionedAddressBook.addAppointment(appointment);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void deleteAppointment(Appointment appointment, Patient patient, Doctor doctor) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        requireAllNonNull(appointment);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        requireNonNull(doctor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        versionedAddressBook.deleteAppointment(appointment, patient, doctor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void completeAppointment(Appointment appointment, Patient patient, Doctor doctor) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        requireNonNull(appointment);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        versionedAddressBook.completeAppointment(appointment, patient, doctor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Appointment List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Appointment} backed by the internal list of"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredAppointment);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        filteredAppointment.setPredicate(predicate);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Appointment Counter Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Returns an {@code Appointment Counter} backed by the internal list of"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public int getAppointmentCounter() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return appointmentCounter;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void incrementAppointmentCounter() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        appointmentCounter++;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        versionedAddressBook.setAppointmentCounter(appointmentCounter);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 66,
      "-": 151,
      "elroyhaw": 15,
      "florafong97": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Returns an unmodifiable view of the appointment list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * This list will not contain any duplicate appointment."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    ObservableList\u003cAppointment\u003e getAppointmentList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Returns an current appointment."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    int getAppointmentCounter();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 12,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/Appointment.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * Represents an Appointment in the health book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "public class Appointment implements Comparable\u003cAppointment\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private AppointmentId appointmentId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private String doctor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private String patient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private LocalDateTime dateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private Status status;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private String comments;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private List\u003cPrescription\u003e prescriptions;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public Appointment(int appointmentCounter, String doctor, String patient, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        appointmentId \u003d new AppointmentId(appointmentCounter);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        this.doctor \u003d doctor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        this.status \u003d Status.UPCOMING;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        prescriptions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public Appointment(AppointmentId appointmentId, String doctor, String patient,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                       LocalDateTime dateTime, Status status,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                       String comments, List\u003cPrescription\u003e prescriptions) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        this.appointmentId \u003d appointmentId;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        this.doctor \u003d doctor;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        if (comments !\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            this.comments \u003d comments;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        if (prescriptions !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            this.prescriptions \u003d prescriptions;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            this.prescriptions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public int getAppointmentId() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return appointmentId.getAppointmentId();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public String getDoctor() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        return doctor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public String getPatient() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return patient;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public String getComments() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return comments;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public List\u003cPrescription\u003e getPrescriptions() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return prescriptions;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void addPrescription(Prescription prescription) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        prescriptions.add(prescription);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * already verified that prescription exists"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public void deletePrescription(String medicineName) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Prescription toRemove \u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        for (Prescription p : prescriptions) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            if (p.getMedicineName().toString().equals(medicineName)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                toRemove \u003d p;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        prescriptions.remove(toRemove);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void completeAppointment() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        status \u003d Status.COMPLETED;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Checks if target appointment is later than appointment argument by LocalDateTime."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Return true if target appointment is later than other appointment. Else, return false."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public boolean isLaterThan(Appointment appointmentToCheck) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        return dateTime.isAfter(appointmentToCheck.dateTime);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Returns true if {@code appointments} has the same appointmentId."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public boolean isSameAppointment(Appointment toCheck) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return this.appointmentId.getAppointmentId() \u003d\u003d toCheck.getAppointmentId();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Returns true if {@code appointments} has the clash with appointmentId."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public boolean hasClashAppointment(Appointment toCheck) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        LocalDateTime lowerBound \u003d this.dateTime;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        LocalDateTime upperBound \u003d this.dateTime.plusMinutes(30);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        LocalDateTime timeToCheckStart \u003d toCheck.getDateTime();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        LocalDateTime timeToCheckEnd \u003d toCheck.getDateTime().plusMinutes(30);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // Check if start of appointment toCheck is between current appointment."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        if (timeToCheckStart.equals(lowerBound)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                || (timeToCheckStart.isAfter(lowerBound) \u0026\u0026 timeToCheckStart.isBefore(upperBound))) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // Check if end of appointment toCheck is between current appointment."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        if (timeToCheckEnd.equals(upperBound)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                || (timeToCheckEnd.isAfter(lowerBound) \u0026\u0026 timeToCheckEnd.isBefore(upperBound))) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     *  Returns 1 if {@code appointment} is earlier than other appointment"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public int compareTo(Appointment o) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        if (this.isLaterThan(o)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        } else if (!this.isLaterThan(o)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        if (!(other instanceof Appointment)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "florafong97"
        },
        "content": "         * Returns true if both appointments have the same identity and data fields."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "florafong97"
        },
        "content": "         * This defines a stronger notion of equality between two appointments."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "florafong97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Appointment otherAppointment \u003d (Appointment) other;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return otherAppointment.getAppointmentId() \u003d\u003d getAppointmentId()"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                \u0026\u0026 otherAppointment.getDoctor().equals(getDoctor())"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                \u0026\u0026 otherAppointment.getPatient().equals(getPatient())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                \u0026\u0026 otherAppointment.getDateTime().equals(getDateTime());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 121,
      "elroyhaw": 14,
      "florafong97": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/AppointmentId.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * Represents an status of an appointment in the health book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "public class AppointmentId {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private int appointmentId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public AppointmentId(int id) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        appointmentId \u003d id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public int getAppointmentId() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return appointmentId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        if (!(other instanceof AppointmentId)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        return appointmentId \u003d\u003d ((AppointmentId) other).appointmentId;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 16,
      "elroyhaw": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/ConsumptionPerDay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florafong97"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florafong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florafong97"
        },
        "content": " * Represents number of consumption per day in prescription"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florafong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florafong97"
        },
        "content": "public class ConsumptionPerDay {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            \"ConsumptionPerDay should only contain numbers, and it must be greater than 0\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String CONSUMPTION_PER_DAY_VALIDATION_REGEX \u003d \"^[1-9][0-9]*$\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Constructs a {@code consumptionPerDay}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * @param consumptionPerDay A valid consumptionPerDay"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public ConsumptionPerDay(String consumptionPerDay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        requireNonNull(consumptionPerDay);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        checkArgument(isValidConsumptionPerDay(consumptionPerDay), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        value \u003d consumptionPerDay;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Returns true if a given string is a valid number of consumption per day"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static boolean isValidConsumptionPerDay(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return test.matches(CONSUMPTION_PER_DAY_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                || (other instanceof ConsumptionPerDay // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                \u0026\u0026 value.equals(((ConsumptionPerDay) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "florafong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 5,
      "florafong97": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/Dosage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florafong97"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florafong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florafong97"
        },
        "content": " * Represents dosage in prescription"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florafong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florafong97"
        },
        "content": "public class Dosage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            \"Dosage should only contain numbers, and it must be greater than 0\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String DOSAGE_VALIDATION_REGEX \u003d \"^[1-9][0-9]*$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Constructs a {@code Dosage}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * @param dosage A valid dosage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public Dosage(String dosage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        requireNonNull(dosage);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        checkArgument(isValidDosage(dosage), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        value \u003d dosage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public Dosage() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        value \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Returns true if a given string is a valid dosage"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static boolean isValidDosage(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return test.matches(DOSAGE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                || (other instanceof Dosage // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                \u0026\u0026 value.equals(((Dosage) other).value)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "florafong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 5,
      "florafong97": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/MedicineName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florafong97"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florafong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florafong97"
        },
        "content": " * Represents a Medicine Name in prescription"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florafong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florafong97"
        },
        "content": "public class MedicineName {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String MESSAGE_MEDICINE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * the first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String MEDICINE_NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private final String fullMedicineName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Constructs a {@code MedicineName}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * @param medicineName A valid name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public MedicineName(String medicineName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        requireNonNull(medicineName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        checkArgument(isValidMedicineName(medicineName), MESSAGE_MEDICINE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        fullMedicineName \u003d medicineName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public MedicineName() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        fullMedicineName \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public String getFullMedicineName() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return fullMedicineName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Returns true if a given string is a valid MedicineName."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static boolean isValidMedicineName(String test) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return test.matches(MEDICINE_NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return fullMedicineName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                || (other instanceof MedicineName // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                \u0026\u0026 fullMedicineName.equals(((MedicineName) other).fullMedicineName)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return fullMedicineName.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "florafong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 5,
      "florafong97": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/Prescription.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * Represents an Prescription in the health book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "public class Prescription {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    private int id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    private MedicineName medicineName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    private Dosage dosage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    private ConsumptionPerDay consumptionPerDay;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public Prescription(int appointmentId, MedicineName medicineName, Dosage dosage,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                        ConsumptionPerDay consumptionPerDay) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        this.id \u003d appointmentId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        this.medicineName \u003d medicineName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        this.dosage \u003d dosage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        this.consumptionPerDay \u003d consumptionPerDay;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    // Get Methods"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public MedicineName getMedicineName() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return medicineName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public Dosage getDosage() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return dosage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public ConsumptionPerDay getConsumptionPerDay() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return consumptionPerDay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Returns true if both prescription have the same medicineName"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * This defines a weaker notion of equality between two prescriptions"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public boolean isSamePrescription(Prescription other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return other !\u003d null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                \u0026\u0026 other.getMedicineName().equals(getMedicineName());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Returns true if both prescriptions have the same identity and data fields."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * This defines a stronger notion of equality between two prescriptions."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        if (!(other instanceof Prescription)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "florafong97"
        },
        "content": "         * Equality of prescription only determined by name"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "florafong97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Prescription otherPrescription \u003d (Prescription) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return otherPrescription.getMedicineName().equals(getMedicineName());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return Objects.hash(id, medicineName, dosage, consumptionPerDay);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        builder.append(\"Medicine Name: \")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                .append(getMedicineName())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                .append(\" Dosage: \")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                .append(getDosage())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                .append(\" Consumption Per Day: \")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                .append(getConsumptionPerDay());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 27,
      "elroyhaw": 4,
      "florafong97": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/Status.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * Represents an status of an appointment in the health book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "public enum Status {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    UPCOMING, COMPLETED"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/UniqueAppointmentList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * A list of appointments that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * A appointment is considered unique by comparing using {@code Appointment#isSameAppointment(Appointment)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * As such, adding and updating of appointments uses Appointment#isSameAppointment(Appointment) for equality so"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * as to ensure that the appointment being added or updated is unique in terms of identity in the UniqueAppointmentList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * However, the removal of a appointment uses Appointment#equals(Object) so as to ensure that the appointment with"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florafong97"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * @see Appointment#isSameAppointment(Appointment)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "public class UniqueAppointmentList implements Iterable\u003cAppointment\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private final ObservableList\u003cAppointment\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Returns true if the list contains an equivalent appointment as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public boolean contains(Appointment toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameAppointment);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Adds a appointment to the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * The appointment must not already exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void add(Appointment toAdd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new DuplicateAppointmentException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Completes a appointment in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * The appointment must not already exist in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void setToComplete(Appointment toComplete) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        requireNonNull(toComplete);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        int index \u003d internalList.indexOf(toComplete);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AppointmentNotFoundException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        toComplete.completeAppointment();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        internalList.set(index, toComplete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Replaces the appointment {@code target} in the list with {@code editedAppointment}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * The appointment identity of {@code editedAppointment} must not be the same as another existing appointment"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * in the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void setAppointment(Appointment target, Appointment editedAppointment) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        requireAllNonNull(target, editedAppointment);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AppointmentNotFoundException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        if (!target.isSameAppointment(editedAppointment) \u0026\u0026 contains(editedAppointment)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new DuplicateAppointmentException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        internalList.set(index, editedAppointment);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Removes the equivalent appointment from the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * The appointment must exist in the list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void remove(Appointment toRemove) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Appointment appointmentToBeDeletedInList \u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        for (Appointment appt : internalList) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            if (appt.getAppointmentId() \u003d\u003d toRemove.getAppointmentId()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                appointmentToBeDeletedInList \u003d appt;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        if (appointmentToBeDeletedInList \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AppointmentNotFoundException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        internalList.remove(appointmentToBeDeletedInList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void setAppointments(UniqueAppointmentList replacement) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Replaces the contents of this list with {@code appointments}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * {@code appointments} must not contain duplicate appointments."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void setAppointments(List\u003cAppointment\u003e appointments) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        requireAllNonNull(appointments);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        if (!appointmentsAreUnique(appointments)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new DuplicateAppointmentException();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        internalList.setAll(appointments);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public ObservableList\u003cAppointment\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public Iterator\u003cAppointment\u003e iterator() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                || (other instanceof UniqueAppointmentList // instanceof handles nulls"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueAppointmentList) other).internalList));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Returns true if {@code appointments} contains only unique appointments."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private boolean appointmentsAreUnique(List\u003cAppointment\u003e appointments) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        for (int i \u003d 0; i \u003c appointments.size() - 1; i++) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            for (int j \u003d i + 1; j \u003c appointments.size(); j++) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                if (appointments.get(i).isSameAppointment(appointments.get(j))) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 148,
      "florafong97": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/exceptions/AppointmentNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "package seedu.address.model.appointment.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * Signals that the operation is unable to find the specified appointment."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "public class AppointmentNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/exceptions/DuplicateAppointmentException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "package seedu.address.model.appointment.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "public class DuplicateAppointmentException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public DuplicateAppointmentException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        super(\"Operation would result in duplicate appointments\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/exceptions/InvalidInputOutputException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "package seedu.address.model.appointment.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * Signals that user that the input is incorrect"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "public class InvalidInputOutputException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public InvalidInputOutputException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        super(\"The input you sent to google calendar is invalid\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appointment/exceptions/InvalidSecurityAccessException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "package seedu.address.model.appointment.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * Signals that user do not have security access for the operation"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "public class InvalidSecurityAccessException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public InvalidSecurityAccessException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        super(\"You do not have a valid access to the google calendar\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/doctor/Doctor.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "package seedu.address.model.doctor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * Represents a Doctor in the health book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "public class Doctor extends Person {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    // Variables"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private List\u003cAppointment\u003e upcomingAppointments;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public Doctor(Name name, Phone phone, Email email, Address address, Remark remark,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                  Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        super(name, phone, email, address, remark, tags);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        upcomingAppointments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public Doctor(Name name, Phone phone, Email email, Address address, Remark remark,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                  Set\u003cTag\u003e tags, List\u003cAppointment\u003e upcomingAppointments) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        super(name, phone, email, address, remark, tags);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        this.upcomingAppointments \u003d upcomingAppointments;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public List\u003cAppointment\u003e getUpcomingAppointments() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return upcomingAppointments;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Adds an upcoming appointment to the doctor\u0027s queue of upcoming appointment."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * The appointment is also added into Doctor\u0027s google calendar"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void addUpcomingAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        upcomingAppointments.add(appointment);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Deletes appointment from patient\u0027s queue of upcoming appointment."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public void deleteAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Appointment apptToBeDeleted \u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        for (Appointment appt : upcomingAppointments) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            if (appt.getAppointmentId() \u003d\u003d appointment.getAppointmentId()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                apptToBeDeleted \u003d appt;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        upcomingAppointments.remove(apptToBeDeleted);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Updates appointment from patient\u0027s queue of upcoming appointment."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public void setAppointment(Appointment target, Appointment editedAppointment) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        int indexToBeDeleted \u003d -1;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        for (Appointment appt : upcomingAppointments) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            if (appt.getAppointmentId() \u003d\u003d target.getAppointmentId()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                indexToBeDeleted \u003d upcomingAppointments.indexOf(appt);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        if (!(indexToBeDeleted \u003d\u003d -1)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            upcomingAppointments.set(indexToBeDeleted, editedAppointment);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Completes the latest appointment of the doctor, placing the records of the appointment in to the stack of"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * appointments"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void completeUpcomingAppointment(Appointment targetAppointment) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment appointmentToRemove \u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        for (Appointment app : upcomingAppointments) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            if (app.isSameAppointment(targetAppointment)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                appointmentToRemove \u003d app;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        upcomingAppointments.remove(appointmentToRemove);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Check if the doctor contains a certain appointment by {@code appointmentId}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public boolean hasAppointment(int appointmentId) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        for (Appointment app : upcomingAppointments) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            if (app.getAppointmentId() \u003d\u003d appointmentId) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Check if appointment clash with any upcoming appointments by {@code targetAppointment}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public boolean hasClashForAppointment(Appointment appointmentToCheck) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        for (Appointment app : upcomingAppointments) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            if (app.hasClashAppointment(appointmentToCheck)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                return true; // There is a clash in the appointments"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 89,
      "elroyhaw": 6,
      "florafong97": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/MedicalHistory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * Represents a Medical History of a patient in the health book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "public class MedicalHistory {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private ArrayList\u003cString\u003e allergies;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private ArrayList\u003cString\u003e conditions;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public MedicalHistory() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        allergies \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        conditions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public MedicalHistory(ArrayList\u003cString\u003e allergies, ArrayList\u003cString\u003e conditions) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        this.allergies \u003d allergies;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        this.conditions \u003d conditions;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public MedicalHistory(MedicalHistory medicalHistory) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        this.allergies \u003d new ArrayList\u003c\u003e(medicalHistory.getAllergies());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        this.conditions \u003d new ArrayList\u003c\u003e(medicalHistory.getConditions());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public ArrayList\u003cString\u003e getAllergies() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return allergies;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public ArrayList\u003cString\u003e getConditions() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return conditions;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void addAllergy(String allergy) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        allergies.add(allergy);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void addCondition(String condition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        conditions.add(condition);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public void setAllergies(ArrayList\u003cString\u003e allergies) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        this.allergies \u003d allergies;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public void setConditions(ArrayList\u003cString\u003e conditions) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        this.conditions \u003d conditions;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        if (o \u003d\u003d this) { //if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        } else if (!(o instanceof MedicalHistory)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            MedicalHistory r \u003d (MedicalHistory) o;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            return allergies.equals(r.getAllergies()) \u0026\u0026 conditions.equals(r.getConditions());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangYafei1998": 27,
      "giamjuxian": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/patient/Patient.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * Represents a Patient in the health book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "public class Patient extends Person {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    // Variables"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private String telegramId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private MedicalHistory medicalHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private List\u003cAppointment\u003e upcomingAppointments;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private List\u003cAppointment\u003e pastAppointments;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public Patient(Name name, Phone phone, Email email, Address address, Remark remark,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                   Set\u003cTag\u003e tags, String telegramId) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        super(name, phone, email, address, remark, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        setTelegramId(telegramId);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        upcomingAppointments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        pastAppointments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        this.medicalHistory \u003d new MedicalHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public Patient(Name name, Phone phone, Email email, Address address, Remark remark,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                   Set\u003cTag\u003e tags, String telegramId, List\u003cAppointment\u003e upcomingAppointments,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                   List\u003cAppointment\u003e pastAppointments) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        super(name, phone, email, address, remark, tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        setTelegramId(telegramId);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        this.upcomingAppointments \u003d upcomingAppointments;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        this.pastAppointments \u003d pastAppointments;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        this.medicalHistory \u003d new MedicalHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public Patient(Name name, Phone phone, Email email, Address address, Remark remark,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                   Set\u003cTag\u003e tags, String telegramId, List\u003cAppointment\u003e upcomingAppointments,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                   List\u003cAppointment\u003e pastAppointments, MedicalHistory medicalHistory) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        super(name, phone, email, address, remark, tags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        setTelegramId(telegramId);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        this.upcomingAppointments \u003d upcomingAppointments;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        this.pastAppointments \u003d pastAppointments;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        this.medicalHistory \u003d medicalHistory;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public List\u003cAppointment\u003e getUpcomingAppointments() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return upcomingAppointments;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public List\u003cAppointment\u003e getPastAppointments() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return pastAppointments;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public String getTelegramId() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return telegramId;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public MedicalHistory getMedicalHistory() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return medicalHistory;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void setTelegramId(String telegramId) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        this.telegramId \u003d telegramId;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void setMedicalHistory(MedicalHistory medicalHistory) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        this.medicalHistory \u003d medicalHistory;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Adds allergy into the medical history of patient"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void addAllergy(String allergy) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        medicalHistory.addAllergy(allergy);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Adds condition into the medical history of patient"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void addCondition(String condition) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        medicalHistory.addCondition(condition);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Adds an upcoming appointment to the patient\u0027s queue of upcoming appointment."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void addUpcomingAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        upcomingAppointments.add(appointment);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Deletes appointment from patient\u0027s queue of upcoming appointment."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public void deleteAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Appointment apptToBeDeleted \u003d null;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        for (Appointment appt : upcomingAppointments) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            if (appt.getAppointmentId() \u003d\u003d appointment.getAppointmentId()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                apptToBeDeleted \u003d appt;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        upcomingAppointments.remove(apptToBeDeleted);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Updates appointment from patient\u0027s queue of upcoming appointment."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Currently only for prescription"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public void setAppointment(Appointment target, Appointment editedAppointment) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        int indexToBeDeleted \u003d -1;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        boolean inUpComingAppointments \u003d false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        boolean inPastAppointments \u003d false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        for (Appointment appt : upcomingAppointments) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            if (appt.getAppointmentId() \u003d\u003d target.getAppointmentId()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                indexToBeDeleted \u003d upcomingAppointments.indexOf(appt);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                inUpComingAppointments \u003d true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        if (indexToBeDeleted \u003d\u003d -1 \u0026\u0026 !inUpComingAppointments) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            for (Appointment pastAppt : pastAppointments) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                if (pastAppt.getAppointmentId() \u003d\u003d target.getAppointmentId()) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                    indexToBeDeleted \u003d pastAppointments.indexOf(pastAppt);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                    inPastAppointments \u003d true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        if (inUpComingAppointments) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            upcomingAppointments.set(indexToBeDeleted, editedAppointment);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        } else if (inPastAppointments) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            pastAppointments.set(indexToBeDeleted, editedAppointment);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Completes the {@code appointment} of the patient, placing the records of the appointment in to the stack of"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * appointments"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void completeUpcomingAppointment(Appointment targetAppointment) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment appointmentToRemove \u003d null;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        for (Appointment app : upcomingAppointments) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            if (app.isSameAppointment(targetAppointment)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                appointmentToRemove \u003d app;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        appointmentToRemove.completeAppointment();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        upcomingAppointments.remove(appointmentToRemove);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        pastAppointments.add(appointmentToRemove);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Check if the patient contains a certain appointment by {@code appointmentId}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public boolean hasAppointment(int appointmentId) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        for (Appointment app : upcomingAppointments) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            if (app.getAppointmentId() \u003d\u003d appointmentId) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Check if appointment clash with any upcoming appointments by {@code targetAppointment}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public boolean hasClashForAppointment(Appointment appointmentToCheck) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        for (Appointment app : upcomingAppointments) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            if (app.hasClashAppointment(appointmentToCheck)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                return true; // There is a clash in the appointments"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangYafei1998": 13,
      "giamjuxian": 126,
      "elroyhaw": 6,
      "florafong97": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Address.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(ADDRESS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 58,
      "florafong97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Remark remark, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        requireAllNonNull(name, phone, email, address, remark, tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public Remark getRemark() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Returns true if both persons of the same name."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                \u0026\u0026 otherPerson.getRemark().equals(getRemark())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return Objects.hash(name, phone, email, address, remark, tags);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                .append(\" Remark: \")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                .append(getRemark())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 113,
      "elroyhaw": 2,
      "florafong97": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Remark.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florafong97"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florafong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florafong97"
        },
        "content": " * Represents a Person\u0027s remark in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florafong97"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florafong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florafong97"
        },
        "content": "public class Remark {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Constructs an {@code Remark}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public Remark(String remark) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        value \u003d remark;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                || (other instanceof Remark // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                \u0026\u0026 value.equals(((Remark) other).value)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "florafong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florafong97": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Finds the patient in the list with {@code persons}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * {@code patient} must be in the list of persons."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public Patient findPatient(Patient patient) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        requireNonNull(patient);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        for (Person p : internalList) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            if (p instanceof Patient \u0026\u0026 p.equals(patient)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                return (Patient) p;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Finds the doctor in the list with {@code persons}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * {@code doctor} must be in the list of persons."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public Doctor findDoctor(Doctor doctor) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        requireNonNull(doctor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        for (Person d : internalList) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            if (d instanceof Doctor \u0026\u0026 d.equals(doctor)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                return (Doctor) d;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 31,
      "-": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/TagContainsDoctorPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Tag} contains \"Doctor\"."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "public class TagContainsDoctorPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        return person.getTags().contains(new Tag(\"Doctor\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        if (other \u003d\u003d this) { //if same object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangYafei1998": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/TagContainsPatientPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Tag} contains \"Patient\"."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "public class TagContainsPatientPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        return person.getTags().contains(new Tag(\"Patient\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        if (other \u003d\u003d this) { //if same object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangYafei1998": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final Remark EMPTY_REMARK \u003d new Remark(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final Remark NON_EMPTY_REMARK \u003d new Remark(\"Likes dogs\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            new Patient(new Name(\"John Doe\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"), NON_EMPTY_REMARK,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                getTagSet(\"Patient\"), \"123\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            new Patient(new Name(\"Jackie Chen\"), new Phone(\"91234232\"), new Email(\"jackiechen@example.com\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                    new Address(\"Blk 123 Clementi Street 9, #08-20\"), EMPTY_REMARK,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                    getTagSet(\"Patient\"), \"123\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            new Doctor(new Name(\"Mary Jane\"), new Phone(\"98232323\"), new Email(\"maryjane@example.com\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                    new Address(\"Blk 32 Yishun Street 31, #09-30\"), EMPTY_REMARK,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                    getTagSet(\"Doctor\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            new Doctor(new Name(\"Tommy Tan\"), new Phone(\"82312342\"), new Email(\"tommytan@example.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                    new Address(\"Blk 11 Jurong West Street 11, #11-30\"), EMPTY_REMARK,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                    getTagSet(\"Doctor\"))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 13,
      "-": 42,
      "florafong97": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedAppointment.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.appointment.AppointmentId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.appointment.Prescription;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.appointment.Status;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * JAXB-friendly adapted version of the Appointment."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "public class XmlAdaptedAppointment {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Appointment\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private int appointmentId;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private String doctor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private String patient;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private String dateTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private String status;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private String comments;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private List\u003cXmlAdaptedPrescription\u003e prescriptions;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Constructs an XmlAdaptedAppointment."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public XmlAdaptedAppointment() {}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Constructs a {@code XmlAdaptedAppointment} with the given {@code prescriptionName}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public XmlAdaptedAppointment(int appointmentId, String doctor, String patient, String dateTime, String status,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                                 String comments, List\u003cXmlAdaptedPrescription\u003e prescriptions) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        this.appointmentId \u003d appointmentId;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        this.doctor \u003d doctor;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        this.comments \u003d comments;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        this.prescriptions \u003d prescriptions;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Converts a given Appointment into this class for JAXB use."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public XmlAdaptedAppointment(Appointment source) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        appointmentId \u003d source.getAppointmentId();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        doctor \u003d source.getDoctor();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        patient \u003d source.getPatient();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        dateTime \u003d source.getDateTime().toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        status \u003d source.getStatus().name();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        comments \u003d source.getComments();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        prescriptions \u003d source.getPrescriptions().stream()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                .map(XmlAdaptedPrescription::new)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Converts this jaxb-friendly adapted Appointment object into the model\u0027s Appointment object."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public Appointment toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        final List\u003cPrescription\u003e appointmentPrescriptions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        if (prescriptions !\u003d null \u0026\u0026 prescriptions.size() \u003e 0) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            for (XmlAdaptedPrescription prescription : prescriptions) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                appointmentPrescriptions.add(prescription.toModelType());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        if (appointmentId \u003d\u003d 0) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                    AppointmentId.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        final AppointmentId currentAppointmentId \u003d new AppointmentId(appointmentId);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        if (doctor \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                    Doctor.class.getSimpleName()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        if (patient \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                    Doctor.class.getSimpleName()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        if (dateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                    LocalDateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        final LocalDateTime appointmentDateTime \u003d LocalDateTime.parse(dateTime);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        if (status \u003d\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                    Status.class.getSimpleName()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Status appointmentStatus \u003d Status.UPCOMING;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        if (status.equals(\"COMPLETED\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            appointmentStatus \u003d Status.COMPLETED;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return new Appointment(currentAppointmentId, doctor, patient, appointmentDateTime,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                appointmentStatus, comments, appointmentPrescriptions);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public int getAppointmentId() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return appointmentId;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        if (!(other instanceof XmlAdaptedAppointment)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return appointmentId \u003d\u003d ((XmlAdaptedAppointment) other).getAppointmentId();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 141
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.patient.MedicalHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the Person."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPerson {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    private String remark;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private List\u003cXmlAdaptedAppointment\u003e upcomingAppointments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private List\u003cXmlAdaptedAppointment\u003e pastAppointments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    private MedicalHistory medicalHistory \u003d new MedicalHistory();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson() {}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public XmlAdaptedPerson(String name, String phone, String email, String address,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                            String remark, List\u003cXmlAdaptedTag\u003e tagged, List\u003cXmlAdaptedAppointment\u003e upcomingAppointments,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                            List\u003cXmlAdaptedAppointment\u003e pastAppointments) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        if (upcomingAppointments !\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            this.upcomingAppointments \u003d new ArrayList\u003c\u003e(upcomingAppointments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        if (pastAppointments !\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            this.pastAppointments \u003d new ArrayList\u003c\u003e(pastAppointments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public XmlAdaptedPerson(String name, String phone, String email, String address,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                            String remark, List\u003cXmlAdaptedTag\u003e tagged, List\u003cXmlAdaptedAppointment\u003e upcomingAppointments,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                            List\u003cXmlAdaptedAppointment\u003e pastAppointments, MedicalHistory medicalHistory) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        if (upcomingAppointments !\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            this.upcomingAppointments \u003d new ArrayList\u003c\u003e(upcomingAppointments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        if (pastAppointments !\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            this.pastAppointments \u003d new ArrayList\u003c\u003e(pastAppointments);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        if (medicalHistory !\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            this.medicalHistory \u003d medicalHistory;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        remark \u003d source.getRemark().value;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        if (!tagged.isEmpty() \u0026\u0026 tagged.get(0).equals(new XmlAdaptedTag(\"Patient\"))) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            upcomingAppointments \u003d ((Patient) source).getUpcomingAppointments().stream()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                    .map(XmlAdaptedAppointment::new)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            pastAppointments \u003d ((Patient) source).getPastAppointments().stream()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                    .map(XmlAdaptedAppointment::new)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            medicalHistory \u003d ((Patient) source).getMedicalHistory();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        } else if (!tagged.isEmpty() \u0026\u0026 tagged.get(0).equals(new XmlAdaptedTag(\"Doctor\"))) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            upcomingAppointments \u003d ((Doctor) source).getUpcomingAppointments().stream()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                    .map(XmlAdaptedAppointment::new)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        final List\u003cAppointment\u003e allUpcomingAppointments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        for (XmlAdaptedAppointment upcomingAppointment : upcomingAppointments) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            allUpcomingAppointments.add(upcomingAppointment.toModelType());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        final List\u003cAppointment\u003e allPastAppointments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        for (XmlAdaptedAppointment pastAppointments : pastAppointments) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            allPastAppointments.add(pastAppointments.toModelType());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        final MedicalHistory modelMedicalHistory \u003d new MedicalHistory(medicalHistory.getAllergies(),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                medicalHistory.getConditions());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        if (remark \u003d\u003d null) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName()));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        final Remark modelRemark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        if (!modelTags.isEmpty() \u0026\u0026 modelTags.toArray()[0].equals(new Tag(\"Doctor\"))) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            return new Doctor(modelName, modelPhone, modelEmail, modelAddress, modelRemark, modelTags,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                    allUpcomingAppointments);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        } else if (!modelTags.isEmpty() \u0026\u0026 modelTags.toArray()[0].equals(new Tag(\"Patient\"))) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            return new Patient(modelName, modelPhone, modelEmail, modelAddress, modelRemark, modelTags, \"123\","
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                    allUpcomingAppointments, allPastAppointments, modelMedicalHistory);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            return new Person(modelName, modelPhone, modelEmail, modelAddress, modelRemark, modelTags);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedPerson)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherPerson.email)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(address, otherPerson.address)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                \u0026\u0026 Objects.equals(remark, otherPerson.remark)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagged.equals(otherPerson.tagged);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangYafei1998": 36,
      "giamjuxian": 40,
      "-": 136,
      "florafong97": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPrescription.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.appointment.AppointmentId;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.ConsumptionPerDay;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.Dosage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.MedicineName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.appointment.Prescription;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * JAXB-friendly adapted version of the Prescription."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "public class XmlAdaptedPrescription {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Prescription\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private int appointmentId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private String medicineName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private String dosage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private String consumptionPerDay;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Constructs an XmlAdaptedPrescription."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public XmlAdaptedPrescription() {}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Constructs a {@code XmlAdaptedPrescription} with the given prescription details"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public XmlAdaptedPrescription(int appointmentId, String medicineName, String dosage, String consumptionPerDay) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        this.appointmentId \u003d appointmentId;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        this.medicineName \u003d medicineName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        this.dosage \u003d dosage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        this.consumptionPerDay \u003d consumptionPerDay;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Converts a given Prescription into this class for JAXB use."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public XmlAdaptedPrescription(Prescription source) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        appointmentId \u003d source.getId();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        medicineName \u003d source.getMedicineName().getFullMedicineName();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        dosage \u003d source.getDosage().getValue();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        consumptionPerDay \u003d source.getConsumptionPerDay().getValue();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Converts this jaxb-friendly adapted Prescription object into the model\u0027s Prescription object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public Prescription toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        if (appointmentId \u003d\u003d 0) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                    AppointmentId.class.getSimpleName()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        final int medAppointmentId \u003d appointmentId;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        if (medicineName \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                    MedicineName.class.getSimpleName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        final MedicineName medName \u003d new MedicineName(medicineName);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        if (dosage \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                    Dosage.class.getSimpleName()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        final Dosage medDosage \u003d new Dosage(dosage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        if (consumptionPerDay \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                    ConsumptionPerDay.class.getSimpleName()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        final ConsumptionPerDay medConsumptionPerDay \u003d new ConsumptionPerDay(consumptionPerDay);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return new Prescription(medAppointmentId, medName, medDosage, medConsumptionPerDay);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public int getAppointmentId() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return appointmentId;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public String getMedicineName() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return medicineName;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public String getDosage() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return dosage;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public String getConsumptionPerDay() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return consumptionPerDay;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        if (!(other instanceof XmlAdaptedPrescription)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        if (medicineName.equals(((XmlAdaptedPrescription) other).getMedicineName())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                \u0026\u0026 dosage.equals(((XmlAdaptedPrescription) other).getDosage())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                \u0026\u0026 consumptionPerDay \u003d\u003d (((XmlAdaptedPrescription) other).getConsumptionPerDay())) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 119,
      "florafong97": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to XML format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@XmlRootElement(name \u003d \"addressbook\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBook {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedPerson\u003e persons;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private List\u003cXmlAdaptedAppointment\u003e appointments;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private int appointmentCounter;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty XmlSerializableAddressBook."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        appointments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        appointmentCounter \u003d 10000;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        appointments.addAll(src.getAppointmentList().stream().map(XmlAdaptedAppointment::new)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        appointmentCounter \u003d src.getAppointmentCounter();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this addressbook into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code XmlAdaptedPerson}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedPerson p : persons) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d p.toModelType();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            if (!person.getTags().isEmpty() \u0026\u0026 person.getTags().toArray()[0].equals(new Tag(\"Doctor\"))) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                addressBook.addDoctor((Doctor) person);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            } else if (!person.getTags().isEmpty() \u0026\u0026 person.getTags().toArray()[0].equals(new Tag(\"Patient\"))) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                addressBook.addPatient((Patient) person);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBook.addPerson(person);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        for (XmlAdaptedAppointment a : appointments) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            Appointment appointment \u003d a.toModelType();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            addressBook.addAppointment(appointment);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        addressBook.setAppointmentCounter(appointmentCounter);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlSerializableAddressBook)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.equals(((XmlSerializableAddressBook) other).persons);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 23,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.ListElementPointer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private final List\u003cString\u003e commands \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            \"clear\", \"delete-patient\", \"delete-doctor\", \"exit\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            \"find\", \"help\", \"history\", \"list\", \"redo\", \"register-patient\", \"register-doctor\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            \"select\", \"undo\", \"add-appointment\", \"edit-appointment\", \"delete-appointment\", \"remark\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            \"add-medical-history\", \"filter-patient\", \"filter-doctor\", \"delete-medical-history\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            \"view-patient\", \"view-doctor\", \"complete-appointment\", \"add-prescription\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            \"delete-prescription\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(Logic logic) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        case TAB:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            filterCommands(commandTextField.getText());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Filter list of commands to find nearest command"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * to the given input of at least one character"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private void filterCommands(String text) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        String nearestCommand \u003d commands.stream()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                .filter(command -\u003e command.startsWith(text))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                .orElse(\"No commands beginning with \u0027\" + text + \"\u0027\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        replaceText(nearestCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        commandTextField.requestFocus();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        commandTextField.end();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            // process result of the command"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            // handle command failure"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandTextField.getText());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(e.getMessage()));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangYafei1998": 1,
      "-": 150,
      "elroyhaw": 24,
      "florafong97": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/InformationPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import javafx.scene.control.TableCell;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.appointment.Prescription;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " * The Information Panel of the App."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "public class InformationPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private Patient patient;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private Doctor doctor;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private Label allergiesLabel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private Label conditionsLabel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private TableView\u003cAppointment\u003e upcomingAppointmentTable;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private TableView\u003cAppointment\u003e pastAppointmentTable;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private TableColumn\u003cAppointment, ArrayList\u003cPrescription\u003e\u003e prescriptionColumn;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private TableColumn\u003cAppointment, ArrayList\u003cPrescription\u003e\u003e prescriptionPastColumn;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private TableColumn\u003cAppointment, LocalDateTime\u003e dateTimeColumn;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private TableColumn\u003cAppointment, LocalDateTime\u003e dateTimePastColumn;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public InformationPanel(String fxmlPath) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        super(fxmlPath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        this.patient \u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private void setConnections() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        allergiesLabel.setText(\" \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        conditionsLabel.setText(\" \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        upcomingAppointmentTable.getItems().clear();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        pastAppointmentTable.getItems().clear();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private void setConnections(ObservableList\u003cAppointment\u003e upcomingAppointmentList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        upcomingAppointmentTable.getItems().clear();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        upcomingAppointmentTable.getItems().addAll(upcomingAppointmentList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        dateTimeColumn.setCellFactory(column -\u003e {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            return new TableCell\u003cAppointment, LocalDateTime\u003e() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                protected void updateItem(LocalDateTime item, boolean empty) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                    super.updateItem(item, empty);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                    if (item \u003d\u003d null || empty) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                        setText(null);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                        setText(item.format(formatter));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            };"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        });"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private void setConnections(ObservableList\u003cString\u003e allergiesList,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                ObservableList\u003cString\u003e conditionsList,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                ObservableList\u003cAppointment\u003e upcomingAppointmentList,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                ObservableList\u003cAppointment\u003e pastAppointmentList) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        String parsedAllergiesList \u003d allergiesList.toString().substring(1, allergiesList.toString().length() - 1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        String parsedConditionsList \u003d conditionsList.toString().substring(1, conditionsList.toString().length() - 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        allergiesLabel.setText(parsedAllergiesList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        conditionsLabel.setText(parsedConditionsList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        upcomingAppointmentTable.getItems().clear();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        pastAppointmentTable.getItems().clear();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        upcomingAppointmentTable.getItems().addAll(upcomingAppointmentList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        pastAppointmentTable.getItems().addAll(pastAppointmentList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        prescriptionColumn.setCellFactory(column -\u003e {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            return new TableCell\u003cAppointment, ArrayList\u003cPrescription\u003e\u003e() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                protected void updateItem(ArrayList\u003cPrescription\u003e item, boolean empty) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                    super.updateItem(item, empty);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                    if (item \u003d\u003d null || empty) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                        setGraphic(null);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                        return;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                        final Text text \u003d new Text(item.toString()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                .substring(1, item.toString().length() - 1)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                .replaceAll(\", \", \"\\n\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                        text.setWrappingWidth(500.0);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                        setPrefHeight(text.getLayoutBounds().getHeight());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                        setGraphic(text);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                        text.setFill(Color.WHITE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            };"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        });"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        prescriptionPastColumn.setCellFactory(column -\u003e {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            return new TableCell\u003cAppointment, ArrayList\u003cPrescription\u003e\u003e() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                protected void updateItem(ArrayList\u003cPrescription\u003e item, boolean empty) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                    super.updateItem(item, empty);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                    if (item \u003d\u003d null || empty) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                        setGraphic(null);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                        return;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                        final Text text \u003d new Text(item.toString()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                .substring(1, item.toString().length() - 1)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                .replaceAll(\", \", \"\\n\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                        text.setWrappingWidth(500.0);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                        setPrefHeight(text.getLayoutBounds().getHeight());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                        setGraphic(text);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                        text.setFill(Color.WHITE);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            };"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        });"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        dateTimeColumn.setCellFactory(column -\u003e {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            return new TableCell\u003cAppointment, LocalDateTime\u003e() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                protected void updateItem(LocalDateTime item, boolean empty) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                    super.updateItem(item, empty);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                    if (item \u003d\u003d null || empty) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                        setText(null);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                        setText(item.format(formatter));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            };"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        });"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        dateTimePastColumn.setCellFactory(column -\u003e {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            return new TableCell\u003cAppointment, LocalDateTime\u003e() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                protected void updateItem(LocalDateTime item, boolean empty) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                    super.updateItem(item, empty);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                    if (item \u003d\u003d null || empty) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                        setText(null);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                        setText(item.format(formatter));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            };"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        });"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Loads a patient\u0027s information on the panel."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private void loadPatientInformation(Patient patient) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        Iterator\u003cString\u003e allergiesItr \u003d patient.getMedicalHistory().getAllergies().iterator();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        Iterator\u003cString\u003e conditionsItr \u003d patient.getMedicalHistory().getConditions().iterator();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        Iterator\u003cAppointment\u003e upcomingAppointmentItr \u003d patient.getUpcomingAppointments().iterator();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        Iterator\u003cAppointment\u003e pastAppointmentItr \u003d patient.getPastAppointments().iterator();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        ObservableList\u003cString\u003e allergiesList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        ObservableList\u003cString\u003e conditionsList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        ObservableList\u003cAppointment\u003e upcomingAppointmentList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        ObservableList\u003cAppointment\u003e pastAppointmentList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        while (allergiesItr.hasNext()) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            allergiesList.add(allergiesItr.next());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        while (conditionsItr.hasNext()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            conditionsList.add(conditionsItr.next());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        while (upcomingAppointmentItr.hasNext()) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            upcomingAppointmentList.add(upcomingAppointmentItr.next());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        while (pastAppointmentItr.hasNext()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            pastAppointmentList.add(pastAppointmentItr.next());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        setConnections(allergiesList, conditionsList, upcomingAppointmentList, pastAppointmentList);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Loads a doctor\u0027s information on the panel."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private void loadDoctorInformation(Doctor doctor) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        Iterator\u003cAppointment\u003e upcomingAppointmentItr \u003d doctor.getUpcomingAppointments().iterator();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        ObservableList\u003cAppointment\u003e upcomingAppointmentList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        while (upcomingAppointmentItr.hasNext()) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            upcomingAppointmentList.add(upcomingAppointmentItr.next());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        setConnections(upcomingAppointmentList);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Clear information on the panel."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private void clearInformation() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        setConnections();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Changes panel between doctor and patient."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public void changePanel(Person person) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        if (person instanceof Patient) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            loadPatientInformation((Patient) person);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        } else if (person instanceof Doctor) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            loadDoctorInformation((Doctor) person);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            clearInformation();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elroyhaw": 240
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private InformationPanel informationPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private StackPane informationPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        informationPanel \u003d new InformationPanel(\"InformationPanel.fxml\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        informationPlaceholder.getChildren().add(informationPanel.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private void handleInformationPanelChangedEvent(PersonPanelSelectionChangedEvent event) throws IOException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        if (event.getNewSelection() instanceof Patient) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            informationPanel \u003d new InformationPanel(\"InformationPanel.fxml\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            informationPlaceholder.getChildren().add(informationPanel.getRoot());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            informationPanel.changePanel(event.getNewSelection());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        if (event.getNewSelection() instanceof Doctor) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            informationPanel \u003d new InformationPanel(\"InformationPanelDoctor.fxml\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            informationPlaceholder.getChildren().add(informationPanel.getRoot());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            informationPanel.changePanel(event.getNewSelection());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 195,
      "elroyhaw": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private static final Map\u003cString, String\u003e COLORS \u003d Map.of(\"Doctor\", \"178c05\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            \"Patient\", \"bb3e3b\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        person.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            String tagName \u003d tag.tagName;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            tags.getChildren().add(new Label(tagName));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            if (COLORS.containsKey(tagName)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                tags.getChildren().get(tags.getChildren().size() - 1).setStyle(\"-fx-background-color: #\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                        + COLORS.get(tagName));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        });"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 69,
      "elroyhaw": 13,
      "florafong97": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic, Config config, UserPrefs prefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.hide();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // mainWindow.releaseResources();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                event.exception);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 119,
      "elroyhaw": 1
    }
  },
  {
    "path": "src/main/resources/credentials.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "  \"installed\": {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    \"client_id\": \"442385750857-45n66io01ulubuks382olsprm3fvc5ur.apps.googleusercontent.com\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    \"project_id\": \"healthbook-1540278069038\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    \"token_uri\": \"https://www.googleapis.com/oauth2/v3/token\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    \"client_secret\": \"cNgVVLhc_6aunolIqNSwymsI\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    \"redirect_uris\": ["
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "      \"urn:ietf:wg:oauth:2.0:oob\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "      \"http://localhost\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "  }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 14
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ".table-cell {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    -fx-background-color: derive(#1d1d1d,30%);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ".titled-pane {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    -fx-font-size: 10px;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    -fx-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ".titled-pane \u003e .title {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    -fx-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 348,
      "elroyhaw": 17
    }
  },
  {
    "path": "src/main/resources/view/InformationPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "\u003c?import javafx.scene.control.TitledPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "\u003c?import javafx.scene.control.cell.PropertyValueFactory?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "\u003cStackPane stylesheets\u003d\"@DarkTheme.css\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        \u003cAnchorPane maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                    prefHeight\u003d\"600.0\" prefWidth\u003d\"800.0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                \u003cVBox fx:id\u003d\"information\" prefHeight\u003d\"600.0\" prefWidth\u003d\"800.0\" AnchorPane.bottomAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                      AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                        \u003cTitledPane animated\u003d\"false\" text\u003d\"Medical History\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"90.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                        \u003cLabel layoutX\u003d\"13.0\" layoutY\u003d\"6.0\" text\u003d\"Allergies:\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                        \u003cLabel layoutX\u003d\"13.0\" layoutY\u003d\"25.0\" text\u003d\"Conditions:\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                        \u003cLabel fx:id\u003d\"allergiesLabel\" layoutX\u003d\"102.0\" layoutY\u003d\"6.0\" prefHeight\u003d\"21.0\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                               prefWidth\u003d\"676.0\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                        \u003cLabel fx:id\u003d\"conditionsLabel\" layoutX\u003d\"102.0\" layoutY\u003d\"25.0\" prefHeight\u003d\"21.0\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                               prefWidth\u003d\"676.0\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                            \u003c/content\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                        \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                        \u003cTitledPane animated\u003d\"false\" text\u003d\"Upcoming Appointments\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"300.0\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                        \u003cTableView fx:id\u003d\"upcomingAppointmentTable\" prefHeight\u003d\"168.0\" prefWidth\u003d\"798.0\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                   AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                   AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                            \u003ccolumns\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                \u003cTableColumn prefWidth\u003d\"75.0\" text\u003d\"S/N\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                        \u003cPropertyValueFactory property\u003d\"appointmentId\"/\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                \u003cTableColumn fx:id\u003d\"dateTimeColumn\" prefWidth\u003d\"180.0\" text\u003d\"Appointment Date and Time\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                        \u003cPropertyValueFactory property\u003d\"dateTime\"/\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                \u003cTableColumn prefWidth\u003d\"150.0\" text\u003d\"Doctor\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                        \u003cPropertyValueFactory property\u003d\"doctor\"/\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                \u003cTableColumn fx:id\u003d\"prescriptionColumn\" prefWidth\u003d\"1000.0\" text\u003d\"Prescriptions\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                        \u003cPropertyValueFactory property\u003d\"prescriptions\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                            \u003c/columns\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                        \u003c/TableView\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                            \u003c/content\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                            \u003cfont\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                \u003cFont name\u003d\"System Bold\" size\u003d\"15.0\"/\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                            \u003c/font\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                        \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                        \u003cTitledPane animated\u003d\"false\" text\u003d\"Past Appointments\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"300.0\"\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                        \u003cTableView fx:id\u003d\"pastAppointmentTable\" prefHeight\u003d\"168.0\" prefWidth\u003d\"798.0\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                   AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                   AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                            \u003ccolumns\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                \u003cTableColumn prefWidth\u003d\"75.0\" text\u003d\"S/N\"\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                        \u003cPropertyValueFactory property\u003d\"appointmentId\"/\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                \u003cTableColumn fx:id\u003d\"dateTimePastColumn\" prefWidth\u003d\"180.0\" text\u003d\"Appointment Date and Time\"\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                        \u003cPropertyValueFactory property\u003d\"dateTime\"/\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                \u003cTableColumn prefWidth\u003d\"150.0\" text\u003d\"Doctor\"\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                        \u003cPropertyValueFactory property\u003d\"doctor\"/\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                \u003cTableColumn fx:id\u003d\"prescriptionPastColumn\" prefWidth\u003d\"1000.0\" text\u003d\"Prescriptions\"\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                        \u003cPropertyValueFactory property\u003d\"prescriptions\"/\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                            \u003c/columns\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                        \u003c/TableView\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                            \u003c/content\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                            \u003cfont\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                \u003cFont name\u003d\"System Bold\" size\u003d\"15.0\"/\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                            \u003c/font\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                        \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "elroyhaw": 115
    }
  },
  {
    "path": "src/main/resources/view/InformationPanelDoctor.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "\u003c?import javafx.scene.control.TitledPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "\u003c?import javafx.scene.control.cell.PropertyValueFactory?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "\u003cStackPane fx:id\u003d\"doctorStackPane\" stylesheets\u003d\"@DarkTheme.css\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        \u003cAnchorPane maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"600.0\" prefWidth\u003d\"800.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                  \u003cTitledPane animated\u003d\"false\" prefHeight\u003d\"600.0\" prefWidth\u003d\"800.0\" text\u003d\"Upcoming Appointments\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                      \u003ccontent\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                          \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"300.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                              \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                  \u003cTableView fx:id\u003d\"upcomingAppointmentTable\" prefHeight\u003d\"168.0\" prefWidth\u003d\"798.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                      \u003ccolumns\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                          \u003cTableColumn prefWidth\u003d\"75.0\" text\u003d\"S/N\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                              \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                  \u003cPropertyValueFactory property\u003d\"appointmentId\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                              \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                          \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                          \u003cTableColumn fx:id\u003d\"dateTimeColumn\" prefWidth\u003d\"180.0\" text\u003d\"Appointment Date and Time\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                              \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                  \u003cPropertyValueFactory property\u003d\"dateTime\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                              \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                          \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                          \u003cTableColumn prefWidth\u003d\"1000.0\" text\u003d\"Patient\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                              \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                                  \u003cPropertyValueFactory property\u003d\"patient\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                              \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                          \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                      \u003c/columns\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                                  \u003c/TableView\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                              \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                          \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                      \u003c/content\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                      \u003cfont\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                          \u003cFont name\u003d\"System Bold\" size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                      \u003c/font\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                  \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "elroyhaw": 48
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "          \u003cStackPane fx:id\u003d\"informationPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 67,
      "elroyhaw": 1
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "florafong97"
        },
        "content": "      \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "florafong97": 1
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidAndValidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florafong97"
        },
        "content": "s\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Valid Person --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        \u003cremark isPrivate\u003d\"false\"\u003e\u003c/remark\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid phone field --\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e948asdf2424\u003c/phone\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        \u003cremark isPrivate\u003d\"false\"\u003e\u003c/remark\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "florafong97": 3
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/duplicatePersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        \u003cremark\u003e\u003c/remark\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with same identity as Alice Pauline --\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003epauline@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        \u003cremark\u003e\u003c/remark\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "florafong97": 2
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/typicalPersonsAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        \u003cremark\u003e\u003c/remark\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eBenson Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e98765432\u003c/phone\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ejohnd@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e311, Clementi Ave 2, #02-25\u003c/address\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        \u003cremark\u003e\u003c/remark\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003eowesMoney\u003c/tagged\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCarl Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        \u003cremark\u003e\u003c/remark\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eDaniel Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        \u003cremark\u003e\u003c/remark\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eElle Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        \u003cremark\u003e\u003c/remark\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eFiona Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        \u003cremark\u003e\u003c/remark\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eGeorge Best\u003c/name\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        \u003cremark\u003e\u003c/remark\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 50,
      "florafong97": 7
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with an invalid phone field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482asf424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    \u003cremark\u003e\u003c/remark\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "florafong97": 1
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with missing name field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    \u003cremark\u003e\u003c/remark\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 8,
      "florafong97": 1
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        \u003cremark isPrivate\u003d\"false\"\u003e\u003c/remark\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eRuth Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87249245\u003c/phone\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eruth@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e81th street\u003c/address\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        \u003cremark isPrivate\u003d\"false\"\u003e\u003c/remark\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHeinz Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        \u003cremark isPrivate\u003d\"false\"\u003e\u003c/remark\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCornelia Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        \u003cremark isPrivate\u003d\"false\"\u003e\u003c/remark\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eWerner Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        \u003cremark isPrivate\u003d\"false\"\u003e\u003c/remark\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eLydia Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        \u003cremark isPrivate\u003d\"false\"\u003e\u003c/remark\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAnna Best\u003c/name\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        \u003cremark isPrivate\u003d\"false\"\u003e\u003c/remark\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eStefan Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003estefan@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle india\u003c/address\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        \u003cremark isPrivate\u003d\"false\"\u003e\u003c/remark\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eMartin Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482131\u003c/phone\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003echicago ave\u003c/address\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        \u003cremark isPrivate\u003d\"false\"\u003e\u003c/remark\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "florafong97": 9
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validPerson.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    \u003cremark\u003e\u003c/remark\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 8,
      "florafong97": 1
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/InformationPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " * A handler for the {@code InformationPanel} of the UI."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "public class InformationPanelHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final String INFORMATION_ID \u003d \"#information\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public InformationPanelHandle(Node informationPanelNode) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        super(informationPanelNode);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elroyhaw": 15
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private final PersonListPanelHandle personListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    //    private final BrowserPanelHandle browserPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private final InformationPanelHandle informationPanel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanelHandle(getChildNode(PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        //        browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        informationPanel \u003d new InformationPanelHandle(getChildNode(InformationPanelHandle.INFORMATION_ID));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    //    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    //        return browserPanel;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public InformationPanelHandle getInformationPanel() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        return informationPanel;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "elroyhaw": 10
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to a person card in the person list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    private static final String REMARK_FIELD_ID \u003d \"#remark\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    private final Label remarkLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        remarkLabel \u003d getChildNode(REMARK_FIELD_ID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public String getRemark() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return remarkLabel.getText();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if this handle contains {@code person}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Person person) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return getName().equals(person.getName().fullName)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getAddress().equals(person.getAddress().value)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getPhone().equals(person.getPhone().value)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getEmail().equals(person.getEmail().value)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                \u0026\u0026 getRemark().equals(person.getRemark().value)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(person.getTags().stream()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 87,
      "florafong97": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : Health Book\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedPerson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validAddressBook.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingPersonField.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonField.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"validPerson.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"9482424\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"hans@example\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"4th street\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    private static final String VALID_REMARK \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(null, AddressBook.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(9, dataFromFile.getPersonList().size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                VALID_REMARK, VALID_TAGS, null, null);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                VALID_ADDRESS, VALID_REMARK, VALID_TAGS, null, null);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                null, null);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(null, new AddressBook());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        dataToWrite \u003d new XmlSerializableAddressBook("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                builder.withPerson(new PersonBuilder().build()).build());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlRootElement(name \u003d \"person\")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 5,
      "-": 141,
      "florafong97": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddAppointmentCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.testutil.TypicalPatientsAndDoctors.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.testutil.TypicalPatientsAndDoctors.BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.testutil.TypicalPatientsAndDoctors.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.testutil.TypicalPatientsAndDoctors.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.testutil.TypicalPatientsAndDoctors.GEORGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.testutil.TypicalPatientsAndDoctors.HELENA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.testutil.TypicalPatientsAndDoctors.getTypicalAddressBookWithPatientAndDoctor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " * Contains integration tests and unit tests for AddAppointmentCommand."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "public class AddAppointmentCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBookWithPatientAndDoctor(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public void execute_addAppointment_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        Appointment toAdd \u003d new Appointment(10000, HELENA.getName().toString(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                CARL.getName().toString(), LocalDateTime.of(2018, 10, 17, 18, 0));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        AddAppointmentCommand addAppointmentCommand \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                new AddAppointmentCommand(CARL.getName(), HELENA.getName(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                        LocalDateTime.of(2018, 10, 17, 18, 0));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        String expectedMessage \u003d AddAppointmentCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        expectedModel.addAppointment(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        expectedModel.incrementAppointmentCounter();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertCommandSuccess(addAppointmentCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public void execute_invalidPatient_throwsCommandException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        Name patientName \u003d new Name(\"ASFASFASF\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        AddAppointmentCommand addAppointmentCommand \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                new AddAppointmentCommand(patientName, GEORGE.getName(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                        LocalDateTime.of(2018, 10, 17, 18, 0));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertCommandFailure(addAppointmentCommand,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                model, commandHistory, AddAppointmentCommand.MESSAGE_INVALID_PATIENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public void execute_invalidDoctor_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        Name doctorName \u003d new Name(\"ASFASFASF\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        AddAppointmentCommand addAppointmentCommand \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                new AddAppointmentCommand(ALICE.getName(), doctorName,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                        LocalDateTime.of(2018, 10, 17, 18, 0));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertCommandFailure(addAppointmentCommand,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                model, commandHistory, AddAppointmentCommand.MESSAGE_INVALID_DOCTOR);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public void execute_patientClashAppointment_throwsCommandException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        Model modifiableModel \u003d new ModelManager(getTypicalAddressBookWithPatientAndDoctor(), new UserPrefs());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        CommandHistory modifiableCommandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        Appointment toAdd \u003d new Appointment(10000, GEORGE.getName().toString(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                ALICE.getName().toString(), LocalDateTime.of(2018, 10, 17, 18, 0));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        ALICE.addUpcomingAppointment(toAdd);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        modifiableModel.addAppointment(toAdd);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        modifiableModel.incrementAppointmentCounter();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        modifiableModel.commitAddressBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // another appointment on the same datetime for same patient but different doctor"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        AddAppointmentCommand addAppointmentCommand \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                new AddAppointmentCommand(ALICE.getName(), FIONA.getName(),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                        LocalDateTime.of(2018, 10, 17, 18, 0));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertCommandFailure(addAppointmentCommand,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                modifiableModel, modifiableCommandHistory, AddAppointmentCommand.MESSAGE_PATIENT_CLASH_APPOINTMENT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public void execute_doctorClashAppointment_throwsCommandException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        Model modifiableModel \u003d new ModelManager(getTypicalAddressBookWithPatientAndDoctor(), new UserPrefs());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        CommandHistory modifiableCommandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        Appointment toAdd \u003d new Appointment(10000, GEORGE.getName().toString(),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                ALICE.getName().toString(), LocalDateTime.of(2018, 10, 17, 18, 0));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        GEORGE.addUpcomingAppointment(toAdd);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        modifiableModel.addAppointment(toAdd);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        modifiableModel.incrementAppointmentCounter();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        modifiableModel.commitAddressBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // another appointment on the same datetime for same doctor but different patient"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        AddAppointmentCommand addAppointmentCommand \u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                new AddAppointmentCommand(BENSON.getName(), GEORGE.getName(),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                        LocalDateTime.of(2018, 10, 17, 18, 0));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertCommandFailure(addAppointmentCommand,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                modifiableModel, modifiableCommandHistory, AddAppointmentCommand.MESSAGE_DOCTOR_CLASH_APPOINTMENT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        AddAppointmentCommand addAppointmentFirstCommand \u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                new AddAppointmentCommand(ALICE.getName(), GEORGE.getName(),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                        LocalDateTime.of(2018, 10, 17, 18, 0));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        AddAppointmentCommand addAppointmentSecondCommand \u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                new AddAppointmentCommand(BENSON.getName(), GEORGE.getName(),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                        LocalDateTime.of(2018, 10, 17, 18, 0));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertTrue(addAppointmentFirstCommand.equals(addAppointmentFirstCommand));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        AddAppointmentCommand addAppointmentFirstCommandCopy \u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                new AddAppointmentCommand(ALICE.getName(), GEORGE.getName(),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                        LocalDateTime.of(2018, 10, 17, 18, 0));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertTrue(addAppointmentFirstCommand.equals(addAppointmentFirstCommandCopy));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertFalse(addAppointmentFirstCommand.equals(1));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertFalse(addAppointmentFirstCommand.equals(null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertFalse(addAppointmentFirstCommand.equals(addAppointmentSecondCommand));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elroyhaw": 141
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        Person validPerson \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                .withName(\"Helena\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                .withPhone(\"92142122\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                .withEmail(\"helena@example.com\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                .withAddress(\"20th street\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model, commandHistory,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, commandHistory,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 48,
      "elroyhaw": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.testutil.GoogleCalendarStub;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private static final GoogleCalendarStub GOOGLE_CALENDAR_STUB \u003d new GoogleCalendarStub();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                GOOGLE_CALENDAR_STUB);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        addCommand.execute(modelStub, commandHistory, GOOGLE_CALENDAR_STUB);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void addPatient(Patient patient) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void addDoctor(Doctor doctor) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void addAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void deleteAppointment(Appointment appointment, Patient patient, Doctor doctor) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void completeAppointment(Appointment appointment, Patient patient, Doctor doctor) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        public void updateAppointment(Appointment target, Appointment editedAppointment) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public int getAppointmentCounter() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void incrementAppointmentCounter() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 43,
      "-": 205,
      "elroyhaw": 10,
      "florafong97": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddMedicalHistoryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NON_EXIST_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONDITION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.testutil.TypicalPatientsAndDoctors.getTypicalAddressBookWithPatientAndDoctor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.tag.TagContainsDoctorPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.tag.TagContainsPatientPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": " * Contains integration tests and unit tests for AddMedicalHistoryCommand."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "public class AddMedicalHistoryCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBookWithPatientAndDoctor(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public void execute_addMedicalHistory_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        final TagContainsPatientPredicate predicate \u003d new TagContainsPatientPredicate();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        Patient firstPatient \u003d (Patient) model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        Patient editedPatient \u003d new PatientBuilder(firstPatient).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        editedPatient.getMedicalHistory().addAllergy(VALID_ALLERGY);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        editedPatient.getMedicalHistory().addAllergy(VALID_CONDITION);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        AddMedicalHistoryCommand addMedicalHistoryCommand \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                new AddMedicalHistoryCommand(new Name(VALID_NAME_ALICE), VALID_ALLERGY, VALID_CONDITION);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        String expectedMessage \u003d String.format(AddMedicalHistoryCommand.MESSAGE_ADD_MEDICAL_HISTORY_SUCCESS,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                editedPatient);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        expectedModel.updatePerson(firstPatient, editedPatient);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertCommandSuccess(addMedicalHistoryCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public void execute_invalidPersonName_failure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        AddMedicalHistoryCommand addMedicalHistoryCommand \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                new AddMedicalHistoryCommand(new Name(NON_EXIST_NAME), VALID_ALLERGY, VALID_CONDITION);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertCommandFailure(addMedicalHistoryCommand,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                model, commandHistory, AddMedicalHistoryCommand.MESSAGE_INVALID_ADD_MEDICAL_HISTORY_NO_MATCH_NAME);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public void execute_duplicateAllergy_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        final TagContainsPatientPredicate predicate \u003d new TagContainsPatientPredicate();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        Patient firstPatient \u003d (Patient) model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        String duplicateAllergy \u003d new String(firstPatient.getMedicalHistory().getAllergies().get(0));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        AddMedicalHistoryCommand addMedicalHistoryCommand \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                new AddMedicalHistoryCommand(new Name(VALID_NAME_ALICE), duplicateAllergy, VALID_CONDITION);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertCommandFailure(addMedicalHistoryCommand, model, commandHistory,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                duplicateAllergy"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                        + AddMedicalHistoryCommand.MESSAGE_INVALID_ADD_MEDICAL_HISTORY_DUPLICATE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public void execute_duplicateCondition_failure() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        final TagContainsPatientPredicate predicate \u003d new TagContainsPatientPredicate();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        Patient firstPatient \u003d (Patient) model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        String duplicateCondition \u003d new String(firstPatient.getMedicalHistory().getConditions().get(0));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        AddMedicalHistoryCommand addMedicalHistoryCommand \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                new AddMedicalHistoryCommand(new Name(VALID_NAME_ALICE), VALID_ALLERGY, duplicateCondition);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertCommandFailure(addMedicalHistoryCommand, model, commandHistory,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                duplicateCondition"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                        + AddMedicalHistoryCommand.MESSAGE_INVALID_ADD_MEDICAL_HISTORY_DUPLICATE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public void execute_invalidType_failure() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        final TagContainsDoctorPredicate predicate \u003d new TagContainsDoctorPredicate();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        AddMedicalHistoryCommand addMedicalHistoryCommand \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                new AddMedicalHistoryCommand("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                        model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()).getName(),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                        VALID_ALLERGY, VALID_CONDITION);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertCommandFailure(addMedicalHistoryCommand, model, commandHistory,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                AddMedicalHistoryCommand.MESSAGE_INVALID_ADD_MEDICAL_HISTORY);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public void execute_blankInput_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        final TagContainsPatientPredicate predicate \u003d new TagContainsPatientPredicate();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        AddMedicalHistoryCommand addMedicalHistoryCommand \u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                new AddMedicalHistoryCommand(new Name(VALID_NAME_ALICE), \"\", \"\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertCommandFailure(addMedicalHistoryCommand, model, commandHistory,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                AddMedicalHistoryCommand.MESSAGE_INVALID_ADD_MEDICAL_HISTORY_NO_INFO);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        final AddMedicalHistoryCommand standardCommand \u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                new AddMedicalHistoryCommand(new Name(VALID_NAME_ALICE), VALID_ALLERGY, VALID_CONDITION);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        AddMedicalHistoryCommand commandWithSameValues \u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                new AddMedicalHistoryCommand(new Name(VALID_NAME_ALICE), VALID_ALLERGY, VALID_CONDITION);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertFalse(standardCommand.equals("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                new AddMedicalHistoryCommand(new Name(VALID_NAME_BENSON), VALID_ALLERGY, VALID_CONDITION)));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertFalse(standardCommand.equals("
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                new AddMedicalHistoryCommand(new Name(VALID_NAME_ALICE), \"\", \"\")));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangYafei1998": 149
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddPrescriptionCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florafong97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_ID_SECOND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONSUMPTION_PER_DAY_VICODIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DOSAGE_VICODIN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEDICINE_NAME_VICODIN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.testutil.TypicalPatientsAndDoctorsWithAppt.getTypicalAddressBookWithPatientAndDoctorWithAppt;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.Prescription;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.testutil.AppointmentBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.testutil.DoctorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.testutil.PrescriptionBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "florafong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "florafong97"
        },
        "content": " * Contains Integration tests and unit tests for AddPrescriptionCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florafong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "florafong97"
        },
        "content": "public class AddPrescriptionCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBookWithPatientAndDoctorWithAppt(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public void execute_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Appointment firstAppointment \u003d model.getFilteredAppointmentList().get(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Prescription toAdd \u003d new PrescriptionBuilder().withAppointmentId(firstAppointment.getAppointmentId()).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Appointment editedAppointment \u003d new AppointmentBuilder(firstAppointment).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        editedAppointment.getPrescriptions().add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        List\u003cPerson\u003e personList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Doctor doctorToEdit \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Patient patientToEdit \u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        for (Person person : personList) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            if (person instanceof Doctor) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                if (firstAppointment.getDoctor().equals(person.getName().toString())) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                    doctorToEdit \u003d (Doctor) person;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            if (person instanceof Patient) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                if (firstAppointment.getPatient().equals(person.getName().toString())) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                    patientToEdit \u003d (Patient) person;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            if (doctorToEdit !\u003d null \u0026\u0026 patientToEdit !\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Patient editedPatient \u003d new PatientBuilder(patientToEdit).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        editedPatient.setAppointment(firstAppointment, editedAppointment);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Doctor editedDoctor \u003d new DoctorBuilder(doctorToEdit).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        editedDoctor.setAppointment(firstAppointment, editedAppointment);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        AddPrescriptionCommand addPrescriptionCommand \u003d new AddPrescriptionCommand(toAdd.getId(), toAdd);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        String expectedMessage \u003d String.format(AddPrescriptionCommand.MESSAGE_SUCCESS, toAdd.getMedicineName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        expectedModel.updateAppointment(firstAppointment, editedAppointment);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        expectedModel.updatePerson(patientToEdit, editedPatient);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        expectedModel.updatePerson(doctorToEdit, editedDoctor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertCommandSuccess(addPrescriptionCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public void execute_duplicatePrescriptionUnfilteredList_failure() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Appointment appointmentInList \u003d model.getAddressBook().getAppointmentList().get(0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Prescription toAdd \u003d new PrescriptionBuilder().withAppointmentId(appointmentInList.getAppointmentId()).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        appointmentInList.addPrescription(toAdd);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        AddPrescriptionCommand addPrescriptionCommand \u003d new AddPrescriptionCommand(toAdd.getId(), toAdd);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertCommandFailure(addPrescriptionCommand, model, commandHistory,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                addPrescriptionCommand.MESSAGE_DUPLICATE_PRESCRIPTION);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public void execute_invalidAppointmentId_failure() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        int outOfBoundsIndex \u003d 1000000;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Prescription prescriptionWithOutOfBoundIndex \u003d new PrescriptionBuilder()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                .withAppointmentId(outOfBoundsIndex).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        AddPrescriptionCommand addPrescriptionCommand \u003d new AddPrescriptionCommand(outOfBoundsIndex,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                prescriptionWithOutOfBoundIndex);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertCommandFailure(addPrescriptionCommand, model, commandHistory,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                addPrescriptionCommand.MESSAGE_APPOINTENT_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Prescription toAdd \u003d new PrescriptionBuilder().build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        final AddPrescriptionCommand standardCommand \u003d new AddPrescriptionCommand(toAdd.getId(), toAdd);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        AddPrescriptionCommand commandWithSameValues \u003d new AddPrescriptionCommand(toAdd.getId(), toAdd);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertFalse(standardCommand.equals(new FilterDoctorCommand()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        //different values -\u003e returns false"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Prescription other \u003d new PrescriptionBuilder()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                .withAppointmentId(VALID_APPOINTMENT_ID_SECOND)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                .withMedicineName(VALID_MEDICINE_NAME_VICODIN)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                .withDosage(VALID_DOSAGE_VICODIN)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                .withConsumptionPerDay(VALID_CONSUMPTION_PER_DAY_VICODIN).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertFalse(standardCommand.equals(other));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "florafong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florafong97": 139
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONSUMPTION_PER_DAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOSAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICINE_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.testutil.GoogleCalendarStub;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String VALID_TAG_PATIENT \u003d \"Patient\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String VALID_REMARK_AMY \u003d \"Likes coffee\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String VALID_REMARK_BOB \u003d \"Likes tea\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String VALID_ALLERGY \u003d \"milk\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String VALID_CONDITION \u003d \"healthy\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String VALID_ALLERGY_TO_DELETE \u003d \"egg\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String VALID_CONDITION_TO_DELETE \u003d \"sub-health\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String VALID_NAME_ALICE \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String VALID_NAME_BENSON \u003d \"Benson Meier\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String PATIENT_NAME_DESC_AMY \u003d \" \" + PREFIX_PATIENT_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String PATIENT_NAME_DESC_BOB \u003d \" \" + PREFIX_PATIENT_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String REMARK_DESC_AMY \u003d \" \" + PREFIX_REMARK + VALID_REMARK_AMY;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String REMARK_DESC_BOB \u003d \" \" + PREFIX_REMARK + VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String INVALID_PATIENT_NAME_DESC \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            \" \" + PREFIX_PATIENT_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final int VALID_APPOINTMENT_ID_FIRST \u003d 10000;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final int VALID_APPOINTMENT_ID_SECOND \u003d 10001;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String VALID_MEDICINE_NAME_PARACETAMOL \u003d \"Paracetamol\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String VALID_MEDICINE_NAME_VICODIN \u003d \"Vicodin\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String VALID_DOSAGE_PARACETAMOL \u003d \"2\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String VALID_DOSAGE_VICODIN \u003d \"1\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String VALID_CONSUMPTION_PER_DAY_PARACETAMOL \u003d \"3\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String VALID_CONSUMPTION_PER_DAY_VICODIN \u003d \"2\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String APPOINTMENT_ID_DESC_FIRST \u003d \" \" + PREFIX_INDEX + VALID_APPOINTMENT_ID_FIRST;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String APPOINTMENT_ID_DESC_SECOND \u003d \" \" + PREFIX_INDEX + VALID_APPOINTMENT_ID_SECOND;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String MEDICINE_NAME_DESC_PARACETAMOL \u003d \" \" + PREFIX_MEDICINE_NAME"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            + VALID_MEDICINE_NAME_PARACETAMOL;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String MEDICINE_NAME_DESC_VICODIN \u003d \" \" + PREFIX_MEDICINE_NAME"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            + VALID_MEDICINE_NAME_VICODIN;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String DOSAGE_DESC_PARACETAMOL \u003d \" \" + PREFIX_DOSAGE + VALID_DOSAGE_PARACETAMOL;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String DOSAGE_DESC_VICODIN \u003d \" \" + PREFIX_DOSAGE + VALID_DOSAGE_VICODIN;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String CONSUMPTION_PER_DAY_DESC_PARACETAMOL \u003d \" \" + PREFIX_CONSUMPTION_PER_DAY"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            + VALID_CONSUMPTION_PER_DAY_PARACETAMOL;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String CONSUMPTION_PER_DAY_DESC_VICODIN \u003d \" \" + PREFIX_CONSUMPTION_PER_DAY"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            + VALID_CONSUMPTION_PER_DAY_VICODIN;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String INVALID_APPOINTMENT_ID_DESC \u003d \" \" + PREFIX_INDEX + \"$\"; //\u0027$\u0027 not allowed"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String INVALID_MEDICINE_NAME_DESC \u003d \" \" + PREFIX_MEDICINE_NAME + \"P@n@dol\"; // \u0027@\u0027 not allowed"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String INVALID_DOSAGE_DESC \u003d \" \" + PREFIX_DOSAGE + \"2#\"; // \u0027#\u0027 not allowed"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String INVALID_CONSUMPTION_PER_DAY_DESC \u003d \" \" + PREFIX_CONSUMPTION_PER_DAY + \"-4\"; // \u003c 0"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String VALID_DOCTOR_JOHN \u003d \"John Doe\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final LocalDateTime VALID_DATE_TIME \u003d LocalDateTime.of("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            2018, 5, 12, 14, 30);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String NON_EXIST_ALLERGY \u003d \"non_exist_allergy\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String NON_EXIST_CONDITION \u003d \"non_exist_condition\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String NON_EXIST_NAME \u003d \"non exist name\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public static final GoogleCalendarStub GOOGLE_CALENDAR_STUB;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        GOOGLE_CALENDAR_STUB \u003d new GoogleCalendarStub();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                                            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory, GOOGLE_CALENDAR_STUB);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book and the filtered person list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                                            String expectedMessage) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            command.execute(actualModel, actualCommandHistory, GOOGLE_CALENDAR_STUB);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangYafei1998": 11,
      "giamjuxian": 5,
      "-": 138,
      "florafong97": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteAppointmentCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.testutil.TypicalPatientsAndDoctors.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.testutil.TypicalPatientsAndDoctors.HELENA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.testutil.TypicalPatientsAndDoctors.getTypicalAddressBookWithPatientAndDoctor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " * Contains integration tests and unit tests for DeleteAppointmentCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "public class DeleteAppointmentCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBookWithPatientAndDoctor(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public void execute_deleteAppointment_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // add appointment into expectedModel and actualModel first"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        Appointment appointment \u003d new Appointment(10000, HELENA.getName().toString(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                CARL.getName().toString(), LocalDateTime.of(2018, 10, 17, 18, 0));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        expectedModel.addAppointment(appointment);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        expectedModel.incrementAppointmentCounter();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        model.addAppointment(appointment);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        model.incrementAppointmentCounter();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // delete"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        expectedModel.deleteAppointment(appointment, CARL, HELENA);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        CARL.addUpcomingAppointment(appointment);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        HELENA.addUpcomingAppointment(appointment);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        DeleteAppointmentCommand deleteAppointmentCommand \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                new DeleteAppointmentCommand(appointment.getAppointmentId());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        String expectedMessage \u003d DeleteAppointmentCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertCommandSuccess(deleteAppointmentCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public void execute_invalidAppointment_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        DeleteAppointmentCommand deleteAppointmentCommand \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                new DeleteAppointmentCommand(1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertCommandFailure(deleteAppointmentCommand,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                model, commandHistory, deleteAppointmentCommand.MESSAGE_INVALID_APPOINTMENT_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        DeleteAppointmentCommand deleteAppointmentFirstCommand \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                new DeleteAppointmentCommand(10000);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        DeleteAppointmentCommand deleteAppointmentSecondCommand \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                new DeleteAppointmentCommand(10001);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertTrue(deleteAppointmentFirstCommand.equals(deleteAppointmentFirstCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        DeleteAppointmentCommand deleteAppointmentFirstCommandCopy \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                new DeleteAppointmentCommand(10000);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertTrue(deleteAppointmentFirstCommand.equals(deleteAppointmentFirstCommandCopy));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertFalse(deleteAppointmentFirstCommand.equals(\"ABC\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertFalse(deleteAppointmentFirstCommand.equals(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertFalse(deleteAppointmentFirstCommand.equals(deleteAppointmentSecondCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elroyhaw": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteMedicalHistoryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NON_EXIST_ALLERGY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NON_EXIST_CONDITION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NON_EXIST_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_TO_DELETE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONDITION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONDITION_TO_DELETE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BENSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.testutil.TypicalPatientsAndDoctors.getTypicalAddressBookWithPatientAndDoctor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.tag.TagContainsDoctorPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.tag.TagContainsPatientPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": " * Contains integration tests and unit tests for DeleteMedicalHistoryCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "public class DeleteMedicalHistoryCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBookWithPatientAndDoctor(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public void execute_deleteMedicalHistory_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        final TagContainsPatientPredicate predicate \u003d new TagContainsPatientPredicate();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        Patient firstPatient \u003d (Patient) model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        Patient editedPatient \u003d new PatientBuilder(firstPatient).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        editedPatient.getMedicalHistory().getAllergies().remove(VALID_ALLERGY_TO_DELETE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        editedPatient.getMedicalHistory().getConditions().remove(VALID_CONDITION_TO_DELETE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        DeleteMedicalHistoryCommand deleteMedicalHistoryCommand \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                new DeleteMedicalHistoryCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                        new Name(VALID_NAME_ALICE), VALID_ALLERGY_TO_DELETE, VALID_CONDITION_TO_DELETE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteMedicalHistoryCommand.MESSAGE_DELETE_MEDICAL_HISTORY_SUCCESS,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                editedPatient);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        expectedModel.updatePerson(firstPatient, editedPatient);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertCommandSuccess(deleteMedicalHistoryCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public void execute_invalidPersonName_failure() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        DeleteMedicalHistoryCommand deleteMedicalHistoryCommand \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                new DeleteMedicalHistoryCommand(new Name(NON_EXIST_NAME), VALID_ALLERGY, VALID_CONDITION);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertCommandFailure(deleteMedicalHistoryCommand,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                model, commandHistory, DeleteMedicalHistoryCommand"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                        .MESSAGE_INVALID_DELETE_MEDICAL_HISTORY_NO_MATCH_NAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public void execute_invalidAllergy_failure() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        final TagContainsPatientPredicate predicate \u003d new TagContainsPatientPredicate();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        DeleteMedicalHistoryCommand deleteMedicalHistoryCommand \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                new DeleteMedicalHistoryCommand(new Name(VALID_NAME_ALICE), NON_EXIST_ALLERGY, \"\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertCommandFailure(deleteMedicalHistoryCommand, model, commandHistory,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                DeleteMedicalHistoryCommand.MESSAGE_INVALID_DELETE_MEDICAL_HISTORY_NO_ALLERGY"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                        + NON_EXIST_ALLERGY);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public void execute_invalidCondition_failure() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        final TagContainsPatientPredicate predicate \u003d new TagContainsPatientPredicate();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        DeleteMedicalHistoryCommand deleteMedicalHistoryCommand \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                new DeleteMedicalHistoryCommand(new Name(VALID_NAME_ALICE), \"\", NON_EXIST_CONDITION);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertCommandFailure(deleteMedicalHistoryCommand, model, commandHistory,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                DeleteMedicalHistoryCommand.MESSAGE_INVALID_DELETE_MEDICAL_HISTORY_NO_CONDITION"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                        + NON_EXIST_CONDITION);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public void execute_invalidType_failure() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        final TagContainsDoctorPredicate predicate \u003d new TagContainsDoctorPredicate();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        DeleteMedicalHistoryCommand deleteMedicalHistoryCommand \u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                new DeleteMedicalHistoryCommand("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                        model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()).getName(),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                        VALID_ALLERGY, VALID_CONDITION);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertCommandFailure(deleteMedicalHistoryCommand, model, commandHistory,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                DeleteMedicalHistoryCommand.MESSAGE_INVALID_DELETE_MEDICAL_HISTORY_WRONG_TYPE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public void execute_blankInput_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        final TagContainsPatientPredicate predicate \u003d new TagContainsPatientPredicate();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        DeleteMedicalHistoryCommand deleteMedicalHistoryCommand \u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                new DeleteMedicalHistoryCommand(new Name(VALID_NAME_ALICE), \"\", \"\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertCommandFailure(deleteMedicalHistoryCommand, model, commandHistory,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                DeleteMedicalHistoryCommand.MESSAGE_INVALID_DELETE_MEDICAL_HISTORY_NO_INFO);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        final DeleteMedicalHistoryCommand standardCommand \u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                new DeleteMedicalHistoryCommand(new Name(VALID_NAME_ALICE), VALID_ALLERGY, VALID_CONDITION);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        DeleteMedicalHistoryCommand commandWithSameValues \u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                new DeleteMedicalHistoryCommand(new Name(VALID_NAME_ALICE), VALID_ALLERGY, VALID_CONDITION);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertFalse(standardCommand.equals("
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                new DeleteMedicalHistoryCommand(new Name(VALID_NAME_BENSON), VALID_ALLERGY, VALID_CONDITION)));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertFalse(standardCommand.equals("
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                new DeleteMedicalHistoryCommand(new Name(VALID_NAME_ALICE), \"\", \"\")));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangYafei1998": 152
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeletePersonCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.testutil.TypicalPatientsAndDoctors.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.testutil.TypicalPatientsAndDoctors.BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.testutil.TypicalPatientsAndDoctors.FIONA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.testutil.TypicalPatientsAndDoctors.GEORGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.testutil.TypicalPatientsAndDoctors.getTypicalAddressBookWithPatientAndDoctor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.testutil.GoogleCalendarStub;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "public class DeletePersonCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private static final GoogleCalendarStub GOOGLE_CALENDAR_STUB \u003d new GoogleCalendarStub();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBookWithPatientAndDoctor(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public void execute_validPatient_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        Patient patientToDelete \u003d ALICE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        DeletePatientCommand deletePatientCommand \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                new DeletePatientCommand(patientToDelete.getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        String expectedMessage \u003d String.format(DeletePersonCommand.MESSAGE_DELETE_PERSON_SUCCESS, patientToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        expectedModel.deletePerson(patientToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertCommandSuccess(deletePatientCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public void execute_invalidPatient_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertCommandFailure(new DeletePatientCommand(new Name(\"JASKLFJA12412445\")),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                model, commandHistory, String.format(DeletePatientCommand.MESSAGE_INVALID_DELETE_PERSON, \"Patient\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // not patient"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertCommandFailure(new DeletePatientCommand(GEORGE.getName()),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                model, commandHistory, String.format(DeletePatientCommand.MESSAGE_INVALID_DELETE_PERSON, \"Patient\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public void execute_validDoctor_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        Doctor doctorToDelete \u003d GEORGE;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        DeleteDoctorCommand deleteDoctorCommand \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                new DeleteDoctorCommand(doctorToDelete.getName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        String expectedMessage \u003d String.format(DeletePersonCommand.MESSAGE_DELETE_PERSON_SUCCESS, doctorToDelete);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        expectedModel.deletePerson(doctorToDelete);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertCommandSuccess(deleteDoctorCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public void execute_invalidDoctor_throwsCommandException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertCommandFailure(new DeleteDoctorCommand(new Name(\"JASKLFJA12412445\")),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                model, commandHistory, String.format(DeleteDoctorCommand.MESSAGE_INVALID_DELETE_PERSON, \"Doctor\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // not doctor"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertCommandFailure(new DeleteDoctorCommand(ALICE.getName()),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                model, commandHistory, String.format(DeleteDoctorCommand.MESSAGE_INVALID_DELETE_PERSON, \"Doctor\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public void executeUndoRedo_validPatient_success() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        Patient patientToDelete \u003d ALICE;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        DeletePatientCommand deletePatientCommand \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                new DeletePatientCommand(patientToDelete.getName());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        expectedModel.deletePerson(patientToDelete);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // delete -\u003e first person deleted"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        deletePatientCommand.execute(model, commandHistory, GOOGLE_CALENDAR_STUB);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // redo -\u003e same first person deleted again"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public void executeUndoRedo_validDoctor_success() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        Doctor doctorToDelete \u003d GEORGE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        DeleteDoctorCommand deleteDoctorCommand \u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                new DeleteDoctorCommand(doctorToDelete.getName());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        expectedModel.deletePerson(doctorToDelete);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // delete -\u003e first person deleted"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        deleteDoctorCommand.execute(model, commandHistory, GOOGLE_CALENDAR_STUB);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // redo -\u003e same first person deleted again"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public void executeUndoRedo_invalidPatient_failure() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertCommandFailure(new DeletePatientCommand(new Name(\"JASKLFJA12412445\")),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                model, commandHistory, String.format(DeletePatientCommand.MESSAGE_INVALID_DELETE_PERSON, \"Patient\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public void executeUndoRedo_invalidDoctor_failure() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertCommandFailure(new DeleteDoctorCommand(new Name(\"JASKLFJA12412445\")),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                model, commandHistory, String.format(DeleteDoctorCommand.MESSAGE_INVALID_DELETE_PERSON, \"Doctor\"));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        DeletePatientCommand deleteFirstCommand \u003d new DeletePatientCommand(ALICE.getName());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        DeletePatientCommand deleteSecondCommand \u003d new DeletePatientCommand(BENSON.getName());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        DeleteDoctorCommand deleteThirdCommand \u003d new DeleteDoctorCommand(FIONA.getName());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        DeleteDoctorCommand deleteFourthCommand \u003d new DeleteDoctorCommand(GEORGE.getName());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertTrue(deleteThirdCommand.equals(deleteThirdCommand));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        DeletePatientCommand deleteFirstCommandCopy \u003d new DeletePatientCommand(ALICE.getName());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        DeleteDoctorCommand deleteThirdCommandCopy \u003d new DeleteDoctorCommand(FIONA.getName());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertTrue(deleteThirdCommandCopy.equals(deleteThirdCommandCopy));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertFalse(deleteThirdCommand.equals(1));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertFalse(deleteThirdCommand.equals(null));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertFalse(deleteThirdCommand.equals(deleteFourthCommand));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 4,
      "elroyhaw": 175
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeletePrescriptionCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florafong97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_ID_SECOND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONSUMPTION_PER_DAY_VICODIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DOSAGE_VICODIN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEDICINE_NAME_VICODIN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.testutil.TypicalPatientsAndDoctorsWithAppt.getTypicalAddressBookWithPatientAndDoctorWithAppt;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.Prescription;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.testutil.AppointmentBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.testutil.DoctorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.testutil.PrescriptionBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "florafong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "florafong97"
        },
        "content": " * Contains Integration tests and unit tests for DeletePrescriptionCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florafong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "florafong97"
        },
        "content": "public class DeletePrescriptionCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBookWithPatientAndDoctorWithAppt(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public void execute_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Appointment firstAppointment \u003d model.getFilteredAppointmentList().get(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Prescription toDelete \u003d firstAppointment.getPrescriptions().get(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Appointment editedAppointment \u003d new AppointmentBuilder(firstAppointment).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        editedAppointment.deletePrescription(toDelete.getMedicineName().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        List\u003cPerson\u003e personList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Doctor doctorToEdit \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Patient patientToEdit \u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        for (Person person : personList) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            if (person instanceof Doctor) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                if (firstAppointment.getDoctor().equals(person.getName().toString())) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                    doctorToEdit \u003d (Doctor) person;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            if (person instanceof Patient) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                if (firstAppointment.getPatient().equals(person.getName().toString())) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                    patientToEdit \u003d (Patient) person;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            if (doctorToEdit !\u003d null \u0026\u0026 patientToEdit !\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Patient editedPatient \u003d new PatientBuilder(patientToEdit).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        editedPatient.setAppointment(firstAppointment, editedAppointment);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Doctor editedDoctor \u003d new DoctorBuilder(doctorToEdit).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        editedDoctor.setAppointment(firstAppointment, editedAppointment);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        DeletePrescriptionCommand deletePrescriptionCommand \u003d new DeletePrescriptionCommand(toDelete.getId(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                toDelete.getMedicineName());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        String expectedMessage \u003d String.format(DeletePrescriptionCommand.MESSAGE_DELETE_PRESCRIPTION_SUCCESS,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                toDelete.getMedicineName());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        expectedModel.updateAppointment(firstAppointment, editedAppointment);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        expectedModel.updatePerson(patientToEdit, editedPatient);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        expectedModel.updatePerson(doctorToEdit, editedDoctor);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertCommandSuccess(deletePrescriptionCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public void execute_prescriptionDoesNotExist_failure() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Appointment appointmentInList \u003d model.getFilteredAppointmentList().get(0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Prescription toDelete \u003d new PrescriptionBuilder()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                .withMedicineName(\"invalid name\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                .withAppointmentId(appointmentInList.getAppointmentId()).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        DeletePrescriptionCommand deletePrescriptionCommand \u003d new DeletePrescriptionCommand(toDelete.getId(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                toDelete.getMedicineName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertCommandFailure(deletePrescriptionCommand, model, commandHistory,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                deletePrescriptionCommand.MESSAGE_INVALID_DELETE_PRESCRIPTION);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public void execute_invalidAppointmentId_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        int outOfBoundsIndex \u003d 1000000;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Prescription toDelete \u003d new PrescriptionBuilder().withAppointmentId(outOfBoundsIndex).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        DeletePrescriptionCommand deletePrescriptionCommand \u003d new DeletePrescriptionCommand(outOfBoundsIndex,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                toDelete.getMedicineName());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertCommandFailure(deletePrescriptionCommand, model, commandHistory,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                deletePrescriptionCommand.MESSAGE_APPOINTMENT_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Prescription toDelete \u003d new PrescriptionBuilder().build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        final DeletePrescriptionCommand standardCommand \u003d new DeletePrescriptionCommand(toDelete.getId(),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                toDelete.getMedicineName());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        DeletePrescriptionCommand commandWithSameValues \u003d new DeletePrescriptionCommand(toDelete.getId(),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                toDelete.getMedicineName());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertFalse(standardCommand.equals(new FilterDoctorCommand()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Prescription other \u003d new PrescriptionBuilder()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                .withAppointmentId(VALID_APPOINTMENT_ID_SECOND)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                .withMedicineName(VALID_MEDICINE_NAME_VICODIN)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                .withDosage(VALID_DOSAGE_VICODIN)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                .withConsumptionPerDay(VALID_CONSUMPTION_PER_DAY_VICODIN).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertFalse(standardCommand.equals(other));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "florafong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florafong97": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.testutil.GoogleCalendarStub;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private static final GoogleCalendarStub GOOGLE_CALENDAR_STUB \u003d new GoogleCalendarStub();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().withRemark(\"\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e first person edited"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        editCommand.execute(model, commandHistory, GOOGLE_CALENDAR_STUB);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        //KIV"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        //assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person edited again"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        //assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 3,
      "-": 211,
      "florafong97": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.testutil.GoogleCalendarStub;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private static final GoogleCalendarStub GOOGLE_CALENDAR_STUB \u003d new GoogleCalendarStub();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        CommandResult result \u003d new ExitCommand().execute(model, commandHistory, GOOGLE_CALENDAR_STUB);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(MESSAGE_EXIT_ACKNOWLEDGEMENT, result.feedbackToUser);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 4,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FilterDoctorCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.testutil.TypicalPatientsAndDoctors.getTypicalAddressBookWithPatientAndDoctor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.tag.TagContainsDoctorPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.tag.TagContainsPatientPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "public class FilterDoctorCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBookWithPatientAndDoctor(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public void filterMultipleDoctors() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        FilterDoctorCommand filterDoctorCommand \u003d new FilterDoctorCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        final TagContainsDoctorPredicate predicate \u003d new TagContainsDoctorPredicate();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertCommandSuccess(filterDoctorCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public void filterZeroDoctor() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        final TagContainsPatientPredicate predicate \u003d new TagContainsPatientPredicate();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        FilterDoctorCommand filterDoctorCommand \u003d new FilterDoctorCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        final TagContainsDoctorPredicate predicate2 \u003d new TagContainsDoctorPredicate();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertCommandSuccess(filterDoctorCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        final FilterDoctorCommand standardCommand \u003d new FilterDoctorCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangYafei1998": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FilterPatientCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.testutil.TypicalPatientsAndDoctors.getTypicalAddressBookWithPatientAndDoctor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.tag.TagContainsDoctorPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.tag.TagContainsPatientPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "public class FilterPatientCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBookWithPatientAndDoctor(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public void filterMultiplePatients() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        FilterPatientCommand filterPatientCommand \u003d new FilterPatientCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        final TagContainsPatientPredicate predicate \u003d new TagContainsPatientPredicate();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertCommandSuccess(filterPatientCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public void filterZeroPatient() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        final TagContainsDoctorPredicate predicate \u003d new TagContainsDoctorPredicate();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        FilterPatientCommand filterPatientCommand \u003d new FilterPatientCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        final TagContainsPatientPredicate predicate2 \u003d new TagContainsPatientPredicate();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertCommandSuccess(filterPatientCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        final FilterPatientCommand standardCommand \u003d new FilterPatientCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangYafei1998": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RegisterDoctorCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.testutil.DoctorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code RegisterDoctorCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "public class RegisterDoctorCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void execute_newDoctor_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        Doctor validDoctor \u003d new DoctorBuilder()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                .withName(\"Helena\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                .withPhone(\"92142122\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                .withEmail(\"helena@example.com\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                .withAddress(\"20th street\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        expectedModel.addDoctor(validDoctor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertCommandSuccess(new RegisterDoctorCommand(validDoctor), model, commandHistory,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                String.format(RegisterDoctorCommand.MESSAGE_SUCCESS, validDoctor), expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void execute_duplicateDoctor_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Doctor validDoctor \u003d new DoctorBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertCommandFailure(new RegisterDoctorCommand(validDoctor), model, commandHistory,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                RegisterDoctorCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 48,
      "elroyhaw": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RegisterDoctorCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.testutil.DoctorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.testutil.GoogleCalendarStub;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "class RegisterDoctorCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private static final GoogleCalendarStub GOOGLE_CALENDAR_STUB \u003d new GoogleCalendarStub();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void constructor_nullDoctor_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        new RegisterDoctorCommand(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        RegisterDoctorCommandTest.ModelStubAcceptingDoctorAdded modelStub \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                new RegisterDoctorCommandTest.ModelStubAcceptingDoctorAdded();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Doctor validDoctor \u003d new DoctorBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        CommandResult commandResult \u003d new RegisterDoctorCommand(validDoctor).execute(modelStub, commandHistory,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                GOOGLE_CALENDAR_STUB);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validDoctor), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertEquals(Arrays.asList(validDoctor), modelStub.doctorsAdded);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Doctor validDoctor \u003d new DoctorBuilder().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        RegisterDoctorCommand registerDoctorCommand \u003d new RegisterDoctorCommand(validDoctor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        RegisterDoctorCommandTest.ModelStub modelStub \u003d new RegisterDoctorCommandTest.ModelStubWithDoctor(validDoctor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        registerDoctorCommand.execute(modelStub, commandHistory, GOOGLE_CALENDAR_STUB);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Doctor alice \u003d new DoctorBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Doctor bob \u003d new DoctorBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        RegisterDoctorCommand registerDoctorAliceCommand \u003d new RegisterDoctorCommand(alice);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        RegisterDoctorCommand registerDoctorBobCommand \u003d new RegisterDoctorCommand(bob);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(registerDoctorAliceCommand.equals(registerDoctorAliceCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        RegisterDoctorCommand registerDoctorAliceCommandCopy \u003d new RegisterDoctorCommand(alice);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(registerDoctorAliceCommand.equals(registerDoctorAliceCommandCopy));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(registerDoctorAliceCommand.equals(1));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(registerDoctorAliceCommand.equals(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(registerDoctorAliceCommand.equals(registerDoctorBobCommand));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void addPatient(Patient patient) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void addDoctor(Doctor doctor) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void addAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void deleteAppointment(Appointment appointment, Patient patient, Doctor doctor) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void completeAppointment(Appointment appointment, Patient patient, Doctor doctor) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void updateAppointment(Appointment target, Appointment editedAppointment) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public int getAppointmentCounter() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void incrementAppointmentCounter() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private class ModelStubWithDoctor extends RegisterDoctorCommandTest.ModelStub {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        private final Doctor doctor;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        ModelStubWithDoctor(Doctor doctor) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            requireNonNull(doctor);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            this.doctor \u003d doctor;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            return this.doctor.isSamePerson(person);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private class ModelStubAcceptingDoctorAdded extends RegisterDoctorCommandTest.ModelStub {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        final ArrayList\u003cDoctor\u003e doctorsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            return doctorsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void addDoctor(Doctor doctor) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            requireNonNull(doctor);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            doctorsAdded.add(doctor);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 265
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RegisterPatientCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code RegisterPatientCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "public class RegisterPatientCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void execute_newPatient_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        Patient validPatient \u003d new PatientBuilder()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                .withName(\"Helena\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                .withPhone(\"92142122\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                .withEmail(\"helena@example.com\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                .withAddress(\"20th street\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        expectedModel.addPatient(validPatient);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertCommandSuccess(new RegisterPatientCommand(validPatient), model, commandHistory,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                String.format(RegisterPatientCommand.MESSAGE_SUCCESS, validPatient), expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void execute_duplicatePatient_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Patient validPatient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertCommandFailure(new RegisterPatientCommand(validPatient), model, commandHistory,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                RegisterPatientCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 48,
      "elroyhaw": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RegisterPatientCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.testutil.GoogleCalendarStub;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "class RegisterPatientCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private static final GoogleCalendarStub GOOGLE_CALENDAR_STUB \u003d new GoogleCalendarStub();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void constructor_nullPatient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        new RegisterPatientCommand(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        RegisterPatientCommandTest.ModelStubAcceptingPatientAdded modelStub \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                new RegisterPatientCommandTest.ModelStubAcceptingPatientAdded();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Patient validPatient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        CommandResult commandResult \u003d new RegisterPatientCommand(validPatient).execute(modelStub, commandHistory,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                GOOGLE_CALENDAR_STUB);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPatient), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertEquals(Arrays.asList(validPatient), modelStub.patientsAdded);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Patient validPatient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        RegisterPatientCommand registerPatientCommand \u003d new RegisterPatientCommand(validPatient);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        RegisterPatientCommandTest.ModelStub modelStub \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                new RegisterPatientCommandTest.ModelStubWithPatient(validPatient);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        registerPatientCommand.execute(modelStub, commandHistory, GOOGLE_CALENDAR_STUB);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Patient alice \u003d new PatientBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Patient bob \u003d new PatientBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        RegisterPatientCommand registerPatientAliceCommand \u003d new RegisterPatientCommand(alice);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        RegisterPatientCommand registerPatientBobCommand \u003d new RegisterPatientCommand(bob);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(registerPatientAliceCommand.equals(registerPatientAliceCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        RegisterPatientCommand registerPatientAliceCommandCopy \u003d new RegisterPatientCommand(alice);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(registerPatientAliceCommand.equals(registerPatientAliceCommandCopy));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(registerPatientAliceCommand.equals(1));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(registerPatientAliceCommand.equals(null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(registerPatientAliceCommand.equals(registerPatientBobCommand));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void addPatient(Patient patient) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void addDoctor(Doctor doctor) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void addAppointment(Appointment appointment) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void deleteAppointment(Appointment appointment, Patient patient, Doctor doctor) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void completeAppointment(Appointment appointment, Patient patient, Doctor doctor) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void updateAppointment(Appointment target, Appointment editedAppointment) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public int getAppointmentCounter() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void incrementAppointmentCounter() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * A Model stub that contains a single patient."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private class ModelStubWithPatient extends RegisterPatientCommandTest.ModelStub {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        private final Patient patient;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        ModelStubWithPatient(Patient patient) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            requireNonNull(patient);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            this.patient \u003d patient;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            return this.patient.isSamePerson(person);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * A Model stub that always accept the patient being added."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private class ModelStubAcceptingPatientAdded extends RegisterPatientCommandTest.ModelStub {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        final ArrayList\u003cPatient\u003e patientsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            return patientsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void addPatient(Patient patient) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            requireNonNull(patient);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            patientsAdded.add(patient);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 266
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RemarkCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florafong97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.testutil.TypicalPatientsAndDoctors.getTypicalAddressBookWithPatientAndDoctor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.testutil.GoogleCalendarStub;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "florafong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florafong97"
        },
        "content": " * Contains integration tests and unit tests for RemarkCommand."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florafong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florafong97"
        },
        "content": "public class RemarkCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private static final GoogleCalendarStub GOOGLE_CALENDAR_STUB \u003d new GoogleCalendarStub();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBookWithPatientAndDoctor(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    private RemarkCommand remarkCommand \u003d new RemarkCommand(new Name(VALID_NAME_AMY), new Remark(VALID_REMARK_AMY));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public void execute_addRemarkUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(firstPerson).withRemark(VALID_REMARK_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(firstPerson.getName(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                new Remark(editedPerson.getRemark().value));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_ADD_REMARK_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        expectedModel.updatePerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertCommandSuccess(remarkCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public void execute_deleteRemarkUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(firstPerson).withRemark(\"\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(firstPerson.getName(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                new Remark(editedPerson.getRemark().value));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_DELETE_REMARK_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        expectedModel.updatePerson(firstPerson, editedPerson);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertCommandSuccess(remarkCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withRemark(VALID_REMARK_BOB).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(personInFilteredList.getName(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                new Remark(editedPerson.getRemark().value));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_ADD_REMARK_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        expectedModel.updatePerson(personInFilteredList, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertCommandSuccess(remarkCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public void execute_patientDoesNotExist_failure() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Person toEdit \u003d new PersonBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(toEdit.getName(), toEdit.getRemark());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertCommandFailure(remarkCommand, model, commandHistory, remarkCommand.MESSAGE_INVALID_PATIENT_FAILURE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personToEdit).withRemark(VALID_REMARK_BOB).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(personToEdit.getName(), new Remark(VALID_REMARK_BOB));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // remark -\u003e first person remark edited"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        remarkCommand.execute(model, commandHistory, GOOGLE_CALENDAR_STUB);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // redo -\u003e same first person edited again"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        final RemarkCommand standardCommand \u003d new RemarkCommand(new Name(VALID_NAME_AMY), new Remark(VALID_REMARK_AMY));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        RemarkCommand commandWithSameValues \u003d new RemarkCommand(new Name(VALID_NAME_AMY), new Remark(VALID_REMARK_AMY));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertFalse(standardCommand.equals(new RemarkCommand(new Name(VALID_NAME_BOB), new Remark(VALID_REMARK_AMY))));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // different remark -\u003e returns false"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertFalse(standardCommand.equals(new RemarkCommand(new Name(VALID_NAME_AMY), new Remark(VALID_REMARK_BOB))));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "florafong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 4,
      "florafong97": 144
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ViewDoctorCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.testutil.TypicalPatientsAndDoctors.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.testutil.TypicalPatientsAndDoctors.FIONA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.testutil.TypicalPatientsAndDoctors.GEORGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.testutil.TypicalPatientsAndDoctors.getTypicalAddressBookWithPatientAndDoctor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ViewDoctorCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "public class ViewDoctorCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBookWithPatientAndDoctor(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBookWithPatientAndDoctor(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public void execute_validDoctor_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        Doctor doctorToDelete \u003d GEORGE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertExecutionSuccess(doctorToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public void execute_invalidDoctor_failure() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertCommandFailure(new ViewDoctorCommand(new Name(\"JACKIE\")),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                model, commandHistory, ViewDoctorCommand.MESSAGE_INVALID_DOCTOR);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // not Doctor"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertExecutionFailure(ALICE, ViewDoctorCommand.MESSAGE_INVALID_DOCTOR);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        ViewDoctorCommand viewFirstDoctorCommand \u003d new ViewDoctorCommand(GEORGE.getName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        ViewDoctorCommand viewSecondDoctorCommand \u003d new ViewDoctorCommand(FIONA.getName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertTrue(viewFirstDoctorCommand.equals(viewFirstDoctorCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        ViewDoctorCommand viewFirstDoctorCommandCopy \u003d new ViewDoctorCommand(GEORGE.getName());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertTrue(viewFirstDoctorCommand.equals(viewFirstDoctorCommandCopy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertFalse(viewFirstDoctorCommand.equals(1));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertFalse(viewFirstDoctorCommand.equals(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertFalse(viewFirstDoctorCommand.equals(viewSecondDoctorCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Executes a {@code ViewDoctorCommand} with the given {@code name}, and checks"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * that {@code PersonPanelSelectionChangedEvent} is raised with the correct name."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private void assertExecutionSuccess(Doctor doctor) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        ViewDoctorCommand viewDoctorCommand \u003d new ViewDoctorCommand(doctor.getName());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        String expectedMessage \u003d String.format(ViewDoctorCommand.MESSAGE_SUCCESS, doctor.getName());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertCommandSuccess(viewDoctorCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        PersonPanelSelectionChangedEvent lastEvent \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                (PersonPanelSelectionChangedEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertEquals(doctor, lastEvent.getNewSelection());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Executes a {@code ViewDoctorCommand} with the given {@code name}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private void assertExecutionFailure(Person person, String expectedMessage) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        ViewDoctorCommand viewDoctorCommand \u003d new ViewDoctorCommand(person.getName());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertCommandFailure(viewDoctorCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 1,
      "elroyhaw": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ViewPatientCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.testutil.TypicalPatientsAndDoctors.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.testutil.TypicalPatientsAndDoctors.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.testutil.TypicalPatientsAndDoctors.GEORGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.testutil.TypicalPatientsAndDoctors.getTypicalAddressBookWithPatientAndDoctor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ViewPatientCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "public class ViewPatientCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBookWithPatientAndDoctor(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBookWithPatientAndDoctor(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public void execute_validPatient_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        Patient patientToDelete \u003d ALICE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertExecutionSuccess(patientToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public void execute_invalidPatient_failure() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertCommandFailure(new ViewPatientCommand(new Name(\"JASKLFJA12412445\")),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                model, commandHistory, ViewPatientCommand.MESSAGE_INVALID_PATIENT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // not patient"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertExecutionFailure(GEORGE, ViewPatientCommand.MESSAGE_INVALID_PATIENT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        ViewPatientCommand viewFirstPatientCommand \u003d new ViewPatientCommand(ALICE.getName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        ViewPatientCommand viewSecondPatientCommand \u003d new ViewPatientCommand(BENSON.getName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertTrue(viewFirstPatientCommand.equals(viewFirstPatientCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        ViewPatientCommand viewFirstPatientCommandCopy \u003d new ViewPatientCommand(ALICE.getName());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertTrue(viewFirstPatientCommand.equals(viewFirstPatientCommandCopy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertFalse(viewFirstPatientCommand.equals(1));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertFalse(viewFirstPatientCommand.equals(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertFalse(viewFirstPatientCommand.equals(viewSecondPatientCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Executes a {@code ViewPatientCommand} with the given {@code name}, and checks"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * that {@code PersonPanelSelectionChangedEvent} is raised with the correct name."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private void assertExecutionSuccess(Patient patient) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        ViewPatientCommand viewPatientCommand \u003d new ViewPatientCommand(patient.getName());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        String expectedMessage \u003d String.format(ViewPatientCommand.MESSAGE_SUCCESS, patient.getName());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertCommandSuccess(viewPatientCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        PersonPanelSelectionChangedEvent lastEvent \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                (PersonPanelSelectionChangedEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertEquals(patient, lastEvent.getNewSelection());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Executes a {@code ViewPatientCommand} with the given {@code name}, and checks that a {@co    de CommandException}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private void assertExecutionFailure(Person person, String expectedMessage) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        ViewPatientCommand viewPatientCommand \u003d new ViewPatientCommand(person.getName());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertCommandFailure(viewPatientCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elroyhaw": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withRemark(\"\").withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withRemark(\"\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withRemark(\"\").withTags().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 137,
      "florafong97": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddMedicalHistoryCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONDITION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONDITION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.logic.commands.AddMedicalHistoryCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "public class AddMedicalHistoryCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMedicalHistoryCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    private AddMedicalHistoryCommandParser parser \u003d new AddMedicalHistoryCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public void parse_fieldSpecified_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        //input is not blank for both allergy and condition"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        String userInput \u003d \" \" + PREFIX_NAME + VALID_NAME_ALICE + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                + PREFIX_ALLERGY + VALID_ALLERGY + \" \" + PREFIX_CONDITION + VALID_CONDITION;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        AddMedicalHistoryCommand expectedCommand \u003d new AddMedicalHistoryCommand("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                new Name(VALID_NAME_ALICE), VALID_ALLERGY, VALID_CONDITION);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        //input for allergy is left blank"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        userInput \u003d \" \" + PREFIX_NAME + VALID_NAME_ALICE + \" \" + PREFIX_ALLERGY + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                + PREFIX_CONDITION + VALID_CONDITION;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        expectedCommand \u003d new AddMedicalHistoryCommand(new Name(VALID_NAME_ALICE), \"\", VALID_CONDITION);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        //input for condition is left blank"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        userInput \u003d \" \" + PREFIX_NAME + VALID_NAME_ALICE + \" \" + PREFIX_ALLERGY"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                + VALID_ALLERGY + \" \" + PREFIX_CONDITION;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        expectedCommand \u003d new AddMedicalHistoryCommand(new Name(VALID_NAME_ALICE), VALID_ALLERGY, \"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        //no name specified"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                PREFIX_ALLERGY + VALID_ALLERGY + \" \" + PREFIX_CONDITION + VALID_CONDITION,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        // no name and no field specified"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertParseFailure(parser, \"some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertParseFailure(parser, \"a/Alice Pauline i/string u/string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangYafei1998": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddPrescriptionCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florafong97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.APPOINTMENT_ID_DESC_FIRST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CONSUMPTION_PER_DAY_DESC_PARACETAMOL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CONSUMPTION_PER_DAY_DESC_VICODIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DOSAGE_DESC_PARACETAMOL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DOSAGE_DESC_VICODIN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CONSUMPTION_PER_DAY_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DOSAGE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MEDICINE_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEDICINE_NAME_DESC_PARACETAMOL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEDICINE_NAME_DESC_VICODIN;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_ID_FIRST;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONSUMPTION_PER_DAY_PARACETAMOL;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DOSAGE_PARACETAMOL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEDICINE_NAME_PARACETAMOL;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.logic.commands.AddPrescriptionCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.ConsumptionPerDay;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.Dosage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.MedicineName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.Prescription;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.testutil.PrescriptionBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florafong97"
        },
        "content": "public class AddPrescriptionCommandParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String MESSAGE_INVALID_FORMAT \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            AddPrescriptionCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    private AddPrescriptionCommandParser parser \u003d new AddPrescriptionCommandParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Prescription expectedPrescription \u003d new PrescriptionBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // multiple medicine names - last medicine name accepted"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertParseSuccess(parser, VALID_APPOINTMENT_ID_FIRST + MEDICINE_NAME_DESC_VICODIN"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                        + MEDICINE_NAME_DESC_PARACETAMOL + DOSAGE_DESC_PARACETAMOL"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                        + CONSUMPTION_PER_DAY_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                new AddPrescriptionCommand(VALID_APPOINTMENT_ID_FIRST, expectedPrescription));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // multiple dosages - last dosage accepted"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertParseSuccess(parser, VALID_APPOINTMENT_ID_FIRST + MEDICINE_NAME_DESC_PARACETAMOL"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                        + DOSAGE_DESC_VICODIN + DOSAGE_DESC_PARACETAMOL + CONSUMPTION_PER_DAY_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                new AddPrescriptionCommand(VALID_APPOINTMENT_ID_FIRST, expectedPrescription));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // multiple consumption per day - last consumption per day accepted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertParseSuccess(parser, VALID_APPOINTMENT_ID_FIRST + MEDICINE_NAME_DESC_PARACETAMOL"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                        + DOSAGE_DESC_PARACETAMOL + CONSUMPTION_PER_DAY_DESC_VICODIN"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                        + CONSUMPTION_PER_DAY_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                new AddPrescriptionCommand(VALID_APPOINTMENT_ID_FIRST, expectedPrescription));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPrescriptionCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // missing appointment id"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertParseFailure(parser, MEDICINE_NAME_DESC_PARACETAMOL"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                        + DOSAGE_DESC_PARACETAMOL + CONSUMPTION_PER_DAY_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // missing medicine name prefix"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertParseFailure(parser, VALID_APPOINTMENT_ID_FIRST + VALID_MEDICINE_NAME_PARACETAMOL"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                        + DOSAGE_DESC_PARACETAMOL + CONSUMPTION_PER_DAY_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // missing dosage prefix"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertParseFailure(parser, VALID_APPOINTMENT_ID_FIRST + MEDICINE_NAME_DESC_PARACETAMOL"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                        + VALID_DOSAGE_PARACETAMOL + CONSUMPTION_PER_DAY_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // missing consumption per day prefix"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertParseFailure(parser, VALID_APPOINTMENT_ID_FIRST + MEDICINE_NAME_DESC_PARACETAMOL"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                        + DOSAGE_DESC_PARACETAMOL + VALID_CONSUMPTION_PER_DAY_PARACETAMOL,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertParseFailure(parser, VALID_APPOINTMENT_ID_FIRST + VALID_MEDICINE_NAME_PARACETAMOL"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                        + VALID_DOSAGE_PARACETAMOL + VALID_CONSUMPTION_PER_DAY_PARACETAMOL,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // invalid medicine name"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertParseFailure(parser, VALID_APPOINTMENT_ID_FIRST + INVALID_MEDICINE_NAME_DESC"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                        + DOSAGE_DESC_PARACETAMOL + CONSUMPTION_PER_DAY_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                MedicineName.MESSAGE_MEDICINE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // invalid dosage"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertParseFailure(parser, VALID_APPOINTMENT_ID_FIRST + MEDICINE_NAME_DESC_PARACETAMOL"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                + INVALID_DOSAGE_DESC + CONSUMPTION_PER_DAY_DESC_PARACETAMOL, Dosage.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // invalid consumption per day"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertParseFailure(parser, VALID_APPOINTMENT_ID_FIRST + MEDICINE_NAME_DESC_PARACETAMOL"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                + DOSAGE_DESC_PARACETAMOL + INVALID_CONSUMPTION_PER_DAY_DESC,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                ConsumptionPerDay.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertParseFailure(parser, VALID_APPOINTMENT_ID_FIRST + INVALID_MEDICINE_NAME_DESC"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                + DOSAGE_DESC_PARACETAMOL + INVALID_CONSUMPTION_PER_DAY_DESC,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                MedicineName.MESSAGE_MEDICINE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + APPOINTMENT_ID_DESC_FIRST"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                + MEDICINE_NAME_DESC_PARACETAMOL + DOSAGE_DESC_PARACETAMOL + CONSUMPTION_PER_DAY_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPrescriptionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertParseFailure(parser, \"-5 \" + MEDICINE_NAME_DESC_PARACETAMOL + DOSAGE_DESC_PARACETAMOL"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                + CONSUMPTION_PER_DAY_DESC_PARACETAMOL , MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertParseFailure(parser, \"0 \" + MEDICINE_NAME_DESC_PARACETAMOL + DOSAGE_DESC_PARACETAMOL"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                + CONSUMPTION_PER_DAY_DESC_PARACETAMOL, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "florafong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florafong97": 133
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_ID_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONSUMPTION_PER_DAY_PARACETAMOL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DOSAGE_PARACETAMOL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEDICINE_NAME_PARACETAMOL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONSUMPTION_PER_DAY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DOSAGE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICINE_NAME;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_NAME;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.testutil.TypicalPatientsAndDoctors.ALICE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.testutil.TypicalPatientsAndDoctors.GEORGE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.logic.commands.AddPrescriptionCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.logic.commands.DeleteDoctorCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.logic.commands.DeletePatientCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.logic.commands.ViewDoctorCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.logic.commands.ViewPatientCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.ConsumptionPerDay;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.Dosage;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.MedicineName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.Prescription;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Person person \u003d new PersonBuilder().withRemark(\"\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public void parseCommand_remarkCommandWord_returnsRemarkCommand() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        final Remark remark \u003d new Remark(VALID_REMARK_AMY);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        final Name name \u003d new Name(VALID_NAME_AMY);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        RemarkCommand command \u003d (RemarkCommand) parser.parseCommand(RemarkCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                + \" \" + PREFIX_PATIENT_NAME + name.toString() + \" \" + PREFIX_REMARK + remark.toString());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertEquals(new RemarkCommand(name, remark), command);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public void parseCommand_addPrescriptionCommandWord_returnsAddPrescriptionCommand() throws Exception {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        final Prescription prescription \u003d new Prescription(VALID_APPOINTMENT_ID_FIRST,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                new MedicineName(VALID_MEDICINE_NAME_PARACETAMOL),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                new Dosage(VALID_DOSAGE_PARACETAMOL),"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                new ConsumptionPerDay(VALID_CONSUMPTION_PER_DAY_PARACETAMOL));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        AddPrescriptionCommand command \u003d (AddPrescriptionCommand) parser.parseCommand("
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                AddPrescriptionCommand.COMMAND_WORD + \" \" + VALID_APPOINTMENT_ID_FIRST"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                        + \" \" + PREFIX_MEDICINE_NAME + VALID_MEDICINE_NAME_PARACETAMOL"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                        + \" \" + PREFIX_DOSAGE + VALID_DOSAGE_PARACETAMOL"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                        + \" \" + PREFIX_CONSUMPTION_PER_DAY + VALID_CONSUMPTION_PER_DAY_PARACETAMOL);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertEquals(new AddPrescriptionCommand(VALID_APPOINTMENT_ID_FIRST, prescription), command);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public void parseCommand_viewPatientCommandWord_returnsViewPatientCommand() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        ViewPatientCommand command \u003d (ViewPatientCommand) parser.parseCommand("
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                ViewPatientCommand.COMMAND_WORD + \" \" + PREFIX_NAME + ALICE.getName().fullName);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertEquals(new ViewPatientCommand(ALICE.getName()), command);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public void parseCommand_viewDoctorCommandWord_returnsViewDoctorCommand() throws Exception {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        ViewDoctorCommand command \u003d (ViewDoctorCommand) parser.parseCommand("
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                ViewDoctorCommand.COMMAND_WORD + \" \" + PREFIX_NAME + GEORGE.getName().fullName);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertEquals(new ViewDoctorCommand(GEORGE.getName()), command);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public void parseCommand_deletePatientCommandWord_returnsDeletePatientCommand() throws Exception {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        DeletePatientCommand command \u003d (DeletePatientCommand) parser.parseCommand("
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                DeletePatientCommand.COMMAND_WORD + \" \" + PREFIX_NAME + ALICE.getName().fullName);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertEquals(new DeletePatientCommand(ALICE.getName()), command);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public void parseCommand_deleteDoctorCommandWord_returnsDeleteDoctorCommand() throws Exception {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        DeleteDoctorCommand command \u003d (DeleteDoctorCommand) parser.parseCommand("
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                DeleteDoctorCommand.COMMAND_WORD + \" \" + PREFIX_NAME + GEORGE.getName().fullName);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertEquals(new DeleteDoctorCommand(GEORGE.getName()), command);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 134,
      "elroyhaw": 33,
      "florafong97": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteDoctorCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.testutil.TypicalPatientsAndDoctors.GEORGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.logic.commands.DeleteDoctorCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " * outside of the DeleteDoctorCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "public class DeleteDoctorCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private DeleteDoctorCommandParser parser \u003d new DeleteDoctorCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        String userInput \u003d \" \" + PREFIX_NAME + GEORGE.getName();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertParseSuccess(parser, userInput, new DeleteDoctorCommand(GEORGE.getName()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertParseFailure(parser, \"123\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                DeleteDoctorCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "elroyhaw": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteMedicalHistoryCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_TO_DELETE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONDITION_TO_DELETE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONDITION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.logic.commands.DeleteMedicalHistoryCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "public class DeleteMedicalHistoryCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteMedicalHistoryCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    private DeleteMedicalHistoryCommandParser parser \u003d new DeleteMedicalHistoryCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public void parse_fieldSpecified_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        //input is not blank for both allergy and condition"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        String userInput \u003d \" \" + PREFIX_NAME + VALID_NAME_ALICE + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                + PREFIX_ALLERGY + VALID_ALLERGY_TO_DELETE + \" \" + PREFIX_CONDITION + VALID_CONDITION_TO_DELETE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        DeleteMedicalHistoryCommand expectedCommand \u003d new DeleteMedicalHistoryCommand("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                new Name(VALID_NAME_ALICE), VALID_ALLERGY_TO_DELETE, VALID_CONDITION_TO_DELETE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        //input for allergy is left blank"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        userInput \u003d \" \" + PREFIX_NAME + VALID_NAME_ALICE + \" \" + PREFIX_ALLERGY + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                + PREFIX_CONDITION + VALID_CONDITION_TO_DELETE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        expectedCommand \u003d new DeleteMedicalHistoryCommand("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                new Name(VALID_NAME_ALICE), \"\", VALID_CONDITION_TO_DELETE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        //input for condition is left blank"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        userInput \u003d \" \" + PREFIX_NAME + VALID_NAME_ALICE + \" \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                + PREFIX_ALLERGY + VALID_ALLERGY_TO_DELETE + \" \" + PREFIX_CONDITION;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        expectedCommand \u003d new DeleteMedicalHistoryCommand("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                new Name(VALID_NAME_ALICE), VALID_ALLERGY_TO_DELETE, \"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        //no name specified"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                PREFIX_ALLERGY + VALID_ALLERGY_TO_DELETE + \" \" + PREFIX_CONDITION + VALID_CONDITION_TO_DELETE,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        // no name and no field specified"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertParseFailure(parser, \"alice some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        assertParseFailure(parser, \"a/Alice Pauline i/string u/string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangYafei1998": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeletePatientCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.testutil.TypicalPatientsAndDoctors.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.logic.commands.DeletePatientCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " * outside of the DeletePatientCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "public class DeletePatientCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private DeletePatientCommandParser parser \u003d new DeletePatientCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        String userInput \u003d \" \" + PREFIX_NAME + ALICE.getName();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertParseSuccess(parser, userInput, new DeletePatientCommand(ALICE.getName()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertParseFailure(parser, \"123\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                DeletePatientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elroyhaw": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeletePrescriptionCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florafong97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MEDICINE_NAME_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEDICINE_NAME_DESC_PARACETAMOL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MEDICINE_NAME_DESC_VICODIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_ID_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_ID_SECOND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MEDICINE_NAME_PARACETAMOL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.logic.commands.DeletePrescriptionCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.MedicineName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.Prescription;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.testutil.PrescriptionBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florafong97"
        },
        "content": "public class DeletePrescriptionCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String MESSAGE_INVALID_FORMAT \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            DeletePrescriptionCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    private DeletePrescriptionCommandParser parser \u003d new DeletePrescriptionCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Prescription expectedPrescription \u003d new PrescriptionBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        int expectedId \u003d expectedPrescription.getId();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        MedicineName expectedMedicineName \u003d expectedPrescription.getMedicineName();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // multiple appointment id - last id accepted"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertParseSuccess(parser, VALID_APPOINTMENT_ID_SECOND + VALID_APPOINTMENT_ID_FIRST"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                + MEDICINE_NAME_DESC_PARACETAMOL, new DeletePrescriptionCommand(expectedId, expectedMedicineName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // multiple medicine names - last medicine name accepted"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertParseSuccess(parser, VALID_APPOINTMENT_ID_FIRST + MEDICINE_NAME_DESC_VICODIN"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                + MEDICINE_NAME_DESC_PARACETAMOL, new DeletePrescriptionCommand(expectedId, expectedMedicineName));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePrescriptionCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // missing appointment id"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertParseFailure(parser, MEDICINE_NAME_DESC_PARACETAMOL,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // missing medicineName prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertParseFailure(parser, VALID_APPOINTMENT_ID_FIRST + VALID_MEDICINE_NAME_PARACETAMOL,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertParseFailure(parser, VALID_APPOINTMENT_ID_FIRST + VALID_MEDICINE_NAME_PARACETAMOL,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // invalid medicine name"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertParseFailure(parser, VALID_APPOINTMENT_ID_FIRST + INVALID_MEDICINE_NAME_DESC,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                MedicineName.MESSAGE_MEDICINE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertParseFailure(parser, \"-5 \" + MEDICINE_NAME_DESC_PARACETAMOL, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertParseFailure(parser, \"0 \" + MEDICINE_NAME_DESC_PARACETAMOL, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "florafong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florafong97": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RemarkCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florafong97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PATIENT_NAME_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PATIENT_NAME_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.REMARK_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.REMARK_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florafong97"
        },
        "content": "public class RemarkCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemarkCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    private RemarkCommandParser parser \u003d new RemarkCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public void parse_allFieldSpecified_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // multiple patient names - last patient name accepted"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertParseSuccess(parser, PATIENT_NAME_DESC_AMY + PATIENT_NAME_DESC_AMY + REMARK_DESC_AMY,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                new RemarkCommand(new Name(VALID_NAME_AMY), new Remark(VALID_REMARK_AMY)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // multiple remarks - last remark accepted"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertParseSuccess(parser, PATIENT_NAME_DESC_AMY + REMARK_DESC_BOB + REMARK_DESC_AMY,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                new RemarkCommand(new Name(VALID_NAME_AMY), new Remark(VALID_REMARK_AMY)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // no name specified"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY + REMARK_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertParseFailure(parser, INVALID_PATIENT_NAME_DESC + REMARK_DESC_AMY, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "florafong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florafong97": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ViewDoctorCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.testutil.TypicalPatientsAndDoctors.GEORGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.logic.commands.ViewDoctorCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "public class ViewDoctorCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private ViewDoctorCommandParser parser \u003d new ViewDoctorCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertParseFailure(parser, \"123\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                ViewDoctorCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public void parse_validArgs_returnsViewDoctorCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        String userInput \u003d \" \" + PREFIX_NAME + GEORGE.getName();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        ViewDoctorCommand expectedViewDoctorCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                new ViewDoctorCommand(GEORGE.getName());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedViewDoctorCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elroyhaw": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ViewPatientCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.testutil.TypicalPatientsAndDoctors.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.logic.commands.ViewPatientCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "public class ViewPatientCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private ViewPatientCommandParser parser \u003d new ViewPatientCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertParseFailure(parser, \"123\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                ViewPatientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public void parse_validArgs_returnsViewPatientCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        String userInput \u003d \" \" + PREFIX_NAME + ALICE.getName();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        ViewPatientCommand expectedViewPatientCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                new ViewPatientCommand(ALICE.getName());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedViewPatientCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elroyhaw": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.hasPerson(null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getPersonList().remove(0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        private final ObservableList\u003cAppointment\u003e appointments \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        private int appointmentCounter;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public ObservableList\u003cAppointment\u003e getAppointmentList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            return appointments;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        public int getAppointmentCounter() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            return appointmentCounter;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 15,
      "-": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/model/appointment/AppointmentTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.testutil.AppointmentBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "public class AppointmentTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void isLaterThan() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment appointmentBase \u003d new AppointmentBuilder().withDateTime(\"2018-10-30 15:00\").build();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment appointmentSameTime \u003d new AppointmentBuilder().withDateTime(\"2018-10-30 15:00\").build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment appointmentEarly \u003d new AppointmentBuilder().withDateTime(\"2018-10-30 14:00\").build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment appointmentLater \u003d new AppointmentBuilder().withDateTime(\"2018-10-30 16:00\").build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(appointmentBase.isLaterThan(appointmentEarly));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(appointmentBase.isLaterThan(appointmentSameTime));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(appointmentBase.isLaterThan(appointmentLater));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(appointmentBase.isLaterThan(appointmentBase));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void isSameAppointment() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment appointmentBase \u003d new AppointmentBuilder().withAppointmentId(10000).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment appointmentSameId \u003d new AppointmentBuilder().withAppointmentId(10000).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment appointmentDifferentId \u003d new AppointmentBuilder().withAppointmentId(10001).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(appointmentBase.isSameAppointment(appointmentBase));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(appointmentBase.isSameAppointment(appointmentSameId));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(appointmentBase.isSameAppointment(appointmentDifferentId));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void hasClassAppointment() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment appointmentBase \u003d new AppointmentBuilder().withDateTime(\"2018-10-30 12:00\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment appointmentSameTime \u003d new AppointmentBuilder().withDateTime(\"2018-10-30 12:00\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment appointmentSameTimeDiffDate \u003d new AppointmentBuilder().withDateTime(\"2018-10-31 12:00\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment appointmentStartTimeClash \u003d new AppointmentBuilder().withDateTime(\"2018-10-30 12:01\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment appointmentEndTimeClash \u003d new AppointmentBuilder().withDateTime(\"2018-10-30 11:59\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment appointmentRightAfter \u003d new AppointmentBuilder().withDateTime(\"2018-10-30 12:30\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(appointmentBase.hasClashAppointment(appointmentSameTime));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(appointmentBase.hasClashAppointment(appointmentSameTimeDiffDate));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(appointmentBase.hasClashAppointment(appointmentStartTimeClash));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(appointmentBase.hasClashAppointment(appointmentEndTimeClash));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(appointmentBase.hasClashAppointment(appointmentRightAfter));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/model/appointment/ConsumptionPerDayTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "public class ConsumptionPerDayTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new ConsumptionPerDay(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void constructor_invalidConsumptionPerDay_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        String invalidAmount \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new ConsumptionPerDay(invalidAmount));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void isValidConsumptionPerDay() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // null consumption per day"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ConsumptionPerDay.isValidConsumptionPerDay(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // invalid consumption per day"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(ConsumptionPerDay.isValidConsumptionPerDay(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(ConsumptionPerDay.isValidConsumptionPerDay(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(ConsumptionPerDay.isValidConsumptionPerDay(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(ConsumptionPerDay.isValidConsumptionPerDay(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(ConsumptionPerDay.isValidConsumptionPerDay(\"peterjack\")); // alphabets only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(ConsumptionPerDay.isValidConsumptionPerDay(\"123 123\")); // number with space"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(ConsumptionPerDay.isValidConsumptionPerDay(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(ConsumptionPerDay.isValidConsumptionPerDay(\"123412341241241234\")); // long numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/appointment/DosageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "public class DosageTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Dosage(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void constructor_invalidDosage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        String invalidAmount \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Dosage(invalidAmount));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void isValidDosage() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // null dosage"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Dosage.isValidDosage(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // invalid dosage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(Dosage.isValidDosage(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(Dosage.isValidDosage(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(Dosage.isValidDosage(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(Dosage.isValidDosage(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(Dosage.isValidDosage(\"peterjack\")); // alphabets only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(Dosage.isValidDosage(\"123 123\")); // number with space"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // valid dosage"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(Dosage.isValidDosage(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(Dosage.isValidDosage(\"123412341241241234\")); // long numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/appointment/MedicineNameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static org.junit.Assert.assertNotSame;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static org.junit.Assert.assertSame;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "public class MedicineNameTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new MedicineName(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void constructor_invalidMedicineName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        String invalidAmount \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new MedicineName(invalidAmount));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void isValidMedicineName() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // null medicine name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e MedicineName.isValidMedicineName(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // invalid medicine name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(MedicineName.isValidMedicineName(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(MedicineName.isValidMedicineName(\" \")); // spaces only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(MedicineName.isValidMedicineName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(MedicineName.isValidMedicineName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // valid medicine name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(MedicineName.isValidMedicineName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(MedicineName.isValidMedicineName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(MedicineName.isValidMedicineName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(MedicineName.isValidMedicineName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(MedicineName.isValidMedicineName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void getFullMedicineName() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        MedicineName medicineName \u003d new MedicineName(\"Test Test\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertSame(medicineName.getFullMedicineName(), \"Test Test\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertNotSame(medicineName.getFullMedicineName(), \"Testing\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/model/appointment/PrescriptionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "public class PrescriptionTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void isSamePrescription() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // Prescription prescription \u003d new Prescription()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/model/appointment/UniqueAppointmentListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "package seedu.address.model.appointment;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.testutil.AppointmentBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "public class UniqueAppointmentListTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private static final Appointment APPOINTMENT_ONE \u003d new AppointmentBuilder().build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private static final Appointment APPOINTMENT_TWO \u003d new AppointmentBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private static final Appointment APPOINTMENT_THREE \u003d new AppointmentBuilder().withAppointmentId(12345).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private final UniqueAppointmentList uniqueAppointmentList \u003d new UniqueAppointmentList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void contains_nullAppointment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        uniqueAppointmentList.contains(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void contains_appointmentNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(uniqueAppointmentList.contains(APPOINTMENT_ONE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void contains_appointmentInList_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        uniqueAppointmentList.add(APPOINTMENT_ONE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(uniqueAppointmentList.contains(APPOINTMENT_ONE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void contains_appointmentWithSameAppointmentId_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        uniqueAppointmentList.add(APPOINTMENT_ONE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment editedAppointmentOne \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                new AppointmentBuilder(APPOINTMENT_ONE).withDateTime(\"2018-10-30 21:00\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(uniqueAppointmentList.contains(editedAppointmentOne));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void add_nullAppointment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        uniqueAppointmentList.add(null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void add_duplicateAppointment_throwsDuplicateAppointmentException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        uniqueAppointmentList.add(APPOINTMENT_ONE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        thrown.expect(DuplicateAppointmentException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        uniqueAppointmentList.add(APPOINTMENT_ONE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void setAppointment_nullTargetAppointment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        uniqueAppointmentList.setAppointment(null, APPOINTMENT_ONE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void setAppointment_nullEditedAppointment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        uniqueAppointmentList.setAppointment(APPOINTMENT_ONE, null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void setAppointment_targetAppointmentNotInList_throwsAppointmentNotFoundException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        thrown.expect(AppointmentNotFoundException.class);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        uniqueAppointmentList.setAppointment(APPOINTMENT_ONE, APPOINTMENT_ONE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void setAppointment_editedAppointmentIsSameAppointment_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        uniqueAppointmentList.add(APPOINTMENT_ONE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        uniqueAppointmentList.setAppointment(APPOINTMENT_ONE, APPOINTMENT_ONE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        UniqueAppointmentList expectedUniqueAppointmentList \u003d new UniqueAppointmentList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        expectedUniqueAppointmentList.add(APPOINTMENT_ONE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertEquals(expectedUniqueAppointmentList, uniqueAppointmentList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void remove_nullAppointment_throwsNullPointerException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        uniqueAppointmentList.remove(null);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void remove_appointmentDoesNotExist_throwsAppointmentNotFoundException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        thrown.expect(AppointmentNotFoundException.class);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        uniqueAppointmentList.remove(APPOINTMENT_ONE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void remove_existingAppointment_removesAppointment() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        uniqueAppointmentList.add(APPOINTMENT_ONE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        uniqueAppointmentList.remove(APPOINTMENT_ONE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        UniqueAppointmentList expectedUniqueAppointmentList \u003d new UniqueAppointmentList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertEquals(expectedUniqueAppointmentList, uniqueAppointmentList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void setAppointments_nullUniqueAppointmentList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        uniqueAppointmentList.setAppointments((UniqueAppointmentList) null);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void setAppointments_uniqueAppointmentList_replacesOwnListWithProvidedUniqueAppointmentList() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        uniqueAppointmentList.add(APPOINTMENT_ONE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        UniqueAppointmentList expectedUniqueAppointmentList \u003d new UniqueAppointmentList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        expectedUniqueAppointmentList.add(APPOINTMENT_THREE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        uniqueAppointmentList.setAppointments(expectedUniqueAppointmentList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertEquals(expectedUniqueAppointmentList, uniqueAppointmentList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void setAppointments_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        uniqueAppointmentList.setAppointments((List\u003cAppointment\u003e) null);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void setAppointments_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        uniqueAppointmentList.add(APPOINTMENT_ONE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        List\u003cAppointment\u003e appointmentList \u003d Collections.singletonList(APPOINTMENT_THREE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        uniqueAppointmentList.setAppointments(appointmentList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        UniqueAppointmentList expectedUniqueAppointmentList \u003d new UniqueAppointmentList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        expectedUniqueAppointmentList.add(APPOINTMENT_THREE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertEquals(expectedUniqueAppointmentList, uniqueAppointmentList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void setAppointments_listWithDuplicateAppointments_throwsDuplicateAppointmentException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        List\u003cAppointment\u003e listWithDuplicateAppointments \u003d Arrays.asList(APPOINTMENT_ONE, APPOINTMENT_ONE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        thrown.expect(DuplicateAppointmentException.class);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        uniqueAppointmentList.setAppointments(listWithDuplicateAppointments);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        uniqueAppointmentList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 156
    }
  },
  {
    "path": "src/test/java/seedu/address/model/doctor/DoctorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "package seedu.address.model.doctor;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static org.junit.Assert.assertNotSame;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static org.junit.Assert.assertSame;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.appointment.Status;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.testutil.AppointmentBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.testutil.DoctorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "public class DoctorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void addUpcomingAppointment() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Doctor doctor \u003d new DoctorBuilder().build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // No appointment when first created"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(doctor.getUpcomingAppointments().isEmpty());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // Add an appointment"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment appointmentToAdd \u003d new AppointmentBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment randomAppointmentNotAdded \u003d new AppointmentBuilder().withAppointmentId(123).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        doctor.addUpcomingAppointment(appointmentToAdd);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // Upcoming Appointment no longer empty"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(doctor.getUpcomingAppointments().isEmpty());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // Appointment list contains the appointment that was added"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(doctor.getUpcomingAppointments().get(0) \u003d\u003d appointmentToAdd);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertNotSame(doctor.getUpcomingAppointments().get(0), randomAppointmentNotAdded);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void deleteUpcomingAppointment() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Doctor doctor \u003d new DoctorBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment appointmentToAdd \u003d new AppointmentBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment anotherAppointmentToAdd \u003d new AppointmentBuilder().withComments(\"Hello\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment randomAppointmentNotAdded \u003d new AppointmentBuilder().withAppointmentId(123).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        doctor.addUpcomingAppointment(appointmentToAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        doctor.deleteAppointment(appointmentToAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // Check that appointment has been removed and ArrayList is empty"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(doctor.getUpcomingAppointments().isEmpty());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        doctor.addUpcomingAppointment(appointmentToAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        doctor.addUpcomingAppointment(anotherAppointmentToAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        doctor.deleteAppointment(appointmentToAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // Check that appointment has been removed but ArrayList not empty"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(doctor.getUpcomingAppointments().isEmpty());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertSame(doctor.getUpcomingAppointments().get(0), anotherAppointmentToAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // Delete random appointment"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        doctor.deleteAppointment(randomAppointmentNotAdded);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // Check that appointment is not removed"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(doctor.getUpcomingAppointments().isEmpty());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertSame(doctor.getUpcomingAppointments().get(0), anotherAppointmentToAdd);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void completeAppointment() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Doctor doctor \u003d new DoctorBuilder().build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment appointmentToAdd \u003d new AppointmentBuilder().build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment anotherAppointmentToAdd \u003d new AppointmentBuilder().withComments(\"Hello\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment moreAppointmentNotAdded \u003d new AppointmentBuilder().withAppointmentId(123).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        doctor.addUpcomingAppointment(appointmentToAdd);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        doctor.addUpcomingAppointment(anotherAppointmentToAdd);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        doctor.addUpcomingAppointment(moreAppointmentNotAdded);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        doctor.completeUpcomingAppointment(appointmentToAdd);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        for (Appointment app : doctor.getUpcomingAppointments()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            assertFalse(app.getStatus().equals(Status.COMPLETED));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        doctor.completeUpcomingAppointment(anotherAppointmentToAdd);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        for (Appointment app : doctor.getUpcomingAppointments()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            assertFalse(app.getStatus().equals(Status.COMPLETED));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void hasAppointment() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Doctor doctor \u003d new DoctorBuilder().build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment appointmentToAdd \u003d new AppointmentBuilder().withAppointmentId(12345).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment appointmentNotToAdd \u003d new AppointmentBuilder().withAppointmentId(123).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        doctor.addUpcomingAppointment(appointmentToAdd);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(doctor.hasAppointment(appointmentToAdd.getAppointmentId()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(doctor.hasAppointment(appointmentNotToAdd.getAppointmentId()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void hasClashForAppointment() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Doctor doctor \u003d new DoctorBuilder().build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment appointmentAdded \u003d new AppointmentBuilder().withDateTime(\"2018-10-30 12:00\").build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment appointmentSameTime \u003d new AppointmentBuilder().withDateTime(\"2018-10-30 12:00\").build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment appointmentSameTimeDiffDate \u003d new AppointmentBuilder().withDateTime(\"2018-10-31 12:00\").build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment appointmentStartTimeClash \u003d new AppointmentBuilder().withDateTime(\"2018-10-30 12:01\").build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment appointmentEndTimeClash \u003d new AppointmentBuilder().withDateTime(\"2018-10-30 11:59\").build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment appointmentRightAfter \u003d new AppointmentBuilder().withDateTime(\"2018-10-30 12:30\").build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        doctor.addUpcomingAppointment(appointmentAdded);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(doctor.hasClashForAppointment(appointmentSameTime));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(doctor.hasClashForAppointment(appointmentSameTimeDiffDate));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(doctor.hasClashForAppointment(appointmentStartTimeClash));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(doctor.hasClashForAppointment(appointmentEndTimeClash));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(doctor.hasClashForAppointment(appointmentRightAfter));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 120
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/MedicalHistoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "public class MedicalHistoryTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void addAllergy() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        MedicalHistory medicalHistory \u003d new MedicalHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        medicalHistory.addAllergy(\"Nuts\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // Check addition of allergies"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(medicalHistory.getAllergies().get(0).equals(\"Nuts\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(medicalHistory.getAllergies().get(0).equals(\"Diary\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        medicalHistory.addAllergy(\"Diary\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // Check if new allergy is added to the back of list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(medicalHistory.getAllergies().get(0).equals(\"Diary\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(medicalHistory.getAllergies().get(1).equals(\"Diary\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void addCondition() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        MedicalHistory medicalHistory \u003d new MedicalHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        medicalHistory.addCondition(\"Asthma\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // Check addition of condition"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(medicalHistory.getConditions().get(0).equals(\"Asthma\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(medicalHistory.getConditions().get(0).equals(\"Sleep Walking\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        medicalHistory.addCondition(\"Sleep Walking\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // Check if new condition is added to back of list"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(medicalHistory.getConditions().get(0).equals(\"Sleep Walking\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(medicalHistory.getConditions().get(1).equals(\"Sleep Walking\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        MedicalHistory medicalHistory \u003d new MedicalHistory();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        medicalHistory.addAllergy(\"Nuts\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        medicalHistory.addCondition(\"Asthma\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        MedicalHistory sameMedicalHistory \u003d new MedicalHistory();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        sameMedicalHistory.setAllergies(medicalHistory.getAllergies());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        sameMedicalHistory.setConditions(medicalHistory.getConditions());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        MedicalHistory differentMedicalHistory \u003d new MedicalHistory();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        differentMedicalHistory.addAllergy(\"Chocolate\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        differentMedicalHistory.addCondition(\"Dust\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(medicalHistory.equals(medicalHistory));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(medicalHistory.equals(sameMedicalHistory));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(medicalHistory.equals(differentMedicalHistory));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/model/patient/PatientTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "package seedu.address.model.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static org.junit.Assert.assertNotSame;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static org.junit.Assert.assertSame;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.appointment.Status;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.testutil.AppointmentBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.testutil.PatientBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "public class PatientTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void addAllergy() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        patient.addAllergy(\"Nuts\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // Check if added correctly"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(patient.getMedicalHistory().getAllergies().contains(\"Nuts\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(patient.getMedicalHistory().getAllergies().contains(\"Chicken\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        patient.addAllergy(\"Chicken\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(patient.getMedicalHistory().getAllergies().contains(\"Chicken\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void addCondition() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        patient.addCondition(\"Asthma\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // Check if added correctly"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(patient.getMedicalHistory().getConditions().contains(\"Asthma\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(patient.getMedicalHistory().getConditions().contains(\"Heart Pain\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        patient.addCondition(\"Heart Pain\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(patient.getMedicalHistory().getConditions().contains(\"Heart Pain\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void addUpcomingAppointment() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // No appointment when first created"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(patient.getUpcomingAppointments().isEmpty());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // Add an appointment"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment appointmentToAdd \u003d new AppointmentBuilder().build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment randomAppointmentNotAdded \u003d new AppointmentBuilder().withAppointmentId(123).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        patient.addUpcomingAppointment(appointmentToAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // Upcoming Appointment no longer empty"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(patient.getUpcomingAppointments().isEmpty());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // Appointment list contains the appointment that was added"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(patient.getUpcomingAppointments().get(0) \u003d\u003d appointmentToAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertNotSame(patient.getUpcomingAppointments().get(0), randomAppointmentNotAdded);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void deleteUpcomingAppointment() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment appointmentToAdd \u003d new AppointmentBuilder().build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment anotherAppointmentToAdd \u003d new AppointmentBuilder().withComments(\"Hello\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment randomAppointmentNotAdded \u003d new AppointmentBuilder().withAppointmentId(123).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        patient.addUpcomingAppointment(appointmentToAdd);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        patient.deleteAppointment(appointmentToAdd);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // Check that appointment has been removed and ArrayList is empty"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(patient.getUpcomingAppointments().isEmpty());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        patient.addUpcomingAppointment(appointmentToAdd);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        patient.addUpcomingAppointment(anotherAppointmentToAdd);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        patient.deleteAppointment(appointmentToAdd);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // Check that appointment has been removed but ArrayList not empty"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(patient.getUpcomingAppointments().isEmpty());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertSame(patient.getUpcomingAppointments().get(0), anotherAppointmentToAdd);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // Delete random appointment"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        patient.deleteAppointment(randomAppointmentNotAdded);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        // Check that appointment is not removed"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(patient.getUpcomingAppointments().isEmpty());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertSame(patient.getUpcomingAppointments().get(0), anotherAppointmentToAdd);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void completeAppointment() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment appointmentToComplete \u003d new AppointmentBuilder().build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment anotherAppointmentToComplete \u003d new AppointmentBuilder().withAppointmentId(124).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment moreAppointmentNotComplete \u003d new AppointmentBuilder().withAppointmentId(123).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        patient.addUpcomingAppointment(appointmentToComplete);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        patient.addUpcomingAppointment(anotherAppointmentToComplete);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        patient.addUpcomingAppointment(moreAppointmentNotComplete);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        patient.completeUpcomingAppointment(appointmentToComplete);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        for (Appointment app : patient.getUpcomingAppointments()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            assertFalse(app.getStatus().equals(Status.COMPLETED));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        patient.completeUpcomingAppointment(anotherAppointmentToComplete);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        for (Appointment app : patient.getUpcomingAppointments()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            assertFalse(app.getStatus().equals(Status.COMPLETED));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void hasAppointment() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment appointmentToAdd \u003d new AppointmentBuilder().withAppointmentId(12345).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment appointmentNotToAdd \u003d new AppointmentBuilder().withAppointmentId(123).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        patient.addUpcomingAppointment(appointmentToAdd);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(patient.hasAppointment(appointmentToAdd.getAppointmentId()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(patient.hasAppointment(appointmentNotToAdd.getAppointmentId()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void hasClashForAppointment() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Patient patient \u003d new PatientBuilder().build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment appointmentAdded \u003d new AppointmentBuilder().withDateTime(\"2018-10-30 12:00\").build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment appointmentSameTime \u003d new AppointmentBuilder().withDateTime(\"2018-10-30 12:00\").build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment appointmentSameTimeDiffDate \u003d new AppointmentBuilder().withDateTime(\"2018-10-31 12:00\").build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment appointmentStartTimeClash \u003d new AppointmentBuilder().withDateTime(\"2018-10-30 12:01\").build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment appointmentEndTimeClash \u003d new AppointmentBuilder().withDateTime(\"2018-10-30 11:59\").build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        Appointment appointmentRightAfter \u003d new AppointmentBuilder().withDateTime(\"2018-10-30 12:30\").build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        patient.addUpcomingAppointment(appointmentAdded);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(patient.hasClashForAppointment(appointmentSameTime));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(patient.hasClashForAppointment(appointmentSameTimeDiffDate));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(patient.hasClashForAppointment(appointmentStartTimeClash));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertTrue(patient.hasClashForAppointment(appointmentEndTimeClash));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(patient.hasClashForAppointment(appointmentRightAfter));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 146
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().remove(0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        // different phone and email -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 97,
      "elroyhaw": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/RemarkTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florafong97"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florafong97"
        },
        "content": "public class RemarkTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        final Remark standardRemark \u003d new Remark(\"Likes dogs\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        //same values -\u003e returns true"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Remark remarkWithSameValue \u003d new Remark(\"Likes dogs\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertTrue(standardRemark.equals(remarkWithSameValue));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        //same object -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertTrue(standardRemark.equals(standardRemark));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        //null -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertFalse(standardRemark.equals(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        //different types -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertFalse(standardRemark.equals(new Name(\"John\")));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        //different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Remark remarkwithDiffValue \u003d new Remark(\"Likes cats\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertFalse(standardRemark.equals(remarkwithDiffValue));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florafong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florafong97": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static seedu.address.testutil.TypicalPatientsAndDoctors.ELLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import static seedu.address.testutil.TypicalPatientsAndDoctors.FIONA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPersonTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    private static final String VALID_REMARK \u003d BENSON.getRemark().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                        null, null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                VALID_REMARK, VALID_TAGS, null, null);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                        null, null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                VALID_REMARK, VALID_TAGS, null, null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_REMARK, VALID_TAGS,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                        null, null);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                VALID_REMARK, VALID_TAGS, null, null);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_REMARK, VALID_TAGS,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                        null, null);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                VALID_REMARK, VALID_TAGS, null, null);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_REMARK, invalidTags,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "                        null, null);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void toModelType_validDoctorDetails_returnsDoctor() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        XmlAdaptedPerson doctor \u003d new XmlAdaptedPerson(FIONA);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertEquals(FIONA, doctor.toModelType());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void toModelType_invalidDoctorDetails_returnsNotDoctor() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        XmlAdaptedPerson notDoctor \u003d new XmlAdaptedPerson(ELLE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(notDoctor.toModelType() instanceof Doctor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void toModelType_validPatientDetails_returnsPatient() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        XmlAdaptedPerson patient \u003d new XmlAdaptedPerson(ELLE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertEquals(ELLE, patient.toModelType());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void toModelType_invalidPatientDetails_returnsNotPatient() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        XmlAdaptedPerson notPatient \u003d new XmlAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        assertFalse(notPatient.toModelType() instanceof Patient);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 43,
      "-": 101,
      "florafong97": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAddressBookStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAddressBookStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlAddressBookStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new XmlAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"NotXmlFormatAddressBook.xml\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidAndValidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempAddressBook.xml\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        //assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        //assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            new XmlAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(new AddressBook(), null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 125,
      "florafong97": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AppointmentBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.appointment.AppointmentId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.appointment.Prescription;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.appointment.Status;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * A utility class to help with building Appointment objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "public class AppointmentBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public static final int DEFAULT_APPOINTMENT_ID \u003d 12345;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public static final String DEFAULT_DOCTOR \u003d \"JACKY\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public static final String DEFAULT_PATIENT \u003d \"MARY\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"2018-10-30 12:00\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public static final String DEFAULT_COMMENTS \u003d \"Heart appointment\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public static final String DEFAULT_FORMAT \u003d \"yyyy-MM-dd HH:mm\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private AppointmentId appointmentId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private String doctor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private String patient;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private LocalDateTime dateTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private Status status;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private String comments;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private List\u003cPrescription\u003e prescriptions;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Default constructor for the AppointmentBuilder."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public AppointmentBuilder() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        appointmentId \u003d new AppointmentId(DEFAULT_APPOINTMENT_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        doctor \u003d DEFAULT_DOCTOR;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        patient \u003d DEFAULT_PATIENT;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        dateTime \u003d LocalDateTime.parse(DEFAULT_DATE, DateTimeFormatter.ofPattern(DEFAULT_FORMAT));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        status \u003d status.UPCOMING;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        comments \u003d DEFAULT_COMMENTS;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        prescriptions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Initializes the AppointmentBuilder with the data of {@code appointmentToCopy}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public AppointmentBuilder(Appointment appointmentToCopy) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        appointmentId \u003d new AppointmentId(appointmentToCopy.getAppointmentId());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        doctor \u003d appointmentToCopy.getDoctor();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        patient \u003d appointmentToCopy.getPatient();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        dateTime \u003d appointmentToCopy.getDateTime();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        status \u003d appointmentToCopy.getStatus();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        comments \u003d appointmentToCopy.getComments();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        prescriptions \u003d new ArrayList\u003c\u003e(appointmentToCopy.getPrescriptions());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Sets the {@code appointmentId} of the {@code Appointment} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public AppointmentBuilder withAppointmentId(int id) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        this.appointmentId \u003d new AppointmentId(id);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Parses the {@code prescription} into a {@code Set\u003cTag\u003e} and set it to the {@code Patient} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public AppointmentBuilder withPrescriptions(List\u003cPrescription\u003e prescriptions) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        this.prescriptions \u003d prescriptions;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Sets the {@code doctor} of the {@code Appointment} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public AppointmentBuilder withDoctor(String doctor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        this.doctor \u003d doctor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Sets the {@code patient} of the {@code Appointment} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public AppointmentBuilder withPatient(String patient) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        this.patient \u003d patient;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Sets the {@code dateTime} of the {@code Appointment} that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public AppointmentBuilder withDateTime(String dateTime) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        this.dateTime \u003d LocalDateTime.parse(dateTime, DateTimeFormatter.ofPattern(DEFAULT_FORMAT));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Sets the {@code status} of the {@code Appointment} that we are building."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public AppointmentBuilder withStatus(String status) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        if (status.equals(\"COMPLETED\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            this.status \u003d Status.COMPLETED;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        } else if (status.equals(\"UPCOMING\")) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            this.status \u003d Status.UPCOMING;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     * Sets the {@code comments} of the {@code Appointment} that we are building."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public AppointmentBuilder withComments(String comments) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        this.comments \u003d comments;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public Appointment build() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return new Appointment(appointmentId, doctor, patient, dateTime, status, comments, prescriptions);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 116,
      "florafong97": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DoctorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": " * A utility class to help with building Doctor objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "public class DoctorBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String DEFAULT_TAG \u003d \"Doctor\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String DEFAULT_REMARK \u003d \"Likes to swim\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    private Remark remark;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private List\u003cAppointment\u003e upcomingAppointments;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public DoctorBuilder() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        remark \u003d new Remark(DEFAULT_REMARK);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        tags.add(new Tag(DEFAULT_TAG));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        upcomingAppointments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Initializes the DoctorBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public DoctorBuilder(Doctor doctorToCopy) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        name \u003d doctorToCopy.getName();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        phone \u003d doctorToCopy.getPhone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        email \u003d doctorToCopy.getEmail();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        address \u003d doctorToCopy.getAddress();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        remark \u003d doctorToCopy.getRemark();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(doctorToCopy.getTags());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        upcomingAppointments \u003d doctorToCopy.getUpcomingAppointments();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Sets the {@code Name} of the {@code Doctor} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public DoctorBuilder withName(String name) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Doctor} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public DoctorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Sets the {@code Address} of the {@code Doctor} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public DoctorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Sets the {@code Phone} of the {@code Doctor} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public DoctorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Sets the {@code Email} of the {@code Doctor} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public DoctorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Sets the {@code Remark} of the {@code Doctor} that we are building."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public DoctorBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        this.remark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Adds an {@code Appointment} of the {@code Doctor} that we are building"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public DoctorBuilder withAppointment(Appointment ... allAppointments) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        for (Appointment appointment : allAppointments) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            upcomingAppointments.add(appointment);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Constructor"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public Doctor build() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Doctor doctor \u003d new Doctor(name, phone, email, address, remark, tags);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        for (Appointment appointment : upcomingAppointments) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            doctor.addUpcomingAppointment(appointment);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return doctor;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangYafei1998": 93,
      "giamjuxian": 11,
      "florafong97": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/GoogleCalendarStub.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import java.security.GeneralSecurityException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import com.google.api.client.auth.oauth2.Credential;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import com.google.api.client.http.javanet.NetHttpTransport;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.calendar.GoogleCalendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " * A Google Calendar stub"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "public class GoogleCalendarStub implements GoogleCalendar {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public GoogleCalendarStub() {}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public Credential getCredentials(NetHttpTransport httpTransport, String userName)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void registerDoctor(String userName)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throws IOException, GeneralSecurityException {}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void addAppointment(String userName, Appointment appointment)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throws IOException, GeneralSecurityException {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    public void deleteAppointment(String userName, Appointment appointment)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "            throws IOException, GeneralSecurityException {}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "giamjuxian": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PatientBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.patient.MedicalHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": " * A utility class to help with building Patient objects."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "public class PatientBuilder {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String DEFAULT_TAG \u003d \"Patient\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String DEFAULT_REMARK \u003d \"Likes to swim\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String DEFAULT_TELEGRAM_ID \u003d \"1234\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String VALID_ALLERGY \u003d \"milk\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String VALID_CONDITION \u003d \"sub-health\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    private Remark remark;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    private String telegramId;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    private MedicalHistory medicalHistory;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "    private List\u003cAppointment\u003e upcomingAppointments;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    private List\u003cAppointment\u003e pastAppointments;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public PatientBuilder() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        remark \u003d new Remark(DEFAULT_REMARK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        tags.add(new Tag(DEFAULT_TAG));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        telegramId \u003d DEFAULT_TELEGRAM_ID;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        medicalHistory \u003d new MedicalHistory(new ArrayList\u003cString\u003e(Arrays.asList(VALID_ALLERGY)),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                new ArrayList\u003cString\u003e(Arrays.asList(VALID_CONDITION)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "giamjuxian"
        },
        "content": "        upcomingAppointments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        pastAppointments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     * Initializes the PatientBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public PatientBuilder(Patient patientToCopy) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        name \u003d patientToCopy.getName();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        phone \u003d patientToCopy.getPhone();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        email \u003d patientToCopy.getEmail();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        address \u003d patientToCopy.getAddress();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        remark \u003d patientToCopy.getRemark();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(patientToCopy.getTags());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        medicalHistory \u003d new MedicalHistory(patientToCopy.getMedicalHistory());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        upcomingAppointments \u003d patientToCopy.getUpcomingAppointments();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        pastAppointments \u003d patientToCopy.getPastAppointments();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     * Sets the {@code Name} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public PatientBuilder withName(String name) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Patient} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public PatientBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     * Sets the {@code Address} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public PatientBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     * Sets the {@code Phone} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public PatientBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     * Sets the {@code Email} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public PatientBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     * Sets the {@code Remark} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public PatientBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        this.remark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     * Sets the {@code MedicalHistory} of the {@code Patient} that we are building."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public PatientBuilder withMedicalHistory(String allergy, String condition) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        if (allergy.equals(\"\") \u0026\u0026 condition.equals(\"\")) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            this.medicalHistory \u003d new MedicalHistory();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        } else if (!(allergy.equals(\"\")) \u0026\u0026 condition.equals(\"\")) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            this.medicalHistory \u003d new MedicalHistory(new ArrayList\u003cString\u003e(Arrays.asList(allergy)), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        } else if ((allergy.equals(\"\")) \u0026\u0026 !(condition.equals(\"\"))) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            this.medicalHistory \u003d new MedicalHistory(new ArrayList\u003c\u003e(),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                    new ArrayList\u003cString\u003e(Arrays.asList(condition)));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            this.medicalHistory \u003d new MedicalHistory(new ArrayList\u003cString\u003e(Arrays.asList(allergy)),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                    new ArrayList\u003cString\u003e(Arrays.asList(condition)));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Adds one {@code appointment} of the {@code Patient} that we are building"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public PatientBuilder withAppointment(Appointment ... allAppointments) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        for (Appointment appointment : allAppointments) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            upcomingAppointments.add(appointment);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     * constructor"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public Patient build() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        return new Patient(name, phone, email, address, remark, tags, telegramId,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "                upcomingAppointments, pastAppointments, medicalHistory);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangYafei1998": 148,
      "giamjuxian": 2,
      "florafong97": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String DEFAULT_REMARK \u003d \"Likes to swim\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    private Remark remark;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        remark \u003d new Remark(DEFAULT_REMARK);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        remark \u003d personToCopy.getRemark();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Sets the {@code Remark} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public PersonBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        this.remark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return new Person(name, phone, email, address, remark, tags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 92,
      "florafong97": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PrescriptionBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florafong97"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.ConsumptionPerDay;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.Dosage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.MedicineName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.Prescription;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florafong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florafong97"
        },
        "content": " * A utility class to help with building Prescription objects"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florafong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florafong97"
        },
        "content": "public class PrescriptionBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final int DEFAULT_APPOINTMENT_ID \u003d 10000;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String DEFAULT_MEDICINE_NAME \u003d \"Paracetamol\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String DEFAULT_DOSAGE \u003d \"2\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final String DEFAULT_CONSUMPTION_PER_DAY \u003d \"3\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    private int appointmentId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    private MedicineName medicineName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    private Dosage dosage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    private ConsumptionPerDay consumptionPerDay;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Default constructor for the PrescriptionBuilder"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public PrescriptionBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        appointmentId \u003d DEFAULT_APPOINTMENT_ID;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        medicineName \u003d new MedicineName(DEFAULT_MEDICINE_NAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        dosage \u003d new Dosage(DEFAULT_DOSAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        consumptionPerDay \u003d new ConsumptionPerDay(DEFAULT_CONSUMPTION_PER_DAY);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Initializes the PrescriptionBuilder with the data of {@code prescriptionToCopy}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public PrescriptionBuilder(Prescription prescriptionToCopy) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        appointmentId \u003d prescriptionToCopy.getId();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        medicineName \u003d prescriptionToCopy.getMedicineName();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        dosage \u003d prescriptionToCopy.getDosage();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        consumptionPerDay \u003d prescriptionToCopy.getConsumptionPerDay();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Sets the {@code appointmentId} of the {@code Prescription} that we are building"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public PrescriptionBuilder withAppointmentId(int id) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        this.appointmentId \u003d id;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Sets the {@code medicineName} of the {@code Prescription} that we are building"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public PrescriptionBuilder withMedicineName(String medicineName) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        this.medicineName \u003d new MedicineName(medicineName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Sets the {@code dosage} of the {@code Prescription} that we are building"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public PrescriptionBuilder withDosage(String dosage) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        this.dosage \u003d new Dosage(dosage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Sets the {@code consumptionPerDay} of the {@code Prescription} that we are building"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public PrescriptionBuilder withConsumptionPerDay(String consumptionPerDay) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        this.consumptionPerDay \u003d new ConsumptionPerDay(consumptionPerDay);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public Prescription build() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return new Prescription(appointmentId, medicineName, dosage, consumptionPerDay);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "florafong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florafong97": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalAppointments.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "florafong97"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "florafong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "florafong97"
        },
        "content": " * A utility class containing a list of {@code Appointment} objects to be used in tests"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "florafong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "florafong97"
        },
        "content": "public class TypicalAppointments {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final Appointment FIRST \u003d new AppointmentBuilder().withAppointmentId(10000)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            .withDoctor(\"John\").withPatient(\"Amanda\").withDateTime(\"2018-12-11 12:00\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            .withComments(\"Heart check up\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            .withPrescriptions(new ArrayList\u003c\u003e(Arrays.asList(new PrescriptionBuilder()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                    .withAppointmentId(10000).withMedicineName(\"Aspirin\").build()))).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final Appointment SECOND \u003d new AppointmentBuilder().withAppointmentId(10001)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            .withDoctor(\"John\").withPatient(\"George\").withDateTime(\"2018-12-12 12:00\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            .withComments(\"Flu check up\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            .withPrescriptions(new ArrayList\u003c\u003e(Arrays.asList(new PrescriptionBuilder()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                    .withAppointmentId(10001).withMedicineName(\"Tamiflu\").build()))).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final Appointment THIRD \u003d new AppointmentBuilder().withAppointmentId(10002)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            .withDoctor(\"Jane\").withPatient(\"Alice\").withDateTime(\"2018-12-13 12:00\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            .withComments(\"Flu check up\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            .withPrescriptions(new ArrayList\u003c\u003e(Arrays.asList(new PrescriptionBuilder()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                    .withAppointmentId(10002).withMedicineName(\"Tamiflu\").build()))).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final Appointment FOURTH \u003d new AppointmentBuilder().withAppointmentId(10003)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            .withDoctor(\"Jane\").withPatient(\"Bob\").withDateTime(\"2018-12-14 12:00\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            .withComments(\"Cough check up\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            .withPrescriptions(new ArrayList\u003c\u003e(Arrays.asList(new PrescriptionBuilder()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                    .withAppointmentId(10003).withMedicineName(\"Dextromethorphan\").build()))).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final Appointment FIFTH \u003d new AppointmentBuilder().withAppointmentId(10004)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            .withDoctor(\"John\").withPatient(\"Patricia\").withDateTime(\"2018-12-15 12:00\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            .withComments(\"Heart check up\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            .withPrescriptions(new ArrayList\u003c\u003e(Arrays.asList(new PrescriptionBuilder()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "florafong97"
        },
        "content": "                    .withAppointmentId(10004).withMedicineName(\"Aspirin\").build()))).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    private TypicalAppointments() {} //prevents instantiation"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Returns an {@Code AddressBook} with al the typical appointments"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static AddressBook getTypicalAddressBookWithAppointments() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        for (Appointment appointment : getTypicalAppointments()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            ab.addAppointment(appointment);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static List\u003cAppointment\u003e getTypicalAppointments() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(FIRST, SECOND, THIRD, FOURTH, FIFTH));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "florafong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "florafong97": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPatientsAndDoctors.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONDITION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PATIENT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "public class TypicalPatientsAndDoctors {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final Patient ALICE \u003d new PatientBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withRemark(\"\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withTags(\"Patient\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withMedicalHistory(\"egg\", \"sub-health\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final Patient BENSON \u003d new PatientBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            .withRemark(\"Has heart disease\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withTags(\"Patient\", \"friends\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withMedicalHistory(\"\", \"having cold\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final Patient CARL \u003d new PatientBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withPhone(\"95352563\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withEmail(\"heinz@example.com\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withAddress(\"wall street\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withRemark(\"\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withTags(\"Patient\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withMedicalHistory(\"fish\", \"\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final Patient DANIEL \u003d new PatientBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withPhone(\"87652533\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withEmail(\"cornelia@example.com\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withAddress(\"10th street\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withRemark(\"\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withTags(\"Patient\", \"friends\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withMedicalHistory(\"\", \"\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final Patient ELLE \u003d new PatientBuilder()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withEmail(\"werner@example.com\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withAddress(\"michegan ave\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withRemark(\"\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withTags(\"Patient\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withMedicalHistory(\"\", \"\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final Doctor FIONA \u003d new DoctorBuilder()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withPhone(\"9482427\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withEmail(\"lydia@example.com\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withAddress(\"little tokyo\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withRemark(\"\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withTags(\"Doctor\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final Doctor GEORGE \u003d new DoctorBuilder()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withName(\"George Best\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withPhone(\"9482442\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withEmail(\"anna@example.com\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withAddress(\"4th street\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withRemark(\"\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withTags(\"Doctor\").build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final Doctor HELENA \u003d new DoctorBuilder()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withName(\"Helena Sophia\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withPhone(\"95264283\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withEmail(\"helena@example.com\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withAddress(\"7th street\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withRemark(\"\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withTags(\"Doctor\").build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final Patient HOON \u003d new PatientBuilder()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withPhone(\"8482424\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withEmail(\"stefan@example.com\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withAddress(\"little india\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withRemark(\"\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withTags(\"Patient\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withMedicalHistory(\"\", \"\").build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final Patient IDA \u003d new PatientBuilder()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withPhone(\"8482131\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withEmail(\"hans@example.com\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withAddress(\"chicago ave\")"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withRemark(\"\")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withTags(\"Patient\")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withMedicalHistory(\"\", \"\").build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final Patient AMY \u003d new PatientBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withRemark(\"\")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withTags(VALID_TAG_PATIENT)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withMedicalHistory(VALID_ALLERGY, VALID_CONDITION).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final Patient BOB \u003d new PatientBuilder()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withRemark(\"\")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND, VALID_TAG_PATIENT)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            .withMedicalHistory(VALID_ALLERGY, VALID_CONDITION).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    private TypicalPatientsAndDoctors() {} // prevents instantiation"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static AddressBook getTypicalAddressBookWithPatientAndDoctor() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        for (Person person : getTypicalPatientsAndDoctors()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPatientsAndDoctors() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE, HELENA));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YangYafei1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangYafei1998": 130,
      "elroyhaw": 8,
      "florafong97": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPatientsAndDoctorsWithAppt.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONDITION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PATIENT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.appointment.Appointment;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.doctor.Doctor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.patient.Patient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " * A utility class containing a list of {@code Person} and {@code Appointment} objects to be used in tests."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "public class TypicalPatientsAndDoctorsWithAppt {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    // Appointment objects"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final Appointment FIRST \u003d new AppointmentBuilder().withAppointmentId(10000)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withDoctor(\"Fiona Kunz\").withPatient(\"Alice Pauline\").withDateTime(\"2018-12-11 12:00\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withComments(\"Heart check up\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withPrescriptions(new ArrayList\u003c\u003e(Arrays.asList(new PrescriptionBuilder()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                    .withAppointmentId(10000).withMedicineName(\"Aspirin\").build()))).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final Appointment SECOND \u003d new AppointmentBuilder().withAppointmentId(10001)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withDoctor(\"George Best\").withPatient(\"Benson Meier\").withDateTime(\"2018-12-12 12:00\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withComments(\"Flu check up\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withPrescriptions(new ArrayList\u003c\u003e(Arrays.asList(new PrescriptionBuilder()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                    .withAppointmentId(10001).withMedicineName(\"Tamiflu\").build()))).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final Appointment THIRD \u003d new AppointmentBuilder().withAppointmentId(10002)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withDoctor(\"Fiona Kunz\").withPatient(\"Carl Kurz\").withDateTime(\"2018-12-13 12:00\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withComments(\"Flu check up\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withPrescriptions(new ArrayList\u003c\u003e(Arrays.asList(new PrescriptionBuilder()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                    .withAppointmentId(10002).withMedicineName(\"Tamiflu\").build()))).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final Appointment FOURTH \u003d new AppointmentBuilder().withAppointmentId(10003)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withDoctor(\"George Best\").withPatient(\"Daniel Meier\").withDateTime(\"2018-12-14 12:00\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withComments(\"Cough check up\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withPrescriptions(new ArrayList\u003c\u003e(Arrays.asList(new PrescriptionBuilder()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                    .withAppointmentId(10003).withMedicineName(\"Dextromethorphan\").build()))).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final Appointment FIFTH \u003d new AppointmentBuilder().withAppointmentId(10004)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withDoctor(\"Fiona Kunz\").withPatient(\"Elle Meyer\").withDateTime(\"2018-12-15 12:00\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withComments(\"Heart check up\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withPrescriptions(new ArrayList\u003c\u003e(Arrays.asList(new PrescriptionBuilder()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "                    .withAppointmentId(10004).withMedicineName(\"Aspirin\").build()))).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    // Persons objects"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final Patient ALICE \u003d new PatientBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withRemark(\"\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withTags(\"Patient\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withMedicalHistory(\"egg\", \"sub-health\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withAppointment(FIRST).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final Patient BENSON \u003d new PatientBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withRemark(\"\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withTags(\"Patient\", \"friends\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withMedicalHistory(\"\", \"having cold\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withAppointment(SECOND).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final Patient CARL \u003d new PatientBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withPhone(\"95352563\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withEmail(\"heinz@example.com\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withAddress(\"wall street\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withRemark(\"\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withTags(\"Patient\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withMedicalHistory(\"fish\", \"\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withAppointment(THIRD).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final Patient DANIEL \u003d new PatientBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withPhone(\"87652533\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withEmail(\"cornelia@example.com\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withAddress(\"10th street\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withRemark(\"\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withTags(\"Patient\", \"friends\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withMedicalHistory(\"\", \"\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withAppointment(FOURTH).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final Patient ELLE \u003d new PatientBuilder()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withEmail(\"werner@example.com\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withAddress(\"michegan ave\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withRemark(\"\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withTags(\"Patient\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withMedicalHistory(\"\", \"\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withAppointment(FIFTH).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final Doctor FIONA \u003d new DoctorBuilder()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withPhone(\"9482427\")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withEmail(\"lydia@example.com\")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withAddress(\"little tokyo\")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withRemark(\"\")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withTags(\"Doctor\")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withAppointment(FIRST, THIRD, FIFTH).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final Doctor GEORGE \u003d new DoctorBuilder()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withName(\"George Best\")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withPhone(\"9482442\")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withEmail(\"anna@example.com\")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withAddress(\"4th street\")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withRemark(\"\")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withTags(\"Doctor\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withAppointment(SECOND, FOURTH).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final Patient HOON \u003d new PatientBuilder()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withPhone(\"8482424\")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withEmail(\"stefan@example.com\")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withAddress(\"little india\")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withRemark(\"\")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withTags(\"Patient\")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withMedicalHistory(\"\", \"\").build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final Patient IDA \u003d new PatientBuilder()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withPhone(\"8482131\")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withEmail(\"hans@example.com\")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withAddress(\"chicago ave\")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withRemark(\"\")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withTags(\"Patient\")"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withMedicalHistory(\"\", \"\").build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final Patient AMY \u003d new PatientBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withRemark(\"\")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withTags(VALID_TAG_PATIENT)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withMedicalHistory(VALID_ALLERGY, VALID_CONDITION).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final Patient BOB \u003d new PatientBuilder()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withRemark(\"\")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND, VALID_TAG_PATIENT)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            .withMedicalHistory(VALID_ALLERGY, VALID_CONDITION).build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    private TypicalPatientsAndDoctorsWithAppt() {} // prevents instantiation"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static AddressBook getTypicalAddressBookWithPatientAndDoctorWithAppt() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        for (Person person : getTypicalPatientsAndDoctorsWithAppt()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        for (Appointment appointment : getTypicalAppointments()) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "            ab.addAppointment(appointment);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPatientsAndDoctorsWithAppt() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public static List\u003cAppointment\u003e getTypicalAppointments() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(FIRST, SECOND, THIRD, FOURTH, FIFTH));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elroyhaw": 174,
      "florafong97": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_ID_FIRST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONSUMPTION_PER_DAY_PARACETAMOL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DOSAGE_PARACETAMOL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.ConsumptionPerDay;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.Dosage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.MedicineName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "florafong97"
        },
        "content": "import seedu.address.model.appointment.Prescription;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            .withRemark(\"\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            .withRemark(\"\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withRemark(\"\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withRemark(\"\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withRemark(\"\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withRemark(\"\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withRemark(\"\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withRemark(\"\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withRemark(\"\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withRemark(\"\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withRemark(\"\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    public static final Prescription PARACETAMOL \u003d new Prescription(VALID_APPOINTMENT_ID_FIRST,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            new MedicineName(VALID_DOSAGE_PARACETAMOL), new Dosage(VALID_DOSAGE_PARACETAMOL),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            new ConsumptionPerDay(VALID_CONSUMPTION_PER_DAY_PARACETAMOL));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    private TypicalPersons() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 65,
      "florafong97": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/HelpWindowTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assume.assumeFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.HelpWindow.USERGUIDE_FILE_PATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindowTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindowHandle helpWindowHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e helpWindow \u003d new HelpWindow());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.registerStage(helpWindow::getRoot);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindowHandle \u003d new HelpWindowHandle(helpWindow.getRoot());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedHelpPage \u003d HelpWindow.class.getResource(USERGUIDE_FILE_PATH);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedHelpPage, helpWindowHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsShowing_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.isShowing());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsHiding_returnsFalse() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.isShowing());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus_helpWindowNotFocused_focused() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: This test skip can be removed once this bug is fixed:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // https://github.com/javafxports/openjdk-jfx/issues/50"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // When there are two stages (stage1 and stage2) shown,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage1 is in focus and stage2.requestFocus() is called,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // we expect that stage1.isFocused() will return false while"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage2.isFocused() returns true. However, as reported in the bug report,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // both stage1.isFocused() and stage2.isFocused() returns true,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // which fails the test."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assumeFalse(\"Test skipped in headless mode: Window focus behavior is buggy.\", guiRobot.isHeadlessMode());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Focus on another stage to remove focus from the helpWindow"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(Stage::requestFocus);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        ///assertFalse(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::focus);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        ///"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        // assertTrue(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 67,
      "florafong97": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PersonListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final ObservableList\u003cPerson\u003e TYPICAL_PERSONS \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.observableList(getTypicalPersons());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanelHandle personListPanelHandle;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            Person expectedPerson \u003d TYPICAL_PERSONS.get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(expectedPerson, actualCard);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle expectedPerson \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle selectedPerson \u003d personListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardEquals(expectedPerson, selectedPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifies that creating and deleting large number of persons in {@code PersonListPanel} requires lesser than"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cPerson\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }, \"Creation and deletion of person cards exceeded time limit\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of persons containing {@code personCount} persons that is used to populate the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code PersonListPanel}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObservableList\u003cPerson\u003e createBackingList(int personCount) throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithPersons(personCount);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook xmlAddressBook \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlUtil.getDataFromFile(xmlFile, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.observableArrayList(xmlAddressBook.toModelType().getPersonList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a .xml file containing {@code personCount} persons. This file will be deleted when the JVM terminates."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path createXmlFileWithPersons(int personCount) throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003caddressbook\u003e\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c personCount; i++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cpersons\u003e\\n\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cname\u003e\").append(i).append(\"a\u003c/name\u003e\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cphone\u003e000\u003c/phone\u003e\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cemail\u003ea@aa\u003c/email\u003e\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003caddress\u003ea\u003c/address\u003e\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "florafong97"
        },
        "content": "            builder.append(\"\u003cremark\u003er\u003c/remark\u003e\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003c/persons\u003e\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c/addressbook\u003e\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path manyPersonsFile \u003d Paths.get(TEST_DATA_FOLDER + \"manyPersons.xml\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(manyPersonsFile);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(manyPersonsFile, builder.toString());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        manyPersonsFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return manyPersonsFile;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes {@code personListPanelHandle} with a {@code PersonListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code PersonListPanel}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initUi(ObservableList\u003cPerson\u003e backingList) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonListPanel personListPanel \u003d new PersonListPanel(backingList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personListPanel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 124,
      "florafong97": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertEquals(expectedCard.getRemark(), actualCard.getRemark());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertEquals(expectedPerson.getRemark().value, actualCard.getRemark());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.length; i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOfPeople \u003d personListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 74,
      "florafong97": 2
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toAdd \u003d AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person -\u003e rejected */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Person toAdd) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Person)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "florafong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    private void assertCommandSuccess(String command, Person toAdd) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "florafong97"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "florafong97"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "florafong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 228,
      "florafong97": 13
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "import guitests.guihandles.InformationPanelHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    //    public BrowserPanelHandle getBrowserPanel() { return mainWindowHandle.getBrowserPanel(); }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "    public InformationPanelHandle getInformationPanel() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        return mainWindowHandle.getInformationPanel();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        //        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the person at {@code index} of the displayed list."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(expectedModel.getAddressBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        //        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * of the previously selected person."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        //        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        //        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        //        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 279,
      "elroyhaw": 10
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        //        getBrowserPanel().click();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        //        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elroyhaw"
        },
        "content": "        //        assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 95,
      "elroyhaw": 3
    }
  }
]
